// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`kitchen sink alias 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeFunction": Object {
                  "alias": Object {
                    "Alias": Object {
                      "aliasname": "a#b",
                    },
                  },
                  "functions": Array [
                    Array [
                      Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 30,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 33,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "generate_series",
                              },
                            },
                          ],
                          "location": 14,
                        },
                      },
                      null,
                    ],
                  ],
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 7,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 41,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeFunction": Object {
                  "alias": Object {
                    "Alias": Object {
                      "aliasname": "a#b",
                      "colnames": Array [
                        Object {
                          "String": Object {
                            "str": "c#d",
                          },
                        },
                      ],
                    },
                  },
                  "functions": Array [
                    Array [
                      Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 74,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 77,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "generate_series",
                              },
                            },
                          ],
                          "location": 58,
                        },
                      },
                      null,
                    ],
                  ],
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 51,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 51,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 50,
        "stmt_location": 42,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeFunction": Object {
                  "alias": Object {
                    "Alias": Object {
                      "aliasname": "aba",
                    },
                  },
                  "functions": Array [
                    Array [
                      Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 126,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 129,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "generate_series",
                              },
                            },
                          ],
                          "location": 110,
                        },
                      },
                      null,
                    ],
                  ],
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 103,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 103,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 44,
        "stmt_location": 93,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeFunction": Object {
                  "alias": Object {
                    "Alias": Object {
                      "aliasname": "aba",
                      "colnames": Array [
                        Object {
                          "String": Object {
                            "str": "ccd",
                          },
                        },
                      ],
                    },
                  },
                  "functions": Array [
                    Array [
                      Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 170,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 173,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "generate_series",
                              },
                            },
                          ],
                          "location": 154,
                        },
                      },
                      null,
                    ],
                  ],
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 147,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 147,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 50,
        "stmt_location": 138,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink alias 2`] = `
"SELECT * FROM generate_series(1, 1) AS \\"a#b\\";
SELECT * FROM generate_series(1, 1) AS \\"a#b\\"(\\"c#d\\");
SELECT * FROM generate_series(1, 1) AS aba;
SELECT * FROM generate_series(1, 1) AS aba(ccd);"
`;

exports[`kitchen sink alter 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateSchemaStmt": Object {
            "if_not_exists": true,
            "schemaname": "app_jobs",
          },
        },
        "stmt_len": 36,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 52,
                "relname": "job_queues",
                "relpersistence": "p",
                "schemaname": "app_jobs",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "queue_name",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 95,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 104,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 76,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 87,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "varchar",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "job_count",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 133,
                        "raw_expr": Object {
                          "A_Const": Object {
                            "location": 141,
                            "val": Object {
                              "Integer": Object {
                                "ival": 0,
                              },
                            },
                          },
                        },
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 143,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 119,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 129,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "locked_at",
                  "is_local": true,
                  "location": 155,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 165,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "timestamptz",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "locked_by",
                  "is_local": true,
                  "location": 193,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 203,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "varchar",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 175,
        "stmt_location": 37,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "subtype": 56,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 227,
                "relname": "job_queues",
                "relpersistence": "p",
                "schemaname": "app_jobs",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 59,
        "stmt_location": 213,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 288,
                "relname": "foo",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 296,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 301,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "foo_timestamp",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 334,
                        "raw_expr": Object {
                          "SQLValueFunction": Object {
                            "location": 342,
                            "op": 0,
                            "typmod": -1,
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 309,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 323,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "timestampz",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 83,
        "stmt_location": 273,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "RenameStmt": Object {
            "behavior": 0,
            "newname": "city",
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 371,
                "relname": "foo",
                "relpersistence": "p",
              },
            },
            "relationType": 37,
            "renameType": 6,
            "subname": "name",
          },
        },
        "stmt_len": 44,
        "stmt_location": 357,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "name": "foo_timestamp",
                  "subtype": 3,
                },
              },
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "ColumnDef": Object {
                      "location": 482,
                      "raw_default": Object {
                        "A_Expr": Object {
                          "kind": 0,
                          "lexpr": Object {
                            "TypeCast": Object {
                              "arg": Object {
                                "A_Const": Object {
                                  "location": 569,
                                  "val": Object {
                                    "String": Object {
                                      "str": "epoch",
                                    },
                                  },
                                },
                              },
                              "location": -1,
                              "typeName": Object {
                                "TypeName": Object {
                                  "location": 544,
                                  "names": Array [
                                    Object {
                                      "String": Object {
                                        "str": "pg_catalog",
                                      },
                                    },
                                    Object {
                                      "String": Object {
                                        "str": "timestamptz",
                                      },
                                    },
                                  ],
                                  "typemod": -1,
                                },
                              },
                            },
                          },
                          "location": 577,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": "+",
                              },
                            },
                          ],
                          "rexpr": Object {
                            "A_Expr": Object {
                              "kind": 0,
                              "lexpr": Object {
                                "ColumnRef": Object {
                                  "fields": Array [
                                    Object {
                                      "String": Object {
                                        "str": "foo_timestamp",
                                      },
                                    },
                                  ],
                                  "location": 579,
                                },
                              },
                              "location": 593,
                              "name": Array [
                                Object {
                                  "String": Object {
                                    "str": "*",
                                  },
                                },
                              ],
                              "rexpr": Object {
                                "TypeCast": Object {
                                  "arg": Object {
                                    "A_Const": Object {
                                      "location": 604,
                                      "val": Object {
                                        "String": Object {
                                          "str": "1 second",
                                        },
                                      },
                                    },
                                  },
                                  "location": -1,
                                  "typeName": Object {
                                    "TypeName": Object {
                                      "location": 595,
                                      "names": Array [
                                        Object {
                                          "String": Object {
                                            "str": "pg_catalog",
                                          },
                                        },
                                        Object {
                                          "String": Object {
                                            "str": "interval",
                                          },
                                        },
                                      ],
                                      "typemod": -1,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                      "typeName": Object {
                        "TypeName": Object {
                          "location": 501,
                          "names": Array [
                            Object {
                              "String": Object {
                                "str": "pg_catalog",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "timestamptz",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                  },
                  "name": "foo_timestamp",
                  "subtype": 25,
                },
              },
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "FuncCall": Object {
                      "funcname": Array [
                        Object {
                          "String": Object {
                            "str": "now",
                          },
                        },
                      ],
                      "location": 659,
                    },
                  },
                  "name": "foo_timestamp",
                  "subtype": 3,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 416,
                "relname": "foo",
                "relpersistence": "p",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 262,
        "stmt_location": 402,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "s",
                      "fk_upd_action": "a",
                      "initially_valid": true,
                      "location": 695,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 760,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 679,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 111,
        "stmt_location": 665,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "c",
                      "fk_matchtype": "s",
                      "fk_upd_action": "a",
                      "initially_valid": true,
                      "location": 807,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 872,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 791,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 129,
        "stmt_location": 777,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "r",
                      "fk_matchtype": "s",
                      "fk_upd_action": "a",
                      "initially_valid": true,
                      "location": 937,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 1002,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 921,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 130,
        "stmt_location": 907,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "s",
                      "fk_upd_action": "a",
                      "initially_valid": true,
                      "location": 1068,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 1133,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1052,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 131,
        "stmt_location": 1038,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "n",
                      "fk_matchtype": "s",
                      "fk_upd_action": "a",
                      "initially_valid": true,
                      "location": 1200,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 1265,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1184,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 130,
        "stmt_location": 1170,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "s",
                      "fk_upd_action": "d",
                      "initially_valid": true,
                      "location": 1331,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 1396,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1315,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 133,
        "stmt_location": 1301,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "s",
                      "fk_upd_action": "c",
                      "initially_valid": true,
                      "location": 1465,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 1530,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1449,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 129,
        "stmt_location": 1435,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "s",
                      "fk_upd_action": "r",
                      "initially_valid": true,
                      "location": 1595,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 1660,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1579,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 130,
        "stmt_location": 1565,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "s",
                      "fk_upd_action": "a",
                      "initially_valid": true,
                      "location": 1726,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 1791,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1710,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 131,
        "stmt_location": 1696,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "s",
                      "fk_upd_action": "n",
                      "initially_valid": true,
                      "location": 1858,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 1923,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1842,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 130,
        "stmt_location": 1828,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "s",
                      "fk_upd_action": "d",
                      "initially_valid": true,
                      "location": 1989,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 2054,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1973,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 133,
        "stmt_location": 1959,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "order_id",
                          },
                        },
                      ],
                      "fk_del_action": "n",
                      "fk_matchtype": "s",
                      "fk_upd_action": "d",
                      "initially_valid": true,
                      "location": 2123,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 2188,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 2107,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 166,
        "stmt_location": 2093,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "a",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "b",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "f",
                      "fk_upd_action": "a",
                      "initially_valid": true,
                      "location": 2290,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "c",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "d",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 2350,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 2274,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 118,
        "stmt_location": 2260,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "my_constraint_fey",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "a",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "b",
                          },
                        },
                      ],
                      "fk_del_action": "a",
                      "fk_matchtype": "s",
                      "fk_upd_action": "a",
                      "initially_valid": true,
                      "location": 2409,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "c",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "d",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 2470,
                          "relname": "orders",
                          "relpersistence": "p",
                          "schemaname": "othr",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 2393,
                "relname": "foo",
                "relpersistence": "p",
                "schemaname": "scha",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 121,
        "stmt_location": 2379,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "col_field_pkey",
                      "contype": 5,
                      "keys": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "location": 2547,
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "location": 2520,
                "relname": "mfield",
                "relpersistence": "p",
                "schemaname": "collections",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 88,
        "stmt_location": 2501,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "col_field_pkey",
                      "contype": 5,
                      "keys": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "location": 2631,
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 2604,
                "relname": "mfield",
                "relpersistence": "p",
                "schemaname": "collections",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 83,
        "stmt_location": 2590,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink alter 2`] = `
"CREATE SCHEMA IF NOT EXISTS app_jobs;
CREATE TABLE app_jobs.job_queues (
queue_name varchar NOT NULL PRIMARY KEY,
job_count int DEFAULT ( 0 ) NOT NULL,
locked_at pg_catalog.timestamptz,
locked_by varchar
);
ALTER TABLE app_jobs.job_queues ENABLE ROW LEVEL SECURITY;
CREATE TABLE foo (
name text,
foo_timestamp timestampz DEFAULT ( CURRENT_DATE )
);
ALTER TABLE foo RENAME COLUMN name TO city;
ALTER TABLE foo ALTER COLUMN foo_timestamp DROP DEFAULT, ALTER COLUMN foo_timestamp TYPE pg_catalog.timestamptz USING (('epoch'::pg_catalog.timestamptz) + (((foo_timestamp) * ('1 second'::interval)))), ALTER COLUMN foo_timestamp SET DEFAULT now();
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id );
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON DELETE CASCADE;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON DELETE RESTRICT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id );
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON DELETE SET NULL;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE SET DEFAULT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE CASCADE;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE RESTRICT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id );
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE SET NULL;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON UPDATE SET DEFAULT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( order_id ) REFERENCES othr.orders ( id ) ON DELETE SET NULL ON UPDATE SET DEFAULT;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( a, b ) REFERENCES othr.orders ( c, d ) MATCH FULL;
ALTER TABLE scha.foo ADD CONSTRAINT my_constraint_fey FOREIGN KEY ( a, b ) REFERENCES othr.orders ( c, d );
ALTER TABLE ONLY collections.mfield ADD CONSTRAINT col_field_pkey PRIMARY KEY ( id );
ALTER TABLE collections.mfield ADD CONSTRAINT col_field_pkey PRIMARY KEY ( id );"
`;

exports[`kitchen sink comments 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "@fieldName parent",
            "object": Array [
              Object {
                "String": Object {
                  "str": "roles_public",
                },
              },
              Object {
                "String": Object {
                  "str": "memberships",
                },
              },
              Object {
                "String": Object {
                  "str": "memberships_membership_id_fkey",
                },
              },
            ],
            "objtype": 36,
          },
        },
        "stmt_len": 105,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Development Database",
            "object": Object {
              "String": Object {
                "str": "my_database",
              },
            },
            "objtype": 9,
          },
        },
        "stmt_len": 58,
        "stmt_location": 106,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Email Address Domain",
            "object": Object {
              "TypeName": Object {
                "location": 184,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "my_domain",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
            "objtype": 12,
          },
        },
        "stmt_len": 54,
        "stmt_location": 165,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "implements the hstore data type",
            "object": Object {
              "String": Object {
                "str": "hstore",
              },
            },
            "objtype": 15,
          },
        },
        "stmt_len": 65,
        "stmt_location": 220,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "my foreign data wrapper",
            "object": Object {
              "String": Object {
                "str": "mywrapper",
              },
            },
            "objtype": 16,
          },
        },
        "stmt_len": 71,
        "stmt_location": 286,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Employee Information in other database",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_foreign_table",
                },
              },
            ],
            "objtype": 18,
          },
        },
        "stmt_len": 86,
        "stmt_location": 358,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Returns Roman Numeral",
            "object": Object {
              "ObjectWithArgs": Object {
                "objargs": Array [
                  Object {
                    "TypeName": Object {
                      "location": 479,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "timestamp",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                ],
                "objname": Array [
                  Object {
                    "String": Object {
                      "str": "my_function",
                    },
                  },
                ],
              },
            },
            "objtype": 19,
          },
        },
        "stmt_len": 71,
        "stmt_location": 445,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Enforces uniqueness on employee ID",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_index",
                },
              },
            ],
            "objtype": 20,
          },
        },
        "stmt_len": 66,
        "stmt_location": 517,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Python support for stored procedures",
            "object": Object {
              "String": Object {
                "str": "plpython",
              },
            },
            "objtype": 21,
          },
        },
        "stmt_len": 71,
        "stmt_location": 584,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Planning document",
            "object": Object {
              "Integer": Object {
                "ival": 346344,
              },
            },
            "objtype": 22,
          },
        },
        "stmt_len": 54,
        "stmt_location": 656,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Summary of order history",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_matview",
                },
              },
            ],
            "objtype": 23,
          },
        },
        "stmt_len": 70,
        "stmt_location": 711,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Performs intersection of two texts",
            "object": Object {
              "ObjectWithArgs": Object {
                "objargs": Array [
                  Object {
                    "TypeName": Object {
                      "location": 806,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  Object {
                    "TypeName": Object {
                      "location": 812,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                ],
                "objname": Array [
                  Object {
                    "String": Object {
                      "str": "^",
                    },
                  },
                ],
              },
            },
            "objtype": 25,
          },
        },
        "stmt_len": 75,
        "stmt_location": 782,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Unary minus",
            "object": Object {
              "ObjectWithArgs": Object {
                "objargs": Array [
                  null,
                  Object {
                    "TypeName": Object {
                      "location": 888,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                ],
                "objname": Array [
                  Object {
                    "String": Object {
                      "str": "-",
                    },
                  },
                ],
              },
            },
            "objtype": 25,
          },
        },
        "stmt_len": 55,
        "stmt_location": 858,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "4 byte integer operators for btrees",
            "object": Array [
              Object {
                "String": Object {
                  "str": "btree",
                },
              },
              Object {
                "String": Object {
                  "str": "int4ops",
                },
              },
            ],
            "objtype": 24,
          },
        },
        "stmt_len": 87,
        "stmt_location": 914,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "all integer operators for btrees",
            "object": Array [
              Object {
                "String": Object {
                  "str": "btree",
                },
              },
              Object {
                "String": Object {
                  "str": "integer_ops",
                },
              },
            ],
            "objtype": 26,
          },
        },
        "stmt_len": 89,
        "stmt_location": 1002,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Filter rows by users",
            "object": Array [
              Object {
                "String": Object {
                  "str": "mytable",
                },
              },
              Object {
                "String": Object {
                  "str": "my_policy",
                },
              },
            ],
            "objtype": 27,
          },
        },
        "stmt_len": 65,
        "stmt_location": 1092,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Administration group for finance tables",
            "object": Object {
              "String": Object {
                "str": "my_role",
              },
            },
            "objtype": 30,
          },
        },
        "stmt_len": 69,
        "stmt_location": 1158,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Logs updates of employee records",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_table",
                },
              },
              Object {
                "String": Object {
                  "str": "my_rule",
                },
              },
            ],
            "objtype": 31,
          },
        },
        "stmt_len": 74,
        "stmt_location": 1228,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Departmental data",
            "object": Object {
              "String": Object {
                "str": "my_schema",
              },
            },
            "objtype": 32,
          },
        },
        "stmt_len": 51,
        "stmt_location": 1303,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Used to generate primary keys",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_sequence",
                },
              },
            ],
            "objtype": 33,
          },
        },
        "stmt_len": 67,
        "stmt_location": 1355,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "my foreign server",
            "object": Object {
              "String": Object {
                "str": "myserver",
              },
            },
            "objtype": 17,
          },
        },
        "stmt_len": 50,
        "stmt_location": 1423,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Improves planner row estimations",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_statistics",
                },
              },
            ],
            "objtype": 35,
          },
        },
        "stmt_len": 74,
        "stmt_location": 1474,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Employee Information",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_schema",
                },
              },
              Object {
                "String": Object {
                  "str": "my_table",
                },
              },
            ],
            "objtype": 37,
          },
        },
        "stmt_len": 62,
        "stmt_location": 1549,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Tablespace for indexes",
            "object": Object {
              "String": Object {
                "str": "my_tablespace",
              },
            },
            "objtype": 38,
          },
        },
        "stmt_len": 64,
        "stmt_location": 1612,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Special word filtering",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_config",
                },
              },
            ],
            "objtype": 41,
          },
        },
        "stmt_len": 75,
        "stmt_location": 1677,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Snowball stemmer for Swedish language",
            "object": Array [
              Object {
                "String": Object {
                  "str": "swedish",
                },
              },
            ],
            "objtype": 42,
          },
        },
        "stmt_len": 85,
        "stmt_location": 1753,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Splits text into words",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_parser",
                },
              },
            ],
            "objtype": 43,
          },
        },
        "stmt_len": 68,
        "stmt_location": 1839,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Snowball stemmer",
            "object": Array [
              Object {
                "String": Object {
                  "str": "snowball",
                },
              },
            ],
            "objtype": 44,
          },
        },
        "stmt_len": 63,
        "stmt_location": 1908,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Transform between hstore and Python dict",
            "object": Array [
              Object {
                "TypeName": Object {
                  "location": 1998,
                  "names": Array [
                    Object {
                      "String": Object {
                        "str": "hstore",
                      },
                    },
                  ],
                  "typemod": -1,
                },
              },
              Object {
                "String": Object {
                  "str": "plpythonu",
                },
              },
            ],
            "objtype": 39,
          },
        },
        "stmt_len": 97,
        "stmt_location": 1972,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Used for RI",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_table",
                },
              },
              Object {
                "String": Object {
                  "str": "my_trigger",
                },
              },
            ],
            "objtype": 40,
          },
        },
        "stmt_len": 59,
        "stmt_location": 2070,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "Complex number data type",
            "object": Object {
              "TypeName": Object {
                "location": 2147,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "complex",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
            "objtype": 45,
          },
        },
        "stmt_len": 54,
        "stmt_location": 2130,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "comment": "View of departmental costs",
            "object": Array [
              Object {
                "String": Object {
                  "str": "my_view",
                },
              },
            ],
            "objtype": 47,
          },
        },
        "stmt_len": 56,
        "stmt_location": 2185,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CommentStmt": Object {
            "object": Array [
              Object {
                "String": Object {
                  "str": "mytable",
                },
              },
            ],
            "objtype": 37,
          },
        },
        "stmt_len": 35,
        "stmt_location": 2242,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink comments 2`] = `
"COMMENT ON CONSTRAINT memberships_membership_id_fkey ON roles_public . memberships IS E'@fieldName parent';
COMMENT ON DATABASE my_database IS E'Development Database';
COMMENT ON DOMAIN my_domain IS E'Email Address Domain';
COMMENT ON EXTENSION hstore IS E'implements the hstore data type';
COMMENT ON FOREIGN DATA WRAPPER mywrapper IS E'my foreign data wrapper';
COMMENT ON FOREIGN TABLE my_foreign_table IS E'Employee Information in other database';
COMMENT ON FUNCTION my_function ( timestamp ) IS E'Returns Roman Numeral';
COMMENT ON INDEX my_index IS E'Enforces uniqueness on employee ID';
COMMENT ON LANGUAGE plpython IS E'Python support for stored procedures';
COMMENT ON LARGE OBJECT 346344 IS E'Planning document';
COMMENT ON MATERIALIZED VIEW my_matview IS E'Summary of order history';
COMMENT ON OPERATOR ^ ( text,text ) IS E'Performs intersection of two texts';
COMMENT ON OPERATOR - ( NONE,int ) IS E'Unary minus';
COMMENT ON OPERATOR CLASS int4ops USING btree IS E'4 byte integer operators for btrees';
COMMENT ON OPERATOR FAMILY integer_ops USING btree IS E'all integer operators for btrees';
COMMENT ON POLICY my_policy ON mytable IS E'Filter rows by users';
COMMENT ON ROLE my_role IS E'Administration group for finance tables';
COMMENT ON RULE my_rule ON my_table IS E'Logs updates of employee records';
COMMENT ON SCHEMA my_schema IS E'Departmental data';
COMMENT ON SEQUENCE my_sequence IS E'Used to generate primary keys';
COMMENT ON SERVER myserver IS E'my foreign server';
COMMENT ON STATISTICS my_statistics IS E'Improves planner row estimations';
COMMENT ON TABLE my_schema.my_table IS E'Employee Information';
COMMENT ON TABLESPACE my_tablespace IS E'Tablespace for indexes';
COMMENT ON TEXT SEARCH CONFIGURATION my_config IS E'Special word filtering';
COMMENT ON TEXT SEARCH DICTIONARY swedish IS E'Snowball stemmer for Swedish language';
COMMENT ON TEXT SEARCH PARSER my_parser IS E'Splits text into words';
COMMENT ON TEXT SEARCH TEMPLATE snowball IS E'Snowball stemmer';
COMMENT ON TRANSFORM FOR hstore LANGUAGE plpythonu IS E'Transform between hstore and Python dict';
COMMENT ON TRIGGER my_trigger ON my_table IS E'Used for RI';
COMMENT ON TYPE complex IS E'Complex number data type';
COMMENT ON VIEW my_view IS E'View of departmental costs';
COMMENT ON TABLE mytable IS NULL;"
`;

exports[`kitchen sink conflicts 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "InsertStmt": Object {
            "cols": Array [
              Object {
                "ResTarget": Object {
                  "location": 22,
                  "name": "project_id",
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 34,
                  "name": "name",
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 40,
                  "name": "field_name",
                },
              },
            ],
            "onConflictClause": Object {
              "OnConflictClause": Object {
                "action": 2,
                "infer": Object {
                  "InferClause": Object {
                    "indexElems": Array [
                      Object {
                        "IndexElem": Object {
                          "name": "project_id",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                      Object {
                        "IndexElem": Object {
                          "name": "name",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                    ],
                    "location": 128,
                  },
                },
                "location": 116,
                "targetList": Array [
                  Object {
                    "ResTarget": Object {
                      "location": 171,
                      "name": "field_name",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "excluded",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "field_name",
                              },
                            },
                          ],
                          "location": 184,
                        },
                      },
                    },
                  },
                ],
              },
            },
            "override": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 12,
                "relname": "table",
                "relpersistence": "p",
                "schemaname": "yo",
              },
            },
            "selectStmt": Object {
              "SelectStmt": Object {
                "op": 0,
                "valuesLists": Array [
                  Array [
                    Object {
                      "ColumnRef": Object {
                        "fields": Array [
                          Object {
                            "String": Object {
                              "str": "v_obj_key_id",
                            },
                          },
                        ],
                        "location": 62,
                      },
                    },
                    Object {
                      "TypeCast": Object {
                        "arg": Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "v_secret_name",
                                },
                              },
                            ],
                            "location": 76,
                          },
                        },
                        "location": 89,
                        "typeName": Object {
                          "TypeName": Object {
                            "location": 91,
                            "names": Array [
                              Object {
                                "String": Object {
                                  "str": "bytea",
                                },
                              },
                            ],
                            "typemod": -1,
                          },
                        },
                      },
                    },
                    Object {
                      "ColumnRef": Object {
                        "fields": Array [
                          Object {
                            "String": Object {
                              "str": "v_secret_value",
                            },
                          },
                        ],
                        "location": 98,
                      },
                    },
                  ],
                ],
              },
            },
          },
        },
        "stmt_len": 203,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "InsertStmt": Object {
            "cols": Array [
              Object {
                "ResTarget": Object {
                  "location": 229,
                  "name": "project_id",
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 241,
                  "name": "name",
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 247,
                  "name": "field_name",
                },
              },
            ],
            "onConflictClause": Object {
              "OnConflictClause": Object {
                "action": 2,
                "infer": Object {
                  "InferClause": Object {
                    "indexElems": Array [
                      Object {
                        "IndexElem": Object {
                          "name": "project_id",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                      Object {
                        "IndexElem": Object {
                          "name": "name",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                    ],
                    "location": 335,
                  },
                },
                "location": 323,
                "targetList": Array [
                  Object {
                    "ResTarget": Object {
                      "location": 378,
                      "name": "field_name",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "excluded",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "field_name",
                              },
                            },
                          ],
                          "location": 391,
                        },
                      },
                    },
                  },
                ],
                "whereClause": Object {
                  "A_Expr": Object {
                    "kind": 0,
                    "lexpr": Object {
                      "ColumnRef": Object {
                        "fields": Array [
                          Object {
                            "String": Object {
                              "str": "prop",
                            },
                          },
                        ],
                        "location": 419,
                      },
                    },
                    "location": 424,
                    "name": Array [
                      Object {
                        "String": Object {
                          "str": "=",
                        },
                      },
                    ],
                    "rexpr": Object {
                      "A_Const": Object {
                        "location": 426,
                        "val": Object {
                          "Integer": Object {
                            "ival": 1,
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
            "override": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 219,
                "relname": "table",
                "relpersistence": "p",
                "schemaname": "yo",
              },
            },
            "selectStmt": Object {
              "SelectStmt": Object {
                "op": 0,
                "valuesLists": Array [
                  Array [
                    Object {
                      "ColumnRef": Object {
                        "fields": Array [
                          Object {
                            "String": Object {
                              "str": "v_obj_key_id",
                            },
                          },
                        ],
                        "location": 269,
                      },
                    },
                    Object {
                      "TypeCast": Object {
                        "arg": Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "v_secret_name",
                                },
                              },
                            ],
                            "location": 283,
                          },
                        },
                        "location": 296,
                        "typeName": Object {
                          "TypeName": Object {
                            "location": 298,
                            "names": Array [
                              Object {
                                "String": Object {
                                  "str": "bytea",
                                },
                              },
                            ],
                            "typemod": -1,
                          },
                        },
                      },
                    },
                    Object {
                      "ColumnRef": Object {
                        "fields": Array [
                          Object {
                            "String": Object {
                              "str": "v_secret_value",
                            },
                          },
                        ],
                        "location": 305,
                      },
                    },
                  ],
                ],
              },
            },
          },
        },
        "stmt_len": 223,
        "stmt_location": 204,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "InsertStmt": Object {
            "cols": Array [
              Object {
                "ResTarget": Object {
                  "location": 452,
                  "name": "project_id",
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 464,
                  "name": "name",
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 470,
                  "name": "field_name",
                },
              },
            ],
            "onConflictClause": Object {
              "OnConflictClause": Object {
                "action": 1,
                "infer": Object {
                  "InferClause": Object {
                    "indexElems": Array [
                      Object {
                        "IndexElem": Object {
                          "name": "project_id",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                      Object {
                        "IndexElem": Object {
                          "name": "name",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                    ],
                    "location": 558,
                  },
                },
                "location": 546,
              },
            },
            "override": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 442,
                "relname": "table",
                "relpersistence": "p",
                "schemaname": "yo",
              },
            },
            "selectStmt": Object {
              "SelectStmt": Object {
                "op": 0,
                "valuesLists": Array [
                  Array [
                    Object {
                      "ColumnRef": Object {
                        "fields": Array [
                          Object {
                            "String": Object {
                              "str": "v_obj_key_id",
                            },
                          },
                        ],
                        "location": 492,
                      },
                    },
                    Object {
                      "TypeCast": Object {
                        "arg": Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "v_secret_name",
                                },
                              },
                            ],
                            "location": 506,
                          },
                        },
                        "location": 519,
                        "typeName": Object {
                          "TypeName": Object {
                            "location": 521,
                            "names": Array [
                              Object {
                                "String": Object {
                                  "str": "bytea",
                                },
                              },
                            ],
                            "typemod": -1,
                          },
                        },
                      },
                    },
                    Object {
                      "ColumnRef": Object {
                        "fields": Array [
                          Object {
                            "String": Object {
                              "str": "v_secret_value",
                            },
                          },
                        ],
                        "location": 528,
                      },
                    },
                  ],
                ],
              },
            },
          },
        },
        "stmt_len": 161,
        "stmt_location": 428,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "InsertStmt": Object {
            "cols": Array [
              Object {
                "ResTarget": Object {
                  "location": 615,
                  "name": "name",
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 621,
                  "name": "email",
                },
              },
            ],
            "onConflictClause": Object {
              "OnConflictClause": Object {
                "action": 1,
                "infer": Object {
                  "InferClause": Object {
                    "conname": "customers_name_key",
                    "location": 696,
                  },
                },
                "location": 683,
              },
            },
            "override": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 604,
                "relname": "customers",
                "relpersistence": "p",
              },
            },
            "selectStmt": Object {
              "SelectStmt": Object {
                "op": 0,
                "valuesLists": Array [
                  Array [
                    Object {
                      "A_Const": Object {
                        "location": 640,
                        "val": Object {
                          "String": Object {
                            "str": "Microsoft",
                          },
                        },
                      },
                    },
                    Object {
                      "A_Const": Object {
                        "location": 655,
                        "val": Object {
                          "String": Object {
                            "str": "hotline@microsoft.com",
                          },
                        },
                      },
                    },
                  ],
                ],
              },
            },
          },
        },
        "stmt_len": 150,
        "stmt_location": 590,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "InsertStmt": Object {
            "cols": Array [
              Object {
                "ResTarget": Object {
                  "location": 767,
                  "name": "name",
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 773,
                  "name": "email",
                },
              },
            ],
            "onConflictClause": Object {
              "OnConflictClause": Object {
                "action": 2,
                "infer": Object {
                  "InferClause": Object {
                    "indexElems": Array [
                      Object {
                        "IndexElem": Object {
                          "name": "name",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                    ],
                    "location": 847,
                  },
                },
                "location": 835,
                "targetList": Array [
                  Object {
                    "ResTarget": Object {
                      "location": 874,
                      "name": "email",
                      "val": Object {
                        "A_Expr": Object {
                          "kind": 0,
                          "lexpr": Object {
                            "A_Expr": Object {
                              "kind": 0,
                              "lexpr": Object {
                                "ColumnRef": Object {
                                  "fields": Array [
                                    Object {
                                      "String": Object {
                                        "str": "excluded",
                                      },
                                    },
                                    Object {
                                      "String": Object {
                                        "str": "email",
                                      },
                                    },
                                  ],
                                  "location": 882,
                                },
                              },
                              "location": 897,
                              "name": Array [
                                Object {
                                  "String": Object {
                                    "str": "||",
                                  },
                                },
                              ],
                              "rexpr": Object {
                                "A_Const": Object {
                                  "location": 900,
                                  "val": Object {
                                    "String": Object {
                                      "str": ";",
                                    },
                                  },
                                },
                              },
                            },
                          },
                          "location": 904,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": "||",
                              },
                            },
                          ],
                          "rexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "customers",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "email",
                                  },
                                },
                              ],
                              "location": 907,
                            },
                          },
                        },
                      },
                    },
                  },
                ],
              },
            },
            "override": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 756,
                "relname": "customers",
                "relpersistence": "p",
              },
            },
            "selectStmt": Object {
              "SelectStmt": Object {
                "op": 0,
                "valuesLists": Array [
                  Array [
                    Object {
                      "A_Const": Object {
                        "location": 792,
                        "val": Object {
                          "String": Object {
                            "str": "Microsoft",
                          },
                        },
                      },
                    },
                    Object {
                      "A_Const": Object {
                        "location": 807,
                        "val": Object {
                          "String": Object {
                            "str": "hotline@microsoft.com",
                          },
                        },
                      },
                    },
                  ],
                ],
              },
            },
          },
        },
        "stmt_len": 181,
        "stmt_location": 741,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink conflicts 2`] = `
"INSERT INTO yo.\\"table\\" ( project_id, name, field_name ) VALUES (v_obj_key_id, v_secret_name::bytea, v_secret_value) ON CONFLICT ( project_id, name ) DO UPDATE  SET field_name = excluded.field_name;
INSERT INTO yo.\\"table\\" ( project_id, name, field_name ) VALUES (v_obj_key_id, v_secret_name::bytea, v_secret_value) ON CONFLICT ( project_id, name ) DO UPDATE  SET field_name = excluded.field_name WHERE ((prop) = (1));
INSERT INTO yo.\\"table\\" ( project_id, name, field_name ) VALUES (v_obj_key_id, v_secret_name::bytea, v_secret_value) ON CONFLICT ( project_id, name ) DO NOTHING;
INSERT INTO customers ( name, email ) VALUES ('Microsoft', 'hotline@microsoft.com') ON CONFLICT ON CONSTRAINT customers_name_key DO NOTHING;
INSERT INTO customers ( name, email ) VALUES ('Microsoft', 'hotline@microsoft.com') ON CONFLICT ( name ) DO UPDATE  SET email = ((((excluded.email) || (';'))) || (customers.email));"
`;

exports[`kitchen sink default privs 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterDefaultPrivilegesStmt": Object {
            "action": Object {
              "GrantStmt": Object {
                "behavior": 0,
                "grantees": Array [
                  Object {
                    "RoleSpec": Object {
                      "location": 88,
                      "rolename": "authenticated",
                      "roletype": 0,
                    },
                  },
                ],
                "is_grant": true,
                "objtype": 7,
                "privileges": Array [
                  Object {
                    "AccessPriv": Object {
                      "priv_name": "execute",
                    },
                  },
                ],
                "targtype": 2,
              },
            },
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "objects_public",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "schemas",
                  "location": 25,
                },
              },
            ],
          },
        },
        "stmt_len": 101,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterDefaultPrivilegesStmt": Object {
            "action": Object {
              "GrantStmt": Object {
                "behavior": 0,
                "grantees": Array [
                  Object {
                    "RoleSpec": Object {
                      "location": 166,
                      "roletype": 3,
                    },
                  },
                ],
                "objtype": 7,
                "privileges": Array [
                  Object {
                    "AccessPriv": Object {
                      "priv_name": "execute",
                    },
                  },
                ],
                "targtype": 2,
              },
            },
          },
        },
        "stmt_len": 70,
        "stmt_location": 102,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterDefaultPrivilegesStmt": Object {
            "action": Object {
              "GrantStmt": Object {
                "behavior": 0,
                "grantees": Array [
                  Object {
                    "RoleSpec": Object {
                      "location": 246,
                      "roletype": 3,
                    },
                  },
                ],
                "is_grant": true,
                "objtype": 1,
                "privileges": Array [
                  Object {
                    "AccessPriv": Object {
                      "priv_name": "select",
                    },
                  },
                ],
                "targtype": 2,
              },
            },
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "myschema",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "schemas",
                  "location": 201,
                },
              },
            ],
          },
        },
        "stmt_len": 79,
        "stmt_location": 173,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterDefaultPrivilegesStmt": Object {
            "action": Object {
              "GrantStmt": Object {
                "behavior": 0,
                "grantees": Array [
                  Object {
                    "RoleSpec": Object {
                      "location": 325,
                      "rolename": "webuser",
                      "roletype": 0,
                    },
                  },
                ],
                "is_grant": true,
                "objtype": 1,
                "privileges": Array [
                  Object {
                    "AccessPriv": Object {
                      "priv_name": "insert",
                    },
                  },
                ],
                "targtype": 2,
              },
            },
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "myschema",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "schemas",
                  "location": 280,
                },
              },
            ],
          },
        },
        "stmt_len": 79,
        "stmt_location": 253,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterDefaultPrivilegesStmt": Object {
            "action": Object {
              "GrantStmt": Object {
                "behavior": 0,
                "grantees": Array [
                  Object {
                    "RoleSpec": Object {
                      "location": 409,
                      "roletype": 3,
                    },
                  },
                ],
                "objtype": 1,
                "privileges": Array [
                  Object {
                    "AccessPriv": Object {
                      "priv_name": "select",
                    },
                  },
                ],
                "targtype": 2,
              },
            },
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "myschema",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "schemas",
                  "location": 361,
                },
              },
            ],
          },
        },
        "stmt_len": 82,
        "stmt_location": 333,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterDefaultPrivilegesStmt": Object {
            "action": Object {
              "GrantStmt": Object {
                "behavior": 0,
                "grantees": Array [
                  Object {
                    "RoleSpec": Object {
                      "location": 490,
                      "rolename": "webuser",
                      "roletype": 0,
                    },
                  },
                ],
                "objtype": 1,
                "privileges": Array [
                  Object {
                    "AccessPriv": Object {
                      "priv_name": "insert",
                    },
                  },
                ],
                "targtype": 2,
              },
            },
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "myschema",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "schemas",
                  "location": 442,
                },
              },
            ],
          },
        },
        "stmt_len": 81,
        "stmt_location": 416,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterDefaultPrivilegesStmt": Object {
            "action": Object {
              "GrantStmt": Object {
                "behavior": 0,
                "grantees": Array [
                  Object {
                    "RoleSpec": Object {
                      "location": 573,
                      "roletype": 3,
                    },
                  },
                ],
                "objtype": 7,
                "privileges": Array [
                  Object {
                    "AccessPriv": Object {
                      "priv_name": "execute",
                    },
                  },
                ],
                "targtype": 2,
              },
            },
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "RoleSpec": Object {
                        "location": 534,
                        "rolename": "admin",
                        "roletype": 0,
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "roles",
                  "location": 525,
                },
              },
            ],
          },
        },
        "stmt_len": 81,
        "stmt_location": 498,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink default privs 2`] = `
"ALTER DEFAULT PRIVILEGES IN SCHEMA objects_public
GRANT EXECUTE ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS  FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
GRANT SELECT ON TABLES  TO PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
GRANT INSERT ON TABLES  TO webuser;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
REVOKE SELECT ON TABLES  FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema
REVOKE INSERT ON TABLES  FROM webuser;
ALTER DEFAULT PRIVILEGES FOR ROLE admin
REVOKE EXECUTE ON FUNCTIONS  FROM PUBLIC;"
`;

exports[`kitchen sink delete 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DeleteStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 12,
                "relname": "shoelace_data",
                "relpersistence": "p",
              },
            },
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "sl_name",
                        },
                      },
                    ],
                    "location": 37,
                  },
                },
                "location": 45,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "old",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "sl_name",
                        },
                      },
                    ],
                    "location": 47,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 58,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DeleteStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "alias": Object {
                  "Alias": Object {
                    "aliasname": "dt",
                  },
                },
                "inh": true,
                "location": 73,
                "relname": "delete_test",
                "relpersistence": "p",
              },
            },
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "dt",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "a",
                        },
                      },
                    ],
                    "location": 97,
                  },
                },
                "location": 102,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": ">",
                    },
                  },
                ],
                "rexpr": Object {
                  "A_Const": Object {
                    "location": 104,
                    "val": Object {
                      "Integer": Object {
                        "ival": 75,
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 47,
        "stmt_location": 59,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DeleteStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "alias": Object {
                  "Alias": Object {
                    "aliasname": "dt",
                  },
                },
                "inh": true,
                "location": 121,
                "relname": "delete_test",
                "relpersistence": "p",
              },
            },
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "delete_test",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "a",
                        },
                      },
                    ],
                    "location": 142,
                  },
                },
                "location": 156,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": ">",
                    },
                  },
                ],
                "rexpr": Object {
                  "A_Const": Object {
                    "location": 158,
                    "val": Object {
                      "Integer": Object {
                        "ival": 25,
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 53,
        "stmt_location": 107,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DeleteStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 175,
                "relname": "delete_test",
                "relpersistence": "p",
              },
            },
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "a",
                        },
                      },
                    ],
                    "location": 193,
                  },
                },
                "location": 195,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": ">",
                    },
                  },
                ],
                "rexpr": Object {
                  "A_Const": Object {
                    "location": 197,
                    "val": Object {
                      "Integer": Object {
                        "ival": 25,
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 38,
        "stmt_location": 161,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink delete 2`] = `
"DELETE FROM shoelace_data WHERE ((sl_name) = (old.sl_name));
DELETE FROM delete_test AS dt WHERE ((dt.a) > (75));
DELETE FROM delete_test AS dt WHERE ((delete_test.a) > (25));
DELETE FROM delete_test WHERE ((a) > (25));"
`;

exports[`kitchen sink do stmt 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DoStmt": Object {
            "args": Array [
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "
BEGIN
    IF NOT EXISTS (
            SELECT
                1
            FROM
                pg_roles
            WHERE
                rolname = 'administrator') THEN
            CREATE ROLE administrator;
            COMMENT ON ROLE administrator IS 'Administration group';
    END IF;
END ",
                    },
                  },
                  "defaction": 0,
                  "defname": "as",
                  "location": 3,
                },
              },
            ],
          },
        },
        "stmt_len": 303,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink do stmt 2`] = `
"DO $$
BEGIN
IF NOT EXISTS (
SELECT
1
FROM
pg_roles
WHERE
rolname = 'administrator') THEN
CREATE ROLE administrator;
COMMENT ON ROLE administrator IS 'Administration group';
END IF;
END $$;"
`;

exports[`kitchen sink domain 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateDomainStmt": Object {
            "domainname": Array [
              Object {
                "String": Object {
                  "str": "v8",
                },
              },
              Object {
                "String": Object {
                  "str": "json",
                },
              },
            ],
            "typeName": Object {
              "TypeName": Object {
                "location": 25,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "json",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 29,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateDomainStmt": Object {
            "constraints": Array [
              Object {
                "Constraint": Object {
                  "contype": 4,
                  "initially_valid": true,
                  "location": 64,
                  "raw_expr": Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "value",
                              },
                            },
                          ],
                          "location": 72,
                        },
                      },
                      "location": 78,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "~",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 80,
                          "val": Object {
                            "String": Object {
                              "str": "^[a-zA-Z0-9.!#$%&'*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            ],
            "domainname": Array [
              Object {
                "String": Object {
                  "str": "email",
                },
              },
            ],
            "typeName": Object {
              "TypeName": Object {
                "location": 55,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "citext",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 187,
        "stmt_location": 30,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink domain 2`] = `
"CREATE DOMAIN v8.json AS json;
CREATE DOMAIN email AS citext CHECK ( ((value) ~ ('^[a-zA-Z0-9.!#$%&''*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$')) );"
`;

exports[`kitchen sink domains 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateDomainStmt": Object {
            "domainname": Array [
              Object {
                "String": Object {
                  "str": "v8",
                },
              },
              Object {
                "String": Object {
                  "str": "json",
                },
              },
            ],
            "typeName": Object {
              "TypeName": Object {
                "location": 25,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "json",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 29,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateDomainStmt": Object {
            "constraints": Array [
              Object {
                "Constraint": Object {
                  "contype": 4,
                  "initially_valid": true,
                  "location": 64,
                  "raw_expr": Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "value",
                              },
                            },
                          ],
                          "location": 72,
                        },
                      },
                      "location": 78,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "~",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 80,
                          "val": Object {
                            "String": Object {
                              "str": "^[a-zA-Z0-9.!#$%&'*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            ],
            "domainname": Array [
              Object {
                "String": Object {
                  "str": "email",
                },
              },
            ],
            "typeName": Object {
              "TypeName": Object {
                "location": 55,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "citext",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 187,
        "stmt_location": 30,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink domains 2`] = `
"CREATE DOMAIN v8.json AS json;
CREATE DOMAIN email AS citext CHECK ( ((value) ~ ('^[a-zA-Z0-9.!#$%&''*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$')) );"
`;

exports[`kitchen sink enums 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateEnumStmt": Object {
            "typeName": Array [
              Object {
                "String": Object {
                  "str": "myschema",
                },
              },
              Object {
                "String": Object {
                  "str": "special_type",
                },
              },
            ],
            "vals": Array [
              Object {
                "String": Object {
                  "str": "oh",
                },
              },
              Object {
                "String": Object {
                  "str": "yea",
                },
              },
            ],
          },
        },
        "stmt_len": 61,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink enums 2`] = `
"CREATE TYPE myschema.special_type AS ENUM (
'oh',
'yea'
);"
`;

exports[`kitchen sink fixtures complex.sql 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "alias": Object {
                    "Alias": Object {
                      "aliasname": "f1",
                    },
                  },
                  "inh": true,
                  "location": 77,
                  "relname": "player",
                  "relpersistence": "p",
                },
              },
              Object {
                "RangeVar": Object {
                  "alias": Object {
                    "Alias": Object {
                      "aliasname": "f2",
                    },
                  },
                  "inh": true,
                  "location": 90,
                  "relname": "player",
                  "relpersistence": "p",
                },
              },
              Object {
                "JoinExpr": Object {
                  "jointype": 2,
                  "larg": Object {
                    "RangeVar": Object {
                      "alias": Object {
                        "Alias": Object {
                          "aliasname": "p1",
                        },
                      },
                      "inh": true,
                      "location": 103,
                      "relname": "plays",
                      "relpersistence": "p",
                    },
                  },
                  "quals": Object {
                    "BoolExpr": Object {
                      "args": Array [
                        Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "p1",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "playerid",
                                    },
                                  },
                                ],
                                "location": 140,
                              },
                            },
                            "location": 152,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": "<",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "p2",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "playerid",
                                    },
                                  },
                                ],
                                "location": 154,
                              },
                            },
                          },
                        },
                        Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "p1",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "teamid",
                                    },
                                  },
                                ],
                                "location": 170,
                              },
                            },
                            "location": 180,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": "=",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "p2",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "teamid",
                                    },
                                  },
                                ],
                                "location": 182,
                              },
                            },
                          },
                        },
                      ],
                      "boolop": 0,
                      "location": 166,
                    },
                  },
                  "rarg": Object {
                    "RangeVar": Object {
                      "alias": Object {
                        "Alias": Object {
                          "aliasname": "p2",
                        },
                      },
                      "inh": true,
                      "location": 128,
                      "relname": "plays",
                      "relpersistence": "p",
                    },
                  },
                },
              },
            ],
            "groupClause": Array [
              Object {
                "ColumnRef": Object {
                  "fields": Array [
                    Object {
                      "String": Object {
                        "str": "p1",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "playerid",
                      },
                    },
                  ],
                  "location": 203,
                },
              },
              Object {
                "ColumnRef": Object {
                  "fields": Array [
                    Object {
                      "String": Object {
                        "str": "f1",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "playerid",
                      },
                    },
                  ],
                  "location": 218,
                },
              },
              Object {
                "ColumnRef": Object {
                  "fields": Array [
                    Object {
                      "String": Object {
                        "str": "p2",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "playerid",
                      },
                    },
                  ],
                  "location": 233,
                },
              },
              Object {
                "ColumnRef": Object {
                  "fields": Array [
                    Object {
                      "String": Object {
                        "str": "f2",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "playerid",
                      },
                    },
                  ],
                  "location": 248,
                },
              },
            ],
            "havingClause": Object {
              "BoolExpr": Object {
                "args": Array [
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "p1",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "playerid",
                                    },
                                  },
                                ],
                                "location": 275,
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "count",
                              },
                            },
                          ],
                          "location": 269,
                        },
                      },
                      "location": 288,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "FuncCall": Object {
                          "agg_star": true,
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "count",
                              },
                            },
                          ],
                          "location": 290,
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "p2",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "playerid",
                                    },
                                  },
                                ],
                                "location": 309,
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "count",
                              },
                            },
                          ],
                          "location": 303,
                        },
                      },
                      "location": 322,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "FuncCall": Object {
                          "agg_star": true,
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "count",
                              },
                            },
                          ],
                          "location": 324,
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "p1",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "playerid",
                              },
                            },
                          ],
                          "location": 337,
                        },
                      },
                      "location": 349,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "f1",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "playerid",
                              },
                            },
                          ],
                          "location": 351,
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "p2",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "playerid",
                              },
                            },
                          ],
                          "location": 367,
                        },
                      },
                      "location": 379,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "f2",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "playerid",
                              },
                            },
                          ],
                          "location": 381,
                        },
                      },
                    },
                  },
                ],
                "boolop": 0,
                "location": 299,
              },
            },
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 9,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "p1",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "playerid",
                          },
                        },
                      ],
                      "location": 9,
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 24,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "f1",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "playername",
                          },
                        },
                      ],
                      "location": 24,
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 41,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "p2",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "playerid",
                          },
                        },
                      ],
                      "location": 41,
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 56,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "f2",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "playername",
                          },
                        },
                      ],
                      "location": 56,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 392,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink fixtures complex.sql 2`] = `
"SELECT p1.playerid,
f1.playername,
p2.playerid,
f2.playername FROM player AS f1,
player AS f2,
plays AS p1 FULL OUTER JOIN plays AS p2 ON (((p1.playerid) < (p2.playerid)) AND ((p1.teamid) = (p2.teamid))) GROUP BY p1.playerid,
f1.playerid,
p2.playerid,
f2.playerid HAVING (((count(p1.playerid)) = (count(*))) AND ((count(p2.playerid)) = (count(*))) AND ((p1.playerid) = (f1.playerid)) AND ((p2.playerid) = (f2.playerid)));"
`;

exports[`kitchen sink fixtures custom.sql 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 14,
                  "relname": "tab",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "sortClause": Array [
              Object {
                "SortBy": Object {
                  "location": 37,
                  "node": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "col",
                          },
                        },
                      ],
                      "location": 27,
                    },
                  },
                  "sortby_dir": 3,
                  "sortby_nulls": 0,
                  "useOp": Array [
                    Object {
                      "String": Object {
                        "str": "<",
                      },
                    },
                  ],
                },
              },
            ],
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 7,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 38,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 55,
                  "relname": "tab",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "sortClause": Array [
              Object {
                "SortBy": Object {
                  "location": 78,
                  "node": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "col",
                          },
                        },
                      ],
                      "location": 68,
                    },
                  },
                  "sortby_dir": 3,
                  "sortby_nulls": 0,
                  "useOp": Array [
                    Object {
                      "String": Object {
                        "str": ">",
                      },
                    },
                  ],
                },
              },
            ],
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 48,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 48,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 40,
        "stmt_location": 39,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 96,
                  "relname": "tab",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "sortClause": Array [
              Object {
                "SortBy": Object {
                  "location": 119,
                  "node": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "col",
                          },
                        },
                      ],
                      "location": 109,
                    },
                  },
                  "sortby_dir": 3,
                  "sortby_nulls": 0,
                  "useOp": Array [
                    Object {
                      "String": Object {
                        "str": "=",
                      },
                    },
                  ],
                },
              },
            ],
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 89,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 89,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 40,
        "stmt_location": 80,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 137,
                  "relname": "tab",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "sortClause": Array [
              Object {
                "SortBy": Object {
                  "location": 160,
                  "node": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "col",
                          },
                        },
                      ],
                      "location": 150,
                    },
                  },
                  "sortby_dir": 3,
                  "sortby_nulls": 1,
                  "useOp": Array [
                    Object {
                      "String": Object {
                        "str": "=",
                      },
                    },
                  ],
                },
              },
              Object {
                "SortBy": Object {
                  "location": 186,
                  "node": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "col2",
                          },
                        },
                      ],
                      "location": 175,
                    },
                  },
                  "sortby_dir": 3,
                  "sortby_nulls": 2,
                  "useOp": Array [
                    Object {
                      "String": Object {
                        "str": "<",
                      },
                    },
                  ],
                },
              },
            ],
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 130,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 130,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 77,
        "stmt_location": 121,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 208,
                  "val": Object {
                    "FuncCall": Object {
                      "args": Array [
                        Object {
                          "NamedArgExpr": Object {
                            "arg": Object {
                              "A_ArrayExpr": Object {
                                "elements": Array [
                                  Object {
                                    "A_Const": Object {
                                      "location": 237,
                                      "val": Object {
                                        "Integer": Object {
                                          "ival": 10,
                                        },
                                      },
                                    },
                                  },
                                  Object {
                                    "A_Const": Object {
                                      "location": 241,
                                      "val": Object {
                                        "Integer": Object {
                                          "ival": -1,
                                        },
                                      },
                                    },
                                  },
                                  Object {
                                    "A_Const": Object {
                                      "location": 245,
                                      "val": Object {
                                        "Integer": Object {
                                          "ival": 5,
                                        },
                                      },
                                    },
                                  },
                                  Object {
                                    "A_Const": Object {
                                      "location": 248,
                                      "val": Object {
                                        "Float": Object {
                                          "str": "4.4",
                                        },
                                      },
                                    },
                                  },
                                ],
                                "location": 231,
                              },
                            },
                            "argnumber": -1,
                            "location": 224,
                            "name": "arr",
                          },
                        },
                      ],
                      "func_variadic": true,
                      "funcname": Array [
                        Object {
                          "String": Object {
                            "str": "mleast",
                          },
                        },
                      ],
                      "location": 208,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 54,
        "stmt_location": 199,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 263,
                  "val": Object {
                    "FuncCall": Object {
                      "args": Array [
                        Object {
                          "A_Const": Object {
                            "location": 270,
                            "val": Object {
                              "String": Object {
                                "str": "'123\\\\000\\\\001",
                              },
                            },
                          },
                        },
                        Object {
                          "A_Const": Object {
                            "location": 290,
                            "val": Object {
                              "String": Object {
                                "str": "base64",
                              },
                            },
                          },
                        },
                      ],
                      "funcname": Array [
                        Object {
                          "String": Object {
                            "str": "encode",
                          },
                        },
                      ],
                      "location": 263,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 45,
        "stmt_location": 254,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 309,
                  "val": Object {
                    "A_Const": Object {
                      "location": 309,
                      "val": Object {
                        "String": Object {
                          "str": "слон",
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 33,
        "stmt_location": 300,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 343,
                  "val": Object {
                    "A_Const": Object {
                      "location": 343,
                      "val": Object {
                        "String": Object {
                          "str": "data",
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 28,
        "stmt_location": 334,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 372,
                  "val": Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "A_Const": Object {
                          "location": 372,
                          "val": Object {
                            "Integer": Object {
                              "ival": 3,
                            },
                          },
                        },
                      },
                      "location": 374,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "+",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 397,
                          "val": Object {
                            "Integer": Object {
                              "ival": 4,
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 35,
        "stmt_location": 363,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeFunction": Object {
                  "coldeflist": Array [
                    Object {
                      "ColumnDef": Object {
                        "colname": "fooid",
                        "is_local": true,
                        "location": 541,
                        "typeName": Object {
                          "TypeName": Object {
                            "location": 547,
                            "names": Array [
                              Object {
                                "String": Object {
                                  "str": "pg_catalog",
                                },
                              },
                              Object {
                                "String": Object {
                                  "str": "int4",
                                },
                              },
                            ],
                            "typemod": -1,
                          },
                        },
                      },
                    },
                    Object {
                      "ColumnDef": Object {
                        "colname": "foosubid",
                        "is_local": true,
                        "location": 552,
                        "typeName": Object {
                          "TypeName": Object {
                            "location": 561,
                            "names": Array [
                              Object {
                                "String": Object {
                                  "str": "pg_catalog",
                                },
                              },
                              Object {
                                "String": Object {
                                  "str": "int4",
                                },
                              },
                            ],
                            "typemod": -1,
                          },
                        },
                      },
                    },
                    Object {
                      "ColumnDef": Object {
                        "colname": "fooname",
                        "is_local": true,
                        "location": 566,
                        "typeName": Object {
                          "TypeName": Object {
                            "location": 574,
                            "names": Array [
                              Object {
                                "String": Object {
                                  "str": "text",
                                },
                              },
                            ],
                            "typemod": -1,
                          },
                        },
                      },
                    },
                  ],
                  "functions": Array [
                    Array [
                      Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 434,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "getfoo6",
                              },
                            },
                          ],
                          "location": 426,
                        },
                      },
                      Array [
                        Object {
                          "ColumnDef": Object {
                            "colname": "fooid",
                            "is_local": true,
                            "location": 441,
                            "typeName": Object {
                              "TypeName": Object {
                                "location": 447,
                                "names": Array [
                                  Object {
                                    "String": Object {
                                      "str": "pg_catalog",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "int4",
                                    },
                                  },
                                ],
                                "typemod": -1,
                              },
                            },
                          },
                        },
                        Object {
                          "ColumnDef": Object {
                            "colname": "foosubid",
                            "is_local": true,
                            "location": 452,
                            "typeName": Object {
                              "TypeName": Object {
                                "location": 461,
                                "names": Array [
                                  Object {
                                    "String": Object {
                                      "str": "pg_catalog",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "int4",
                                    },
                                  },
                                ],
                                "typemod": -1,
                              },
                            },
                          },
                        },
                        Object {
                          "ColumnDef": Object {
                            "colname": "fooname",
                            "is_local": true,
                            "location": 466,
                            "typeName": Object {
                              "TypeName": Object {
                                "location": 474,
                                "names": Array [
                                  Object {
                                    "String": Object {
                                      "str": "text",
                                    },
                                  },
                                ],
                                "typemod": -1,
                              },
                            },
                          },
                        },
                      ],
                    ],
                    Array [
                      Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 489,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "getfoo7",
                              },
                            },
                          ],
                          "location": 481,
                        },
                      },
                      Array [
                        Object {
                          "ColumnDef": Object {
                            "colname": "fooid",
                            "is_local": true,
                            "location": 496,
                            "typeName": Object {
                              "TypeName": Object {
                                "location": 502,
                                "names": Array [
                                  Object {
                                    "String": Object {
                                      "str": "pg_catalog",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "int4",
                                    },
                                  },
                                ],
                                "typemod": -1,
                              },
                            },
                          },
                        },
                        Object {
                          "ColumnDef": Object {
                            "colname": "foosubid",
                            "is_local": true,
                            "location": 507,
                            "typeName": Object {
                              "TypeName": Object {
                                "location": 516,
                                "names": Array [
                                  Object {
                                    "String": Object {
                                      "str": "pg_catalog",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "int4",
                                    },
                                  },
                                ],
                                "typemod": -1,
                              },
                            },
                          },
                        },
                        Object {
                          "ColumnDef": Object {
                            "colname": "fooname",
                            "is_local": true,
                            "location": 521,
                            "typeName": Object {
                              "TypeName": Object {
                                "location": 529,
                                "names": Array [
                                  Object {
                                    "String": Object {
                                      "str": "text",
                                    },
                                  },
                                ],
                                "typemod": -1,
                              },
                            },
                          },
                        },
                      ],
                    ],
                  ],
                  "is_rowsfrom": true,
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 408,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 408,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 180,
        "stmt_location": 399,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 596,
                  "relname": "b",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 589,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "a",
                          },
                        },
                      ],
                      "location": 589,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "a",
                        },
                      },
                    ],
                    "location": 604,
                  },
                },
                "location": 606,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "<",
                    },
                  },
                ],
                "rexpr": Object {
                  "SubLink": Object {
                    "location": 608,
                    "subLinkType": 4,
                    "subselect": Object {
                      "SelectStmt": Object {
                        "op": 0,
                        "targetList": Array [
                          Object {
                            "ResTarget": Object {
                              "location": 616,
                              "val": Object {
                                "A_Const": Object {
                                  "location": 616,
                                  "val": Object {
                                    "Integer": Object {
                                      "ival": 1,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 38,
        "stmt_location": 580,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 635,
                  "relname": "b",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 628,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "a",
                          },
                        },
                      ],
                      "location": 628,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "SubLink": Object {
                "location": 645,
                "operName": Array [
                  Object {
                    "String": Object {
                      "str": "<",
                    },
                  },
                ],
                "subLinkType": 1,
                "subselect": Object {
                  "SelectStmt": Object {
                    "op": 0,
                    "targetList": Array [
                      Object {
                        "ResTarget": Object {
                          "location": 659,
                          "val": Object {
                            "A_Const": Object {
                              "location": 659,
                              "val": Object {
                                "Integer": Object {
                                  "ival": 1,
                                },
                              },
                            },
                          },
                        },
                      },
                    ],
                  },
                },
                "testexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "a",
                        },
                      },
                    ],
                    "location": 643,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 42,
        "stmt_location": 619,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 678,
                  "relname": "b",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 671,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "a",
                          },
                        },
                      ],
                      "location": 671,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "SubLink": Object {
                "location": 688,
                "operName": Array [
                  Object {
                    "String": Object {
                      "str": "<",
                    },
                  },
                ],
                "subLinkType": 2,
                "subselect": Object {
                  "SelectStmt": Object {
                    "op": 0,
                    "targetList": Array [
                      Object {
                        "ResTarget": Object {
                          "location": 702,
                          "val": Object {
                            "A_Const": Object {
                              "location": 702,
                              "val": Object {
                                "Integer": Object {
                                  "ival": 1,
                                },
                              },
                            },
                          },
                        },
                      },
                    ],
                  },
                },
                "testexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "a",
                        },
                      },
                    ],
                    "location": 686,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 42,
        "stmt_location": 662,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 721,
                  "relname": "b",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 714,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "a",
                          },
                        },
                      ],
                      "location": 714,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "SubLink": Object {
                "location": 729,
                "subLinkType": 0,
                "subselect": Object {
                  "SelectStmt": Object {
                    "op": 0,
                    "targetList": Array [
                      Object {
                        "ResTarget": Object {
                          "location": 744,
                          "val": Object {
                            "A_Const": Object {
                              "location": 744,
                              "val": Object {
                                "Integer": Object {
                                  "ival": 1,
                                },
                              },
                            },
                          },
                        },
                      },
                    ],
                  },
                },
              },
            },
          },
        },
        "stmt_len": 41,
        "stmt_location": 705,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 763,
                  "relname": "b",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 756,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "a",
                          },
                        },
                      ],
                      "location": 756,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "a",
                        },
                      },
                    ],
                    "location": 771,
                  },
                },
                "location": 773,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "<",
                    },
                  },
                ],
                "rexpr": Object {
                  "SubLink": Object {
                    "location": 775,
                    "subLinkType": 6,
                    "subselect": Object {
                      "SelectStmt": Object {
                        "distinctClause": Array [
                          null,
                        ],
                        "op": 0,
                        "targetList": Array [
                          Object {
                            "ResTarget": Object {
                              "location": 798,
                              "val": Object {
                                "SubLink": Object {
                                  "location": 798,
                                  "subLinkType": 4,
                                  "subselect": Object {
                                    "SelectStmt": Object {
                                      "op": 0,
                                      "targetList": Array [
                                        Object {
                                          "ResTarget": Object {
                                            "location": 806,
                                            "val": Object {
                                              "A_Const": Object {
                                                "location": 806,
                                                "val": Object {
                                                  "Integer": Object {
                                                    "ival": 1,
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      ],
                                    },
                                  },
                                },
                              },
                            },
                          },
                          Object {
                            "ResTarget": Object {
                              "location": 810,
                              "val": Object {
                                "SubLink": Object {
                                  "location": 810,
                                  "subLinkType": 4,
                                  "subselect": Object {
                                    "SelectStmt": Object {
                                      "distinctClause": Array [
                                        null,
                                      ],
                                      "groupClause": Array [
                                        Object {
                                          "A_Const": Object {
                                            "location": 838,
                                            "val": Object {
                                              "Integer": Object {
                                                "ival": 7,
                                              },
                                            },
                                          },
                                        },
                                      ],
                                      "havingClause": Object {
                                        "A_Expr": Object {
                                          "kind": 0,
                                          "lexpr": Object {
                                            "A_Const": Object {
                                              "location": 847,
                                              "val": Object {
                                                "Integer": Object {
                                                  "ival": 1,
                                                },
                                              },
                                            },
                                          },
                                          "location": 849,
                                          "name": Array [
                                            Object {
                                              "String": Object {
                                                "str": "<",
                                              },
                                            },
                                          ],
                                          "rexpr": Object {
                                            "SubLink": Object {
                                              "location": 851,
                                              "subLinkType": 4,
                                              "subselect": Object {
                                                "SelectStmt": Object {
                                                  "op": 0,
                                                  "targetList": Array [
                                                    Object {
                                                      "ResTarget": Object {
                                                        "location": 859,
                                                        "val": Object {
                                                          "A_Const": Object {
                                                            "location": 859,
                                                            "val": Object {
                                                              "Integer": Object {
                                                                "ival": 1,
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                      "op": 0,
                                      "targetList": Array [
                                        Object {
                                          "ResTarget": Object {
                                            "location": 827,
                                            "val": Object {
                                              "A_Const": Object {
                                                "location": 827,
                                                "val": Object {
                                                  "Integer": Object {
                                                    "ival": 1,
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      ],
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 116,
        "stmt_location": 747,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 873,
                  "val": Object {
                    "A_Const": Object {
                      "location": 873,
                      "val": Object {
                        "Integer": Object {
                          "ival": 1,
                        },
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 10,
                "lexpr": Object {
                  "A_Const": Object {
                    "location": 881,
                    "val": Object {
                      "String": Object {
                        "str": "abc",
                      },
                    },
                  },
                },
                "location": 887,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "~",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "args": Array [
                      Object {
                        "A_Const": Object {
                          "location": 898,
                          "val": Object {
                            "String": Object {
                              "str": "abc",
                            },
                          },
                        },
                      },
                      Object {
                        "A_Const": Object {
                          "location": -1,
                          "val": Object {
                            "Null": Object {},
                          },
                        },
                      },
                    ],
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "pg_catalog",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "similar_escape",
                        },
                      },
                    ],
                    "location": 887,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 39,
        "stmt_location": 864,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 913,
                  "val": Object {
                    "A_Const": Object {
                      "location": 913,
                      "val": Object {
                        "Integer": Object {
                          "ival": 1,
                        },
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 10,
                "lexpr": Object {
                  "A_Const": Object {
                    "location": 921,
                    "val": Object {
                      "String": Object {
                        "str": "abc",
                      },
                    },
                  },
                },
                "location": 927,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "~",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "args": Array [
                      Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 943,
                                "val": Object {
                                  "String": Object {
                                    "str": "test",
                                  },
                                },
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "test",
                              },
                            },
                          ],
                          "location": 938,
                        },
                      },
                      Object {
                        "A_Const": Object {
                          "location": -1,
                          "val": Object {
                            "Null": Object {},
                          },
                        },
                      },
                    ],
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "pg_catalog",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "similar_escape",
                        },
                      },
                    ],
                    "location": 927,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 46,
        "stmt_location": 904,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 960,
                  "val": Object {
                    "A_Const": Object {
                      "location": 960,
                      "val": Object {
                        "Integer": Object {
                          "ival": 1,
                        },
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 10,
                "lexpr": Object {
                  "A_Const": Object {
                    "location": 968,
                    "val": Object {
                      "String": Object {
                        "str": "abc",
                      },
                    },
                  },
                },
                "location": 974,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "~",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "args": Array [
                      Object {
                        "FuncCall": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 990,
                                "val": Object {
                                  "String": Object {
                                    "str": "test",
                                  },
                                },
                              },
                            },
                          ],
                          "funcname": Array [
                            Object {
                              "String": Object {
                                "str": "test",
                              },
                            },
                          ],
                          "location": 985,
                        },
                      },
                      Object {
                        "A_Const": Object {
                          "location": 1005,
                          "val": Object {
                            "String": Object {
                              "str": "t",
                            },
                          },
                        },
                      },
                    ],
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "pg_catalog",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "similar_escape",
                        },
                      },
                    ],
                    "location": 974,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 57,
        "stmt_location": 951,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 1018,
                  "val": Object {
                    "TypeCast": Object {
                      "arg": Object {
                        "A_Const": Object {
                          "location": 1018,
                          "val": Object {
                            "Integer": Object {
                              "ival": 1,
                            },
                          },
                        },
                      },
                      "location": 1019,
                      "typeName": Object {
                        "TypeName": Object {
                          "location": 1021,
                          "names": Array [
                            Object {
                              "String": Object {
                                "str": "pg_catalog",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "bit",
                              },
                            },
                          ],
                          "typemod": -1,
                          "typmods": Array [
                            Object {
                              "A_Const": Object {
                                "location": -1,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                          ],
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 15,
        "stmt_location": 1009,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "args": Array [
              Object {
                "A_Const": Object {
                  "location": 1047,
                  "val": Object {
                    "String": Object {
                      "str": "UNICODE",
                    },
                  },
                },
              },
            ],
            "kind": 0,
            "name": "client_encoding",
          },
        },
        "stmt_len": 31,
        "stmt_location": 1025,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "args": Array [
              Object {
                "A_Const": Object {
                  "location": 1082,
                  "val": Object {
                    "String": Object {
                      "str": "UNICODE",
                    },
                  },
                },
              },
            ],
            "kind": 0,
            "name": "client_encoding",
          },
        },
        "stmt_len": 34,
        "stmt_location": 1057,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "args": Array [
              Object {
                "A_Const": Object {
                  "location": 1118,
                  "val": Object {
                    "String": Object {
                      "str": "notice",
                    },
                  },
                },
              },
            ],
            "kind": 0,
            "name": "client_min_messages",
          },
        },
        "stmt_len": 32,
        "stmt_location": 1092,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableShowStmt": Object {
            "name": "client_encoding",
          },
        },
        "stmt_len": 22,
        "stmt_location": 1125,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink fixtures custom.sql 2`] = `
"SELECT * FROM tab ORDER BY col USING <;
SELECT * FROM tab ORDER BY col USING >;
SELECT * FROM tab ORDER BY col USING =;
SELECT * FROM tab ORDER BY col USING = NULLS FIRST,
col2 USING < NULLS LAST;
SELECT mleast(VARIADIC arr := ARRAY[10, (-1), 5, 4.4]);
SELECT encode('''123\\\\000\\\\001', 'base64');
SELECT 'слон';
SELECT 'data';
SELECT ((3) OPERATOR(pg_catalog.+) (4));
SELECT * FROM ROWS FROM (getfoo6(1) AS (fooid int, foosubid int, fooname text), getfoo7(1) AS (fooid int, foosubid int, fooname text))  AS (fooid int, foosubid int, fooname text);
SELECT a FROM b WHERE ((a) < ((SELECT 1)));
SELECT a FROM b WHERE a < ALL (SELECT 1);
SELECT a FROM b WHERE a < ANY (SELECT 1);
SELECT a FROM b WHERE EXISTS (SELECT 1);
SELECT a FROM b WHERE ((a) < (ARRAY (SELECT DISTINCT (SELECT 1),
(SELECT DISTINCT 1 GROUP BY 7 HAVING ((1) < ((SELECT 1)))))));
SELECT 1 WHERE 'abc' SIMILAR TO 'abc' ESCAPE NULL;
SELECT 1 WHERE 'abc' SIMILAR TO test('test') ESCAPE NULL;
SELECT 1 WHERE 'abc' SIMILAR TO test('test') ESCAPE 't';
SELECT 1::bit(1);
SET client_encoding = 'UNICODE';
SET client_encoding = 'UNICODE';
SET client_min_messages = 'notice';
SHOW client_encoding;"
`;

exports[`kitchen sink fixtures param-ref.sql 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 18,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 9,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 9,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "name",
                        },
                      },
                    ],
                    "location": 37,
                  },
                },
                "location": 42,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "ParamRef": Object {
                    "location": 44,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 45,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 66,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 57,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 57,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "name",
                        },
                      },
                    ],
                    "location": 85,
                  },
                },
                "location": 90,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "ParamRef": Object {
                    "location": 92,
                    "number": 1,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 48,
        "stmt_location": 46,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 106,
                  "name": "name",
                  "val": Object {
                    "TypeCast": Object {
                      "arg": Object {
                        "ParamRef": Object {
                          "location": 106,
                          "number": 1,
                        },
                      },
                      "location": 108,
                      "typeName": Object {
                        "TypeName": Object {
                          "location": 110,
                          "names": Array [
                            Object {
                              "String": Object {
                                "str": "text",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 27,
        "stmt_location": 95,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink fixtures param-ref.sql 2`] = `
"SELECT * FROM table_name WHERE ((name) = (?));
SELECT * FROM table_name WHERE ((name) = ($1));
SELECT $1::text AS name;"
`;

exports[`kitchen sink fixtures query-001.sql 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeSubselect": Object {
                  "alias": Object {
                    "Alias": Object {
                      "aliasname": "innerquery",
                    },
                  },
                  "subquery": Object {
                    "SelectStmt": Object {
                      "distinctClause": Array [
                        null,
                      ],
                      "fromClause": Array [
                        Object {
                          "JoinExpr": Object {
                            "jointype": 0,
                            "larg": Object {
                              "RangeSubselect": Object {
                                "alias": Object {
                                  "Alias": Object {
                                    "aliasname": "t1",
                                  },
                                },
                                "subquery": Object {
                                  "SelectStmt": Object {
                                    "fromClause": Array [
                                      Object {
                                        "JoinExpr": Object {
                                          "jointype": 1,
                                          "larg": Object {
                                            "RangeVar": Object {
                                              "alias": Object {
                                                "Alias": Object {
                                                  "aliasname": "p",
                                                },
                                              },
                                              "inh": true,
                                              "location": 299,
                                              "relname": "player",
                                              "relpersistence": "p",
                                            },
                                          },
                                          "quals": Object {
                                            "A_Expr": Object {
                                              "kind": 0,
                                              "lexpr": Object {
                                                "ColumnRef": Object {
                                                  "fields": Array [
                                                    Object {
                                                      "String": Object {
                                                        "str": "p",
                                                      },
                                                    },
                                                    Object {
                                                      "String": Object {
                                                        "str": "playerid",
                                                      },
                                                    },
                                                  ],
                                                  "location": 334,
                                                },
                                              },
                                              "location": 345,
                                              "name": Array [
                                                Object {
                                                  "String": Object {
                                                    "str": "=",
                                                  },
                                                },
                                              ],
                                              "rexpr": Object {
                                                "ColumnRef": Object {
                                                  "fields": Array [
                                                    Object {
                                                      "String": Object {
                                                        "str": "pl",
                                                      },
                                                    },
                                                    Object {
                                                      "String": Object {
                                                        "str": "playerid",
                                                      },
                                                    },
                                                  ],
                                                  "location": 347,
                                                },
                                              },
                                            },
                                          },
                                          "rarg": Object {
                                            "RangeVar": Object {
                                              "alias": Object {
                                                "Alias": Object {
                                                  "aliasname": "pl",
                                                },
                                              },
                                              "inh": true,
                                              "location": 322,
                                              "relname": "plays",
                                              "relpersistence": "p",
                                            },
                                          },
                                        },
                                      },
                                    ],
                                    "groupClause": Array [
                                      Object {
                                        "ColumnRef": Object {
                                          "fields": Array [
                                            Object {
                                              "String": Object {
                                                "str": "p",
                                              },
                                            },
                                            Object {
                                              "String": Object {
                                                "str": "playerid",
                                              },
                                            },
                                          ],
                                          "location": 372,
                                        },
                                      },
                                      Object {
                                        "ColumnRef": Object {
                                          "fields": Array [
                                            Object {
                                              "String": Object {
                                                "str": "p",
                                              },
                                            },
                                            Object {
                                              "String": Object {
                                                "str": "playername",
                                              },
                                            },
                                          ],
                                          "location": 384,
                                        },
                                      },
                                    ],
                                    "op": 0,
                                    "targetList": Array [
                                      Object {
                                        "ResTarget": Object {
                                          "location": 146,
                                          "name": "t1id",
                                          "val": Object {
                                            "ColumnRef": Object {
                                              "fields": Array [
                                                Object {
                                                  "String": Object {
                                                    "str": "p",
                                                  },
                                                },
                                                Object {
                                                  "String": Object {
                                                    "str": "playerid",
                                                  },
                                                },
                                              ],
                                              "location": 146,
                                            },
                                          },
                                        },
                                      },
                                      Object {
                                        "ResTarget": Object {
                                          "location": 172,
                                          "name": "t1player",
                                          "val": Object {
                                            "FuncCall": Object {
                                              "args": Array [
                                                Object {
                                                  "ColumnRef": Object {
                                                    "fields": Array [
                                                      Object {
                                                        "String": Object {
                                                          "str": "p",
                                                        },
                                                      },
                                                      Object {
                                                        "String": Object {
                                                          "str": "playerid",
                                                        },
                                                      },
                                                    ],
                                                    "location": 179,
                                                  },
                                                },
                                                Object {
                                                  "A_Const": Object {
                                                    "location": 191,
                                                    "val": Object {
                                                      "String": Object {
                                                        "str": ":",
                                                      },
                                                    },
                                                  },
                                                },
                                                Object {
                                                  "ColumnRef": Object {
                                                    "fields": Array [
                                                      Object {
                                                        "String": Object {
                                                          "str": "p",
                                                        },
                                                      },
                                                      Object {
                                                        "String": Object {
                                                          "str": "playername",
                                                        },
                                                      },
                                                    ],
                                                    "location": 196,
                                                  },
                                                },
                                                Object {
                                                  "A_Const": Object {
                                                    "location": 210,
                                                    "val": Object {
                                                      "String": Object {
                                                        "str": " ",
                                                      },
                                                    },
                                                  },
                                                },
                                              ],
                                              "funcname": Array [
                                                Object {
                                                  "String": Object {
                                                    "str": "concat",
                                                  },
                                                },
                                              ],
                                              "location": 172,
                                            },
                                          },
                                        },
                                      },
                                      Object {
                                        "ResTarget": Object {
                                          "location": 234,
                                          "name": "player_teams",
                                          "val": Object {
                                            "FuncCall": Object {
                                              "agg_order": Array [
                                                Object {
                                                  "SortBy": Object {
                                                    "location": -1,
                                                    "node": Object {
                                                      "ColumnRef": Object {
                                                        "fields": Array [
                                                          Object {
                                                            "String": Object {
                                                              "str": "pl",
                                                            },
                                                          },
                                                          Object {
                                                            "String": Object {
                                                              "str": "teamid",
                                                            },
                                                          },
                                                        ],
                                                        "location": 263,
                                                      },
                                                    },
                                                    "sortby_dir": 0,
                                                    "sortby_nulls": 0,
                                                  },
                                                },
                                              ],
                                              "args": Array [
                                                Object {
                                                  "ColumnRef": Object {
                                                    "fields": Array [
                                                      Object {
                                                        "String": Object {
                                                          "str": "pl",
                                                        },
                                                      },
                                                      Object {
                                                        "String": Object {
                                                          "str": "teamid",
                                                        },
                                                      },
                                                    ],
                                                    "location": 244,
                                                  },
                                                },
                                              ],
                                              "funcname": Array [
                                                Object {
                                                  "String": Object {
                                                    "str": "array_agg",
                                                  },
                                                },
                                              ],
                                              "location": 234,
                                            },
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                            "quals": Object {
                              "BoolExpr": Object {
                                "args": Array [
                                  Object {
                                    "A_Expr": Object {
                                      "kind": 0,
                                      "lexpr": Object {
                                        "ColumnRef": Object {
                                          "fields": Array [
                                            Object {
                                              "String": Object {
                                                "str": "t1",
                                              },
                                            },
                                            Object {
                                              "String": Object {
                                                "str": "player_teams",
                                              },
                                            },
                                          ],
                                          "location": 621,
                                        },
                                      },
                                      "location": 636,
                                      "name": Array [
                                        Object {
                                          "String": Object {
                                            "str": "=",
                                          },
                                        },
                                      ],
                                      "rexpr": Object {
                                        "ColumnRef": Object {
                                          "fields": Array [
                                            Object {
                                              "String": Object {
                                                "str": "t2",
                                              },
                                            },
                                            Object {
                                              "String": Object {
                                                "str": "player_teams",
                                              },
                                            },
                                          ],
                                          "location": 637,
                                        },
                                      },
                                    },
                                  },
                                  Object {
                                    "A_Expr": Object {
                                      "kind": 0,
                                      "lexpr": Object {
                                        "ColumnRef": Object {
                                          "fields": Array [
                                            Object {
                                              "String": Object {
                                                "str": "t1",
                                              },
                                            },
                                            Object {
                                              "String": Object {
                                                "str": "t1id",
                                              },
                                            },
                                          ],
                                          "location": 657,
                                        },
                                      },
                                      "location": 665,
                                      "name": Array [
                                        Object {
                                          "String": Object {
                                            "str": "<>",
                                          },
                                        },
                                      ],
                                      "rexpr": Object {
                                        "ColumnRef": Object {
                                          "fields": Array [
                                            Object {
                                              "String": Object {
                                                "str": "t2",
                                              },
                                            },
                                            Object {
                                              "String": Object {
                                                "str": "t2id",
                                              },
                                            },
                                          ],
                                          "location": 668,
                                        },
                                      },
                                    },
                                  },
                                ],
                                "boolop": 0,
                                "location": 653,
                              },
                            },
                            "rarg": Object {
                              "RangeSubselect": Object {
                                "alias": Object {
                                  "Alias": Object {
                                    "aliasname": "t2",
                                  },
                                },
                                "subquery": Object {
                                  "SelectStmt": Object {
                                    "fromClause": Array [
                                      Object {
                                        "JoinExpr": Object {
                                          "jointype": 1,
                                          "larg": Object {
                                            "RangeVar": Object {
                                              "alias": Object {
                                                "Alias": Object {
                                                  "aliasname": "p",
                                                },
                                              },
                                              "inh": true,
                                              "location": 519,
                                              "relname": "player",
                                              "relpersistence": "p",
                                            },
                                          },
                                          "quals": Object {
                                            "A_Expr": Object {
                                              "kind": 0,
                                              "lexpr": Object {
                                                "ColumnRef": Object {
                                                  "fields": Array [
                                                    Object {
                                                      "String": Object {
                                                        "str": "p",
                                                      },
                                                    },
                                                    Object {
                                                      "String": Object {
                                                        "str": "playerid",
                                                      },
                                                    },
                                                  ],
                                                  "location": 552,
                                                },
                                              },
                                              "location": 563,
                                              "name": Array [
                                                Object {
                                                  "String": Object {
                                                    "str": "=",
                                                  },
                                                },
                                              ],
                                              "rexpr": Object {
                                                "ColumnRef": Object {
                                                  "fields": Array [
                                                    Object {
                                                      "String": Object {
                                                        "str": "pl",
                                                      },
                                                    },
                                                    Object {
                                                      "String": Object {
                                                        "str": "playerid",
                                                      },
                                                    },
                                                  ],
                                                  "location": 565,
                                                },
                                              },
                                            },
                                          },
                                          "rarg": Object {
                                            "RangeVar": Object {
                                              "alias": Object {
                                                "Alias": Object {
                                                  "aliasname": "pl",
                                                },
                                              },
                                              "inh": true,
                                              "location": 540,
                                              "relname": "plays",
                                              "relpersistence": "p",
                                            },
                                          },
                                        },
                                      },
                                    ],
                                    "groupClause": Array [
                                      Object {
                                        "ColumnRef": Object {
                                          "fields": Array [
                                            Object {
                                              "String": Object {
                                                "str": "p",
                                              },
                                            },
                                            Object {
                                              "String": Object {
                                                "str": "playerid",
                                              },
                                            },
                                          ],
                                          "location": 588,
                                        },
                                      },
                                      Object {
                                        "ColumnRef": Object {
                                          "fields": Array [
                                            Object {
                                              "String": Object {
                                                "str": "p",
                                              },
                                            },
                                            Object {
                                              "String": Object {
                                                "str": "playername",
                                              },
                                            },
                                          ],
                                          "location": 600,
                                        },
                                      },
                                    ],
                                    "op": 0,
                                    "targetList": Array [
                                      Object {
                                        "ResTarget": Object {
                                          "location": 432,
                                          "name": "t2id",
                                          "val": Object {
                                            "ColumnRef": Object {
                                              "fields": Array [
                                                Object {
                                                  "String": Object {
                                                    "str": "p",
                                                  },
                                                },
                                                Object {
                                                  "String": Object {
                                                    "str": "playerid",
                                                  },
                                                },
                                              ],
                                              "location": 432,
                                            },
                                          },
                                        },
                                      },
                                      Object {
                                        "ResTarget": Object {
                                          "location": 456,
                                          "name": "player_teams",
                                          "val": Object {
                                            "FuncCall": Object {
                                              "agg_order": Array [
                                                Object {
                                                  "SortBy": Object {
                                                    "location": -1,
                                                    "node": Object {
                                                      "ColumnRef": Object {
                                                        "fields": Array [
                                                          Object {
                                                            "String": Object {
                                                              "str": "pl",
                                                            },
                                                          },
                                                          Object {
                                                            "String": Object {
                                                              "str": "teamid",
                                                            },
                                                          },
                                                        ],
                                                        "location": 485,
                                                      },
                                                    },
                                                    "sortby_dir": 0,
                                                    "sortby_nulls": 0,
                                                  },
                                                },
                                              ],
                                              "args": Array [
                                                Object {
                                                  "ColumnRef": Object {
                                                    "fields": Array [
                                                      Object {
                                                        "String": Object {
                                                          "str": "pl",
                                                        },
                                                      },
                                                      Object {
                                                        "String": Object {
                                                          "str": "teamid",
                                                        },
                                                      },
                                                    ],
                                                    "location": 466,
                                                  },
                                                },
                                              ],
                                              "funcname": Array [
                                                Object {
                                                  "String": Object {
                                                    "str": "array_agg",
                                                  },
                                                },
                                              ],
                                              "location": 456,
                                            },
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                      ],
                      "op": 0,
                      "targetList": Array [
                        Object {
                          "ResTarget": Object {
                            "location": 72,
                            "name": "players_dist",
                            "val": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "t1",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "t1player",
                                    },
                                  },
                                ],
                                "location": 72,
                              },
                            },
                          },
                        },
                        Object {
                          "ResTarget": Object {
                            "location": 105,
                            "val": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "t1",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "player_teams",
                                    },
                                  },
                                ],
                                "location": 105,
                              },
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "groupClause": Array [
              Object {
                "ColumnRef": Object {
                  "fields": Array [
                    Object {
                      "String": Object {
                        "str": "player_teams",
                      },
                    },
                  ],
                  "location": 698,
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 9,
                  "val": Object {
                    "FuncCall": Object {
                      "args": Array [
                        Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "players",
                                },
                              },
                            ],
                            "location": 19,
                          },
                        },
                      ],
                      "funcname": Array [
                        Object {
                          "String": Object {
                            "str": "array_agg",
                          },
                        },
                      ],
                      "location": 9,
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 31,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "player_teams",
                          },
                        },
                      ],
                      "location": 31,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 710,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink fixtures query-001.sql 2`] = `
"SELECT array_agg(players),
player_teams FROM (SELECT DISTINCT t1.t1player AS players_dist,
t1.player_teams FROM (SELECT p.playerid AS t1id,
concat(p.playerid, ':', p.playername, ' ') AS t1player,
array_agg(pl.teamid ORDER BY pl.teamid) AS player_teams FROM player AS p LEFT OUTER JOIN plays AS pl ON ((p.playerid) = (pl.playerid)) GROUP BY p.playerid,
p.playername) AS t1 INNER JOIN (SELECT p.playerid AS t2id,
array_agg(pl.teamid ORDER BY pl.teamid) AS player_teams FROM player AS p LEFT OUTER JOIN plays AS pl ON ((p.playerid) = (pl.playerid)) GROUP BY p.playerid,
p.playername) AS t2 ON (((t1.player_teams) = (t2.player_teams)) AND ((t1.t1id) <> (t2.t2id)))) AS innerquery GROUP BY player_teams;"
`;

exports[`kitchen sink fixtures query-002.sql 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "alias": Object {
                    "Alias": Object {
                      "aliasname": "f1",
                    },
                  },
                  "inh": true,
                  "location": 14,
                  "relname": "Foo",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 7,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "f1",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "FooUID",
                        },
                      },
                    ],
                    "location": 29,
                  },
                },
                "location": 41,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "SubLink": Object {
                    "location": 43,
                    "subLinkType": 4,
                    "subselect": Object {
                      "SelectStmt": Object {
                        "fromClause": Array [
                          Object {
                            "JoinExpr": Object {
                              "jointype": 1,
                              "larg": Object {
                                "RangeVar": Object {
                                  "alias": Object {
                                    "Alias": Object {
                                      "aliasname": "f2",
                                    },
                                  },
                                  "inh": true,
                                  "location": 72,
                                  "relname": "Foo",
                                  "relpersistence": "p",
                                },
                              },
                              "quals": Object {
                                "A_Expr": Object {
                                  "kind": 0,
                                  "lexpr": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "f2",
                                          },
                                        },
                                        Object {
                                          "String": Object {
                                            "str": "BarUID",
                                          },
                                        },
                                      ],
                                      "location": 105,
                                    },
                                  },
                                  "location": 117,
                                  "name": Array [
                                    Object {
                                      "String": Object {
                                        "str": "=",
                                      },
                                    },
                                  ],
                                  "rexpr": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "b",
                                          },
                                        },
                                        Object {
                                          "String": Object {
                                            "str": "BarUID",
                                          },
                                        },
                                      ],
                                      "location": 119,
                                    },
                                  },
                                },
                              },
                              "rarg": Object {
                                "RangeVar": Object {
                                  "alias": Object {
                                    "Alias": Object {
                                      "aliasname": "b",
                                    },
                                  },
                                  "inh": true,
                                  "location": 94,
                                  "relname": "Bar",
                                  "relpersistence": "p",
                                },
                              },
                            },
                          },
                        ],
                        "limitCount": Object {
                          "A_Const": Object {
                            "location": 195,
                            "val": Object {
                              "Integer": Object {
                                "ival": 1,
                              },
                            },
                          },
                        },
                        "op": 0,
                        "targetList": Array [
                          Object {
                            "ResTarget": Object {
                              "location": 55,
                              "val": Object {
                                "ColumnRef": Object {
                                  "fields": Array [
                                    Object {
                                      "String": Object {
                                        "str": "f2",
                                      },
                                    },
                                    Object {
                                      "String": Object {
                                        "str": "FooUID",
                                      },
                                    },
                                  ],
                                  "location": 55,
                                },
                              },
                            },
                          },
                        ],
                        "whereClause": Object {
                          "BoolExpr": Object {
                            "args": Array [
                              Object {
                                "NullTest": Object {
                                  "arg": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "f2",
                                          },
                                        },
                                        Object {
                                          "String": Object {
                                            "str": "BarUID",
                                          },
                                        },
                                      ],
                                      "location": 139,
                                    },
                                  },
                                  "location": 151,
                                  "nulltesttype": 1,
                                },
                              },
                              Object {
                                "NullTest": Object {
                                  "arg": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "b",
                                          },
                                        },
                                        Object {
                                          "String": Object {
                                            "str": "BarUID",
                                          },
                                        },
                                      ],
                                      "location": 167,
                                    },
                                  },
                                  "location": 178,
                                  "nulltesttype": 0,
                                },
                              },
                            ],
                            "boolop": 0,
                            "location": 163,
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink fixtures query-002.sql 2`] = `"SELECT * FROM \\"Foo\\" AS f1 WHERE ((f1.\\"FooUID\\") = ((SELECT f2.\\"FooUID\\" FROM \\"Foo\\" AS f2 LEFT OUTER JOIN \\"Bar\\" AS b ON ((f2.\\"BarUID\\") = (b.\\"BarUID\\")) WHERE (f2.\\"BarUID\\" IS NOT NULL AND b.\\"BarUID\\" IS NULL) LIMIT 1)));"`;

exports[`kitchen sink fixtures query-003.sql 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 7,
                  "val": Object {
                    "A_Indirection": Object {
                      "arg": Object {
                        "TypeCast": Object {
                          "arg": Object {
                            "SubLink": Object {
                              "location": 8,
                              "subLinkType": 4,
                              "subselect": Object {
                                "SelectStmt": Object {
                                  "op": 0,
                                  "targetList": Array [
                                    Object {
                                      "ResTarget": Object {
                                        "location": 16,
                                        "val": Object {
                                          "TypeCast": Object {
                                            "arg": Object {
                                              "RowExpr": Object {
                                                "args": Array [
                                                  Object {
                                                    "A_Const": Object {
                                                      "location": 20,
                                                      "val": Object {
                                                        "Integer": Object {
                                                          "ival": 1,
                                                        },
                                                      },
                                                    },
                                                  },
                                                  Object {
                                                    "A_Const": Object {
                                                      "location": 22,
                                                      "val": Object {
                                                        "Integer": Object {
                                                          "ival": 1,
                                                        },
                                                      },
                                                    },
                                                  },
                                                  Object {
                                                    "A_Const": Object {
                                                      "location": 24,
                                                      "val": Object {
                                                        "Integer": Object {
                                                          "ival": 1,
                                                        },
                                                      },
                                                    },
                                                  },
                                                  Object {
                                                    "A_Const": Object {
                                                      "location": 26,
                                                      "val": Object {
                                                        "Integer": Object {
                                                          "ival": 1,
                                                        },
                                                      },
                                                    },
                                                  },
                                                ],
                                                "location": 16,
                                                "row_format": 0,
                                              },
                                            },
                                            "location": 28,
                                            "typeName": Object {
                                              "TypeName": Object {
                                                "location": 30,
                                                "names": Array [
                                                  Object {
                                                    "String": Object {
                                                      "str": "test",
                                                    },
                                                  },
                                                ],
                                                "typemod": -1,
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            },
                          },
                          "location": 35,
                          "typeName": Object {
                            "TypeName": Object {
                              "location": 37,
                              "names": Array [
                                Object {
                                  "String": Object {
                                    "str": "test",
                                  },
                                },
                              ],
                              "typemod": -1,
                            },
                          },
                        },
                      },
                      "indirection": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 44,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink fixtures query-003.sql 2`] = `"SELECT ((SELECT ROW(1, 1, 1, 1)::test)::test).*;"`;

exports[`kitchen sink fixtures simple.sql 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 18,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 9,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 9,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "BoolExpr": Object {
                "args": Array [
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "name",
                              },
                            },
                          ],
                          "location": 37,
                        },
                      },
                      "location": 42,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 44,
                          "val": Object {
                            "String": Object {
                              "str": "test",
                            },
                          },
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "num",
                              },
                            },
                          ],
                          "location": 55,
                        },
                      },
                      "location": 59,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": ">",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 61,
                          "val": Object {
                            "Integer": Object {
                              "ival": 7,
                            },
                          },
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 8,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "last_name",
                              },
                            },
                          ],
                          "location": 69,
                        },
                      },
                      "location": 79,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "~~",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 84,
                          "val": Object {
                            "String": Object {
                              "str": "%'test'%",
                            },
                          },
                        },
                      },
                    },
                  },
                ],
                "boolop": 0,
                "location": 51,
              },
            },
          },
        },
        "stmt_len": 96,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 117,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 108,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 108,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "BoolExpr": Object {
                "args": Array [
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "name",
                              },
                            },
                          ],
                          "location": 136,
                        },
                      },
                      "location": 141,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 143,
                          "val": Object {
                            "String": Object {
                              "str": "test",
                            },
                          },
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "num",
                              },
                            },
                          ],
                          "location": 154,
                        },
                      },
                      "location": 158,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": ">",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 160,
                          "val": Object {
                            "Integer": Object {
                              "ival": 7,
                            },
                          },
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 8,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "last_name",
                              },
                            },
                          ],
                          "location": 168,
                        },
                      },
                      "location": 178,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "!~~",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 187,
                          "val": Object {
                            "String": Object {
                              "str": "%'test'%",
                            },
                          },
                        },
                      },
                    },
                  },
                ],
                "boolop": 0,
                "location": 150,
              },
            },
          },
        },
        "stmt_len": 102,
        "stmt_location": 97,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 220,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 211,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 211,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "BoolExpr": Object {
                "args": Array [
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "name",
                              },
                            },
                          ],
                          "location": 239,
                        },
                      },
                      "location": 244,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 246,
                          "val": Object {
                            "String": Object {
                              "str": "test",
                            },
                          },
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "num",
                              },
                            },
                          ],
                          "location": 257,
                        },
                      },
                      "location": 261,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": ">",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 263,
                          "val": Object {
                            "Integer": Object {
                              "ival": 7,
                            },
                          },
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 9,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "last_name",
                              },
                            },
                          ],
                          "location": 271,
                        },
                      },
                      "location": 281,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "~~*",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 287,
                          "val": Object {
                            "String": Object {
                              "str": "%'test'%",
                            },
                          },
                        },
                      },
                    },
                  },
                ],
                "boolop": 0,
                "location": 253,
              },
            },
          },
        },
        "stmt_len": 99,
        "stmt_location": 200,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 320,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 311,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 311,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "BoolExpr": Object {
                "args": Array [
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "name",
                              },
                            },
                          ],
                          "location": 339,
                        },
                      },
                      "location": 344,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 346,
                          "val": Object {
                            "String": Object {
                              "str": "test",
                            },
                          },
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "num",
                              },
                            },
                          ],
                          "location": 357,
                        },
                      },
                      "location": 361,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": ">",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 363,
                          "val": Object {
                            "Integer": Object {
                              "ival": 7,
                            },
                          },
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 9,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "last_name",
                              },
                            },
                          ],
                          "location": 371,
                        },
                      },
                      "location": 381,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "!~~*",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Const": Object {
                          "location": 391,
                          "val": Object {
                            "String": Object {
                              "str": "%'test'%",
                            },
                          },
                        },
                      },
                    },
                  },
                ],
                "boolop": 0,
                "location": 353,
              },
            },
          },
        },
        "stmt_len": 103,
        "stmt_location": 300,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 424,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 415,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 415,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 10,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "last_name",
                        },
                      },
                    ],
                    "location": 443,
                  },
                },
                "location": 453,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "~",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "args": Array [
                      Object {
                        "A_Const": Object {
                          "location": 464,
                          "val": Object {
                            "String": Object {
                              "str": "%(b|d)%",
                            },
                          },
                        },
                      },
                      Object {
                        "A_Const": Object {
                          "location": -1,
                          "val": Object {
                            "Null": Object {},
                          },
                        },
                      },
                    ],
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "pg_catalog",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "similar_escape",
                        },
                      },
                    ],
                    "location": 453,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 69,
        "stmt_location": 404,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 494,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 485,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 485,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 10,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "last_name",
                        },
                      },
                    ],
                    "location": 513,
                  },
                },
                "location": 523,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "~",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "args": Array [
                      Object {
                        "A_Const": Object {
                          "location": 534,
                          "val": Object {
                            "String": Object {
                              "str": "%(b|d)%",
                            },
                          },
                        },
                      },
                      Object {
                        "A_Const": Object {
                          "location": 551,
                          "val": Object {
                            "String": Object {
                              "str": "a",
                            },
                          },
                        },
                      },
                    ],
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "pg_catalog",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "similar_escape",
                        },
                      },
                    ],
                    "location": 523,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 80,
        "stmt_location": 474,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 575,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 566,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 566,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 10,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "last_name",
                        },
                      },
                    ],
                    "location": 594,
                  },
                },
                "location": 604,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "!~",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "args": Array [
                      Object {
                        "A_Const": Object {
                          "location": 619,
                          "val": Object {
                            "String": Object {
                              "str": "%(b|d)%",
                            },
                          },
                        },
                      },
                      Object {
                        "A_Const": Object {
                          "location": -1,
                          "val": Object {
                            "Null": Object {},
                          },
                        },
                      },
                    ],
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "pg_catalog",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "similar_escape",
                        },
                      },
                    ],
                    "location": 604,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 73,
        "stmt_location": 555,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "SelectStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 649,
                  "relname": "table_name",
                  "relpersistence": "p",
                },
              },
            ],
            "op": 0,
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 640,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 640,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 10,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "last_name",
                        },
                      },
                    ],
                    "location": 668,
                  },
                },
                "location": 678,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "!~",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "args": Array [
                      Object {
                        "A_Const": Object {
                          "location": 693,
                          "val": Object {
                            "String": Object {
                              "str": "%(b|d)%",
                            },
                          },
                        },
                      },
                      Object {
                        "A_Const": Object {
                          "location": 710,
                          "val": Object {
                            "String": Object {
                              "str": "a",
                            },
                          },
                        },
                      },
                    ],
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "pg_catalog",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "similar_escape",
                        },
                      },
                    ],
                    "location": 678,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 84,
        "stmt_location": 629,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink fixtures simple.sql 2`] = `
"SELECT * FROM table_name WHERE (((name) = ('test')) AND ((num) > (7)) AND last_name LIKE ('%''test''%'));
SELECT * FROM table_name WHERE (((name) = ('test')) AND ((num) > (7)) AND last_name NOT LIKE ('%''test''%'));
SELECT * FROM table_name WHERE (((name) = ('test')) AND ((num) > (7)) AND last_name ILIKE ('%''test''%'));
SELECT * FROM table_name WHERE (((name) = ('test')) AND ((num) > (7)) AND last_name NOT ILIKE ('%''test''%'));
SELECT * FROM table_name WHERE last_name SIMILAR TO '%(b|d)%' ESCAPE NULL;
SELECT * FROM table_name WHERE last_name SIMILAR TO '%(b|d)%' ESCAPE 'a';
SELECT * FROM table_name WHERE last_name NOT SIMILAR TO '%(b|d)%' ESCAPE NULL;
SELECT * FROM table_name WHERE last_name NOT SIMILAR TO '%(b|d)%' ESCAPE 'a';"
`;

exports[`kitchen sink functions basic 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateFunctionStmt": Object {
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "someschema",
                },
              },
              Object {
                "String": Object {
                  "str": "myfunc",
                },
              },
            ],
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "
UPDATE
    mytable
SET
    ref_id = new_ref_id
WHERE
    id = some_id
",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "as",
                  "location": 88,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "sql",
                    },
                  },
                  "defaction": 0,
                  "defname": "language",
                  "location": 167,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "volatile",
                    },
                  },
                  "defaction": 0,
                  "defname": "volatility",
                  "location": 182,
                },
              },
            ],
            "parameters": Array [
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 54,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "some_id",
                },
              },
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 69,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "other_id",
                },
              },
            ],
            "replace": true,
            "returnType": Object {
              "TypeName": Object {
                "location": 83,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "void",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 190,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateFunctionStmt": Object {
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "someschema",
                },
              },
              Object {
                "String": Object {
                  "str": "myfunc",
                },
              },
            ],
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "
UPDATE
    mytable
SET
    ref_id = new_ref_id
WHERE
    id = some_id
",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "as",
                  "location": 284,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "sql",
                    },
                  },
                  "defaction": 0,
                  "defname": "language",
                  "location": 363,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "volatile",
                    },
                  },
                  "defaction": 0,
                  "defname": "volatility",
                  "location": 378,
                },
              },
            ],
            "parameters": Array [
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 247,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "some_id",
                },
              },
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 262,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "other_id",
                },
              },
            ],
            "replace": true,
            "returnType": Object {
              "TypeName": Object {
                "location": 276,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "obj",
                    },
                  },
                  Object {
                    "String": Object {
                      "str": "geo",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 195,
        "stmt_location": 191,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink functions basic 2`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS void AS $EOFCODE$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id
$EOFCODE$ LANGUAGE sql VOLATILE;
CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS obj.geo AS $EOFCODE$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id
$EOFCODE$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink functions basic 3`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateFunctionStmt": Object {
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "someschema",
                },
              },
              Object {
                "String": Object {
                  "str": "myfunc",
                },
              },
            ],
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "
UPDATE
    mytable
SET
    ref_id = new_ref_id
WHERE
    id = some_id
",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "as",
                  "location": 88,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "sql",
                    },
                  },
                  "defaction": 0,
                  "defname": "language",
                  "location": 167,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "volatile",
                    },
                  },
                  "defaction": 0,
                  "defname": "volatility",
                  "location": 182,
                },
              },
            ],
            "parameters": Array [
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 54,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "some_id",
                },
              },
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 69,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "other_id",
                },
              },
            ],
            "replace": true,
            "returnType": Object {
              "TypeName": Object {
                "location": 83,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "void",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 190,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateFunctionStmt": Object {
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "someschema",
                },
              },
              Object {
                "String": Object {
                  "str": "myfunc",
                },
              },
            ],
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "
UPDATE
    mytable
SET
    ref_id = new_ref_id
WHERE
    id = some_id
",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "as",
                  "location": 284,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "sql",
                    },
                  },
                  "defaction": 0,
                  "defname": "language",
                  "location": 363,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "volatile",
                    },
                  },
                  "defaction": 0,
                  "defname": "volatility",
                  "location": 378,
                },
              },
            ],
            "parameters": Array [
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 247,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "some_id",
                },
              },
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 262,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "other_id",
                },
              },
            ],
            "replace": true,
            "returnType": Object {
              "TypeName": Object {
                "location": 276,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "obj",
                    },
                  },
                  Object {
                    "String": Object {
                      "str": "geo",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 195,
        "stmt_location": 191,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink functions basic 4`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS void AS $EOFCODE$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id
$EOFCODE$ LANGUAGE sql VOLATILE;
CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS obj.geo AS $EOFCODE$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id
$EOFCODE$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink functions returns_table 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateFunctionStmt": Object {
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "someschema",
                },
              },
              Object {
                "String": Object {
                  "str": "myfunc",
                },
              },
            ],
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "
SELECT * FROM
    mytable
",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "as",
                  "location": 131,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "sql",
                    },
                  },
                  "defaction": 0,
                  "defname": "language",
                  "location": 166,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "volatile",
                    },
                  },
                  "defaction": 0,
                  "defname": "volatility",
                  "location": 181,
                },
              },
            ],
            "parameters": Array [
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 54,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "obj",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "geo_type",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "some_id",
                },
              },
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 77,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "obj",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "geo_type",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "other_id",
                },
              },
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 111,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 116,
                  "name": "path",
                },
              },
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 122,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 116,
                  "name": "name",
                },
              },
            ],
            "replace": true,
            "returnType": Object {
              "TypeName": Object {
                "location": 99,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "pg_catalog",
                    },
                  },
                  Object {
                    "String": Object {
                      "str": "record",
                    },
                  },
                ],
                "setof": true,
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 189,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink functions returns_table 2`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id obj.geo_type, other_id obj.geo_type ) RETURNS TABLE ( path text, name int ) AS $EOFCODE$
SELECT * FROM
mytable
$EOFCODE$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink functions returns_trigger 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateFunctionStmt": Object {
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "helpers",
                },
              },
              Object {
                "String": Object {
                  "str": "some_method",
                },
              },
            ],
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "
BEGIN
    IF tg_op = 'INSERT' THEN
        NEW.some_prop = helpers.do_magic (NEW.data);
        RETURN NEW;
    END IF;
END;
",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "as",
                  "location": 70,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "plpgsql",
                    },
                  },
                  "defaction": 0,
                  "defname": "language",
                  "location": 204,
                },
              },
            ],
            "replace": true,
            "returnType": Object {
              "TypeName": Object {
                "location": 62,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "trigger",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 222,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink functions returns_trigger 2`] = `
"CREATE OR REPLACE FUNCTION helpers.some_method (  ) RETURNS trigger AS $EOFCODE$
BEGIN
IF tg_op = 'INSERT' THEN
NEW.some_prop = helpers.do_magic (NEW.data);
RETURN NEW;
END IF;
END;
$EOFCODE$ LANGUAGE plpgsql;"
`;

exports[`kitchen sink functions setof 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateFunctionStmt": Object {
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "someschema",
                },
              },
              Object {
                "String": Object {
                  "str": "myfunc",
                },
              },
            ],
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "
UPDATE
    mytable
SET
    ref_id = new_ref_id
WHERE
    id = some_id
",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "as",
                  "location": 97,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "sql",
                    },
                  },
                  "defaction": 0,
                  "defname": "language",
                  "location": 176,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "volatile",
                    },
                  },
                  "defaction": 0,
                  "defname": "volatility",
                  "location": 191,
                },
              },
            ],
            "parameters": Array [
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 54,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "some_id",
                },
              },
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 69,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "other_id",
                },
              },
            ],
            "replace": true,
            "returnType": Object {
              "TypeName": Object {
                "location": 89,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "obj",
                    },
                  },
                  Object {
                    "String": Object {
                      "str": "geo",
                    },
                  },
                ],
                "setof": true,
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 199,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateFunctionStmt": Object {
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "someschema",
                },
              },
              Object {
                "String": Object {
                  "str": "myfunc",
                },
              },
            ],
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "
UPDATE
    mytable
SET
    ref_id = new_ref_id
WHERE
    id = some_id
",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "as",
                  "location": 315,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "sql",
                    },
                  },
                  "defaction": 0,
                  "defname": "language",
                  "location": 394,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "volatile",
                    },
                  },
                  "defaction": 0,
                  "defname": "volatility",
                  "location": 409,
                },
              },
            ],
            "parameters": Array [
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 256,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "obj",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "geo_type",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "some_id",
                },
              },
              Object {
                "FunctionParameter": Object {
                  "argType": Object {
                    "TypeName": Object {
                      "location": 279,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "obj",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "geo_type",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  "mode": 105,
                  "name": "other_id",
                },
              },
            ],
            "replace": true,
            "returnType": Object {
              "TypeName": Object {
                "location": 307,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "obj",
                    },
                  },
                  Object {
                    "String": Object {
                      "str": "geo",
                    },
                  },
                ],
                "setof": true,
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 217,
        "stmt_location": 200,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink functions setof 2`] = `
"CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id uuid, other_id uuid ) RETURNS SETOF obj.geo AS $EOFCODE$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id
$EOFCODE$ LANGUAGE sql VOLATILE;
CREATE OR REPLACE FUNCTION someschema.myfunc ( some_id obj.geo_type, other_id obj.geo_type ) RETURNS SETOF obj.geo AS $EOFCODE$
UPDATE
mytable
SET
ref_id = new_ref_id
WHERE
id = some_id
$EOFCODE$ LANGUAGE sql VOLATILE;"
`;

exports[`kitchen sink grants 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "GrantStmt": Object {
            "behavior": 0,
            "grantees": Array [
              Object {
                "RoleSpec": Object {
                  "location": 31,
                  "rolename": "administrator",
                  "roletype": 0,
                },
              },
            ],
            "is_grant": true,
            "objects": Array [
              Object {
                "String": Object {
                  "str": "users",
                },
              },
            ],
            "objtype": 10,
            "privileges": Array [
              Object {
                "AccessPriv": Object {
                  "priv_name": "usage",
                },
              },
            ],
            "targtype": 0,
          },
        },
        "stmt_len": 44,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "GrantStmt": Object {
            "behavior": 0,
            "grantees": Array [
              Object {
                "RoleSpec": Object {
                  "location": 93,
                  "rolename": "anonymous",
                  "roletype": 0,
                },
              },
            ],
            "is_grant": true,
            "objects": Array [
              Object {
                "ObjectWithArgs": Object {
                  "args_unspecified": true,
                  "objname": Array [
                    Object {
                      "String": Object {
                        "str": "auth",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "authenticate",
                      },
                    },
                  ],
                },
              },
            ],
            "objtype": 7,
            "privileges": Array [
              Object {
                "AccessPriv": Object {
                  "priv_name": "execute",
                },
              },
            ],
            "targtype": 0,
          },
        },
        "stmt_len": 57,
        "stmt_location": 45,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "GrantStmt": Object {
            "behavior": 0,
            "grantees": Array [
              Object {
                "RoleSpec": Object {
                  "location": 161,
                  "rolename": "administrator",
                  "roletype": 0,
                },
              },
            ],
            "is_grant": true,
            "objects": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 147,
                  "relname": "token",
                  "relpersistence": "p",
                  "schemaname": "auth",
                },
              },
            ],
            "objtype": 1,
            "privileges": Array [
              Object {
                "AccessPriv": Object {
                  "priv_name": "select",
                },
              },
              Object {
                "AccessPriv": Object {
                  "priv_name": "insert",
                },
              },
              Object {
                "AccessPriv": Object {
                  "priv_name": "update",
                },
              },
              Object {
                "AccessPriv": Object {
                  "priv_name": "delete",
                },
              },
            ],
            "targtype": 0,
          },
        },
        "stmt_len": 71,
        "stmt_location": 103,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink grants 2`] = `
"GRANT USAGE ON SCHEMA users TO administrator;
GRANT EXECUTE ON FUNCTION auth.authenticate TO anonymous;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE auth.token TO administrator;"
`;

exports[`kitchen sink indexes 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "IndexStmt": Object {
            "accessMethod": "btree",
            "concurrent": true,
            "idxname": "boom_merkle_tree_tag_created_reference_idx",
            "indexParams": Array [
              Object {
                "IndexElem": Object {
                  "name": "tag",
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
              Object {
                "IndexElem": Object {
                  "name": "created",
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
              Object {
                "IndexElem": Object {
                  "name": "reference",
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 72,
                "relname": "merkle_tree",
                "relpersistence": "p",
                "schemaname": "boom",
              },
            },
          },
        },
        "stmt_len": 114,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "IndexStmt": Object {
            "accessMethod": "btree",
            "idxname": "databases_database_unique_name_idx",
            "indexParams": Array [
              Object {
                "IndexElem": Object {
                  "name": "tenant_id",
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
              Object {
                "IndexElem": Object {
                  "expr": Object {
                    "FuncCall": Object {
                      "args": Array [
                        Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "name",
                                },
                              },
                            ],
                            "location": 228,
                          },
                        },
                      ],
                      "funcname": Array [
                        Object {
                          "String": Object {
                            "str": "database_name_hash",
                          },
                        },
                      ],
                      "location": 209,
                    },
                  },
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 175,
                "relname": "database",
                "relpersistence": "p",
                "schemaname": "databases",
              },
            },
            "unique": true,
          },
        },
        "stmt_len": 120,
        "stmt_location": 115,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "IndexStmt": Object {
            "accessMethod": "btree",
            "idxname": "boom_worktree_idx",
            "indexParams": Array [
              Object {
                "IndexElem": Object {
                  "name": "tag",
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
              Object {
                "IndexElem": Object {
                  "name": "reference",
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
              Object {
                "IndexElem": Object {
                  "name": "created",
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
              Object {
                "IndexElem": Object {
                  "expr": Object {
                    "FuncCall": Object {
                      "args": Array [
                        Object {
                          "FuncCall": Object {
                            "args": Array [
                              Object {
                                "FuncCall": Object {
                                  "args": Array [
                                    Object {
                                      "ColumnRef": Object {
                                        "fields": Array [
                                          Object {
                                            "String": Object {
                                              "str": "path",
                                            },
                                          },
                                        ],
                                        "location": 336,
                                      },
                                    },
                                  ],
                                  "funcname": Array [
                                    Object {
                                      "String": Object {
                                        "str": "lower",
                                      },
                                    },
                                  ],
                                  "location": 330,
                                },
                              },
                            ],
                            "funcname": Array [
                              Object {
                                "String": Object {
                                  "str": "md5",
                                },
                              },
                            ],
                            "location": 326,
                          },
                        },
                        Object {
                          "A_Const": Object {
                            "location": 344,
                            "val": Object {
                              "String": Object {
                                "str": "hex",
                              },
                            },
                          },
                        },
                      ],
                      "funcname": Array [
                        Object {
                          "String": Object {
                            "str": "decode",
                          },
                        },
                      ],
                      "location": 319,
                    },
                  },
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 279,
                "relname": "worktree",
                "relpersistence": "p",
                "schemaname": "boom",
              },
            },
            "unique": true,
          },
        },
        "stmt_len": 115,
        "stmt_location": 236,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "IndexStmt": Object {
            "accessMethod": "btree",
            "idxname": "uniq_service_when_not_null",
            "indexParams": Array [
              Object {
                "IndexElem": Object {
                  "name": "uid",
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
              Object {
                "IndexElem": Object {
                  "name": "svc",
                  "nulls_ordering": 0,
                  "ordering": 0,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 406,
                "relname": "table3",
                "relpersistence": "p",
                "schemaname": "schema2",
              },
            },
            "unique": true,
            "whereClause": Object {
              "NullTest": Object {
                "arg": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "svc",
                        },
                      },
                    ],
                    "location": 440,
                  },
                },
                "location": 444,
                "nulltesttype": 1,
              },
            },
          },
        },
        "stmt_len": 103,
        "stmt_location": 352,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink indexes 2`] = `
"CREATE INDEX CONCURRENTLY boom_merkle_tree_tag_created_reference_idx ON boom.merkle_tree ( tag, created, reference );
CREATE UNIQUE INDEX databases_database_unique_name_idx ON databases.database ( tenant_id, database_name_hash(name) );
CREATE UNIQUE INDEX boom_worktree_idx ON boom.worktree ( tag, reference, created, decode(md5(lower(path)), 'hex') );
CREATE UNIQUE INDEX uniq_service_when_not_null ON schema2.table3 ( uid, svc ) WHERE svc IS NOT NULL;"
`;

exports[`kitchen sink insert 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "TransactionStmt": Object {
            "kind": 0,
          },
        },
        "stmt_len": 138,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "InsertStmt": Object {
            "override": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 153,
                "relname": "shoelace_data",
                "relpersistence": "p",
              },
            },
            "selectStmt": Object {
              "SelectStmt": Object {
                "op": 0,
                "valuesLists": Array [
                  Array [
                    Object {
                      "A_Const": Object {
                        "location": 184,
                        "val": Object {
                          "Integer": Object {
                            "ival": 1,
                          },
                        },
                      },
                    },
                    Object {
                      "A_Const": Object {
                        "location": 195,
                        "val": Object {
                          "Integer": Object {
                            "ival": 2,
                          },
                        },
                      },
                    },
                    Object {
                      "A_Const": Object {
                        "location": 206,
                        "val": Object {
                          "Integer": Object {
                            "ival": 3,
                          },
                        },
                      },
                    },
                    Object {
                      "A_Const": Object {
                        "location": 217,
                        "val": Object {
                          "String": Object {
                            "str": "truth",
                          },
                        },
                      },
                    },
                    Object {
                      "TypeCast": Object {
                        "arg": Object {
                          "A_Const": Object {
                            "location": 234,
                            "val": Object {
                              "String": Object {
                                "str": "t",
                              },
                            },
                          },
                        },
                        "location": -1,
                        "typeName": Object {
                          "TypeName": Object {
                            "location": -1,
                            "names": Array [
                              Object {
                                "String": Object {
                                  "str": "pg_catalog",
                                },
                              },
                              Object {
                                "String": Object {
                                  "str": "bool",
                                },
                              },
                            ],
                            "typemod": -1,
                          },
                        },
                      },
                    },
                  ],
                ],
              },
            },
          },
        },
        "stmt_len": 101,
        "stmt_location": 139,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "InsertStmt": Object {
            "cols": Array [
              Object {
                "ResTarget": Object {
                  "location": 267,
                  "name": "name",
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 273,
                  "name": "code",
                },
              },
            ],
            "override": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 255,
                "relname": "modules",
                "relpersistence": "p",
                "schemaname": "v8",
              },
            },
            "selectStmt": Object {
              "SelectStmt": Object {
                "op": 0,
                "valuesLists": Array [
                  Array [
                    Object {
                      "A_Const": Object {
                        "location": 287,
                        "val": Object {
                          "String": Object {
                            "str": "ajv",
                          },
                        },
                      },
                    },
                    Object {
                      "A_Const": Object {
                        "location": 294,
                        "val": Object {
                          "String": Object {
                            "str": "

  (function () {
    var module = {
      exports: { }
    };
    var exports = module.exports;

    /* plv8 bundle begins */
  (function(f){if(typeof exports===\\"object\\"&&typeof module!==\\"undefined\\"){module.exports=f()}else if(typeof define===\\"function\\"&&define.amd){define([],f)}else{var g;if(typeof window!==\\"undefined\\"){g=window}else if(typeof global!==\\"undefined\\"){g=global}else if(typeof self!==\\"undefined\\"){g=self}else{g=this}g.ajv = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\\"function\\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\\"Cannot find module '\\"+o+\\"'\\");throw f.code=\\"MODULE_NOT_FOUND\\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\\"function\\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
  (function (global){
  /*! https://mths.be/punycode v1.4.1 by @mathias */
  ;(function(root) {

  /** Detect free variables */
  var freeExports = typeof exports == 'object' && exports &&
    !exports.nodeType && exports;
  var freeModule = typeof module == 'object' && module &&
    !module.nodeType && module;
  var freeGlobal = typeof global == 'object' && global;
  if (
    freeGlobal.global === freeGlobal ||
    freeGlobal.window === freeGlobal ||
    freeGlobal.self === freeGlobal
  ) {
    root = freeGlobal;
  }

  /**
   * The \`punycode\` object.
   * @name punycode
   * @type Object
   */
  var punycode,

  /** Highest positive signed 32-bit float value */
  maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  base = 36,
  tMin = 1,
  tMax = 26,
  skew = 38,
  damp = 700,
  initialBias = 72,
  initialN = 128, // 0x80
  delimiter = '-', // '\\\\x2D'

  /** Regular expressions */
  regexPunycode = /^xn--/,
  regexNonASCII = /[^\\\\x20-\\\\x7E]/, // unprintable ASCII chars + non-ASCII chars
  regexSeparators = /[\\\\x2E\\\\u3002\\\\uFF0E\\\\uFF61]/g, // RFC 3490 separators

  /** Error messages */
  errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  },

  /** Convenience shortcuts */
  baseMinusTMin = base - tMin,
  floor = Math.floor,
  stringFromCharCode = String.fromCharCode,

  /** Temporary variable */
  key;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a \`RangeError\` with the applicable error message.
   */
  function error(type) {
    throw new RangeError(errors[type]);
  }

  /**
   * A generic \`Array#map\` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map(array, fn) {
    var length = array.length;
    var result = [];
    while (length--) {
      result[length] = fn(array[length]);
    }
    return result;
  }

  /**
   * A simple \`Array#map\`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';
    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to \`@\`) intact.
      result = parts[0] + '@';
      string = parts[1];
    }
    // Avoid \`split(regex)\` for IE8 compatibility. See #17.
    string = string.replace(regexSeparators, '\\\\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see \`punycode.ucs2.encode\`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;
    while (counter < length) {
      value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) { // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  /**
   * Creates a string based on an array of numeric code points.
   * @see \`punycode.ucs2.decode\`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */
  function ucs2encode(array) {
    return map(array, function(value) {
      var output = '';
      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }
      output += stringFromCharCode(value);
      return output;
    }).join('');
  }

  /**
   * Converts a basic code point into a digit/integer.
   * @see \`digitToBasic()\`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range \`0\` to \`base - 1\`, or \`base\` if
   * the code point does not represent a value.
   */
  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }
    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }
    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }
    return base;
  }

  /**
   * Converts a digit/integer into a basic code point.
   * @see \`basicToDigit()\`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is \`digit\`, which needs to be in the range
   * \`0\` to \`base - 1\`. If \`flag\` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if \`flag\` is non-zero and \`digit\` has no uppercase form.
   */
  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }

  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */
  function decode(input) {
    // Don't use UCS-2
    var output = [],
        inputLength = input.length,
        out,
        i = 0,
        n = initialN,
        bias = initialBias,
        basic,
        j,
        index,
        oldi,
        w,
        k,
        digit,
        t,
        /** Cached calculation results */
        baseMinusT;

    // Handle the basic code points: let \`basic\` be the number of input code
    // points before the last delimiter, or \`0\` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);
    if (basic < 0) {
      basic = 0;
    }

    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }
      output.push(input.charCodeAt(j));
    }

    // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.

    for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

      // \`index\` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into \`delta\`,
      // which gets added to \`i\`. The overflow checking is easier
      // if we increase \`i\` as we go, then subtract off its starting
      // value at the end to obtain \`delta\`.
      for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

        if (index >= inputLength) {
          error('invalid-input');
        }

        digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }

        i += digit * w;
        t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

        if (digit < t) {
          break;
        }

        baseMinusT = base - t;
        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }

        w *= baseMinusT;

      }

      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0);

      // \`i\` was supposed to wrap around from \`out\` to \`0\`,
      // incrementing \`n\` each time, so we'll fix that now:
      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }

      n += floor(i / out);
      i %= out;

      // Insert \`n\` at position \`i\` of the output
      output.splice(i++, 0, n);

    }

    return ucs2encode(output);
  }

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],
        /** \`inputLength\` will hold the number of code points in \`input\`. */
        inputLength,
        /** Cached calculation results */
        handledCPCountPlusOne,
        baseMinusT,
        qMinusT;

    // Convert the input in UCS-2 to Unicode
    input = ucs2decode(input);

    // Cache the length
    inputLength = input.length;

    // Initialize the state
    n = initialN;
    delta = 0;
    bias = initialBias;

    // Handle the basic code points
    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length;

    // \`handledCPCount\` is the number of code points that have been handled;
    // \`basicLength\` is the number of basic code points.

    // Finish the basic string - if it is not empty - with a delimiter
    if (basicLength) {
      output.push(delimiter);
    }

    // Main encoding loop:
    while (handledCPCount < inputLength) {

      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      }

      // Increase \`delta\` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow
      handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base; /* no condition */; k += base) {
            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
            if (q < t) {
              break;
            }
            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(
              stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
            );
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;

    }
    return output.join('');
  }

  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */
  function toUnicode(input) {
    return mapDomain(input, function(string) {
      return regexPunycode.test(string)
        ? decode(string.slice(4).toLowerCase())
        : string;
    });
  }

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  function toASCII(input) {
    return mapDomain(input, function(string) {
      return regexNonASCII.test(string)
        ? 'xn--' + encode(string)
        : string;
    });
  }

  /*--------------------------------------------------------------------------*/

  /** Define the public API */
  punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '1.4.1',
    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };

  /** Expose \`punycode\` */
  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:
  if (
    typeof define == 'function' &&
    typeof define.amd == 'object' &&
    define.amd
  ) {
    define('punycode', function() {
      return punycode;
    });
  } else if (freeExports && freeModule) {
    if (module.exports == freeExports) {
      // in Node.js, io.js, or RingoJS v0.8.0+
      freeModule.exports = punycode;
    } else {
      // in Narwhal or RingoJS v0.7.0-
      for (key in punycode) {
        punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
      }
    }
  } else {
    // in Rhino or a web browser
    root.punycode = punycode;
  }

  }(this));

  }).call(this,typeof global !== \\"undefined\\" ? global : typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : {})
  },{}],2:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // \\"Software\\"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  'use strict';

  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\\\\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
  };

  var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
  };

  },{}],3:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // \\"Software\\"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  'use strict';

  var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
  };

  module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
  };

  var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
  };

  function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
  }

  var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
  };

  },{}],4:[function(require,module,exports){
  'use strict';

  exports.decode = exports.parse = require('./decode');
  exports.encode = exports.stringify = require('./encode');

  },{\\"./decode\\":2,\\"./encode\\":3}],5:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // \\"Software\\"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  'use strict';

  var punycode = require('punycode');
  var util = require('./util');

  exports.parse = urlParse;
  exports.resolve = urlResolve;
  exports.resolveObject = urlResolveObject;
  exports.format = urlFormat;

  exports.Url = Url;

  function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
  }

  // Reference: RFC 3986, RFC 1808, RFC 2396

  // define these here so at least they only have to be
  // compiled once on the first module load.
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\\\\/\\\\/?(?!\\\\/)[^\\\\?\\\\s]*)(\\\\?[^\\\\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '\\"', '\`', ' ', '\\\\r', '\\\\n', '\\\\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\\\\\\\', '^', '\`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\\\\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow \\"unsafe\\" and \\"unwise\\" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

  function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
  }

  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError(\\"Parameter 'url' must be a string, not \\" + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\\\\\\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like \\"  http://foo.com  \\\\n\\"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\\\\/\\\\/[^@\\\\/]+@[^@\\\\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\\\\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of \\"domain\\".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any \\"autoEscape\\" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
  };

  // format a parsed object into a url string
  function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
  }

  Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
  };

  function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
  }

  Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
  }

  Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href=\\"\\" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, \`up\` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
  };

  Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
  };

  },{\\"./util\\":6,\\"punycode\\":1,\\"querystring\\":4}],6:[function(require,module,exports){
  'use strict';

  module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
  };

  },{}],7:[function(require,module,exports){
  module.exports = require('ajv');

  },{\\"ajv\\":9}],8:[function(require,module,exports){
  'use strict';

  var KEYWORDS = [
  'multipleOf',
  'maximum',
  'exclusiveMaximum',
  'minimum',
  'exclusiveMinimum',
  'maxLength',
  'minLength',
  'pattern',
  'additionalItems',
  'maxItems',
  'minItems',
  'uniqueItems',
  'maxProperties',
  'minProperties',
  'required',
  'additionalProperties',
  'enum',
  'format',
  'const'
  ];

  module.exports = function (metaSchema, keywordsJsonPointers) {
  for (var i=0; i<keywordsJsonPointers.length; i++) {
    metaSchema = JSON.parse(JSON.stringify(metaSchema));
    var segments = keywordsJsonPointers[i].split('/');
    var keywords = metaSchema;
    var j;
    for (j=1; j<segments.length; j++)
      keywords = keywords[segments[j]];

    for (j=0; j<KEYWORDS.length; j++) {
      var key = KEYWORDS[j];
      var schema = keywords[key];
      if (schema) {
        keywords[key] = {
          anyOf: [
            schema,
            { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#' }
          ]
        };
      }
    }
  }

  return metaSchema;
  };

  },{}],9:[function(require,module,exports){
  'use strict';

  var compileSchema = require('./compile')
  , resolve = require('./compile/resolve')
  , Cache = require('./cache')
  , SchemaObject = require('./compile/schema_obj')
  , stableStringify = require('json-stable-stringify')
  , formats = require('./compile/formats')
  , rules = require('./compile/rules')
  , $dataMetaSchema = require('./$data')
  , patternGroups = require('./patternGroups')
  , util = require('./compile/util')
  , co = require('co');

  module.exports = Ajv;

  Ajv.prototype.validate = validate;
  Ajv.prototype.compile = compile;
  Ajv.prototype.addSchema = addSchema;
  Ajv.prototype.addMetaSchema = addMetaSchema;
  Ajv.prototype.validateSchema = validateSchema;
  Ajv.prototype.getSchema = getSchema;
  Ajv.prototype.removeSchema = removeSchema;
  Ajv.prototype.addFormat = addFormat;
  Ajv.prototype.errorsText = errorsText;

  Ajv.prototype._addSchema = _addSchema;
  Ajv.prototype._compile = _compile;

  Ajv.prototype.compileAsync = require('./compile/async');
  var customKeyword = require('./keyword');
  Ajv.prototype.addKeyword = customKeyword.add;
  Ajv.prototype.getKeyword = customKeyword.get;
  Ajv.prototype.removeKeyword = customKeyword.remove;

  var errorClasses = require('./compile/error_classes');
  Ajv.ValidationError = errorClasses.Validation;
  Ajv.MissingRefError = errorClasses.MissingRef;
  Ajv.$dataMetaSchema = $dataMetaSchema;

  var META_SCHEMA_ID = 'http://json-schema.org/draft-06/schema';

  var META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes' ];
  var META_SUPPORT_DATA = ['/properties'];

  /**
  * Creates validator instance.
  * Usage: \`Ajv(opts)\`
  * @param {Object} opts optional options
  * @return {Object} ajv instance
  */
  function Ajv(opts) {
  if (!(this instanceof Ajv)) return new Ajv(opts);
  opts = this._opts = util.copy(opts) || {};
  this._schemas = {};
  this._refs = {};
  this._fragments = {};
  this._formats = formats(opts.format);
  var schemaUriFormat = this._schemaUriFormat = this._formats['uri-reference'];
  this._schemaUriFormatFunc = function (str) { return schemaUriFormat.test(str); };

  this._cache = opts.cache || new Cache;
  this._loadingSchemas = {};
  this._compilations = [];
  this.RULES = rules();
  this._getId = chooseGetId(opts);

  opts.loopRequired = opts.loopRequired || Infinity;
  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
  if (opts.serialize === undefined) opts.serialize = stableStringify;
  this._metaOpts = getMetaSchemaOptions(this);

  if (opts.formats) addInitialFormats(this);
  addDraft6MetaSchema(this);
  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
  addInitialSchemas(this);
  if (opts.patternGroups) patternGroups(this);
  }



  /**
  * Validate data using schema
  * Schema will be compiled and cached (using serialized JSON as key. [json-stable-stringify](https://github.com/substack/json-stable-stringify) is used to serialize.
  * @this   Ajv
  * @param  {String|Object} schemaKeyRef key, ref or schema object
  * @param  {Any} data to be validated
  * @return {Boolean} validation result. Errors from the last validation will be available in \`ajv.errors\` (and also in compiled schema: \`schema.errors\`).
  */
  function validate(schemaKeyRef, data) {
  var v;
  if (typeof schemaKeyRef == 'string') {
    v = this.getSchema(schemaKeyRef);
    if (!v) throw new Error('no schema with key or ref \\"' + schemaKeyRef + '\\"');
  } else {
    var schemaObj = this._addSchema(schemaKeyRef);
    v = schemaObj.validate || this._compile(schemaObj);
  }

  var valid = v(data);
  if (v.$async === true)
    return this._opts.async == '*' ? co(valid) : valid;
  this.errors = v.errors;
  return valid;
  }


  /**
  * Create validating function for passed schema.
  * @this   Ajv
  * @param  {Object} schema schema object
  * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
  * @return {Function} validating function
  */
  function compile(schema, _meta) {
  var schemaObj = this._addSchema(schema, undefined, _meta);
  return schemaObj.validate || this._compile(schemaObj);
  }


  /**
  * Adds schema to the instance.
  * @this   Ajv
  * @param {Object|Array} schema schema or array of schemas. If array is passed, \`key\` and other parameters will be ignored.
  * @param {String} key Optional schema key. Can be passed to \`validate\` method instead of schema object or id/ref. One schema per instance can have empty \`id\` and \`key\`.
  * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
  * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
  */
  function addSchema(schema, key, _skipValidation, _meta) {
  if (Array.isArray(schema)){
    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);
    return;
  }
  var id = this._getId(schema);
  if (id !== undefined && typeof id != 'string')
    throw new Error('schema id must be string');
  key = resolve.normalizeId(key || id);
  checkUnique(this, key);
  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
  }


  /**
  * Add schema that will be used to validate other schemas
  * options in META_IGNORE_OPTIONS are alway set to false
  * @this   Ajv
  * @param {Object} schema schema object
  * @param {String} key optional schema key
  * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
  */
  function addMetaSchema(schema, key, skipValidation) {
  this.addSchema(schema, key, skipValidation, true);
  }


  /**
  * Validate schema
  * @this   Ajv
  * @param {Object} schema schema to validate
  * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
  * @return {Boolean} true if schema is valid
  */
  function validateSchema(schema, throwOrLogError) {
  var $schema = schema.$schema;
  if ($schema !== undefined && typeof $schema != 'string')
    throw new Error('$schema must be a string');
  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
  if (!$schema) {
    console.warn('meta-schema not available');
    this.errors = null;
    return true;
  }
  var currentUriFormat = this._formats.uri;
  this._formats.uri = typeof currentUriFormat == 'function'
                      ? this._schemaUriFormatFunc
                      : this._schemaUriFormat;
  var valid;
  try { valid = this.validate($schema, schema); }
  finally { this._formats.uri = currentUriFormat; }
  if (!valid && throwOrLogError) {
    var message = 'schema is invalid: ' + this.errorsText();
    if (this._opts.validateSchema == 'log') console.error(message);
    else throw new Error(message);
  }
  return valid;
  }


  function defaultMeta(self) {
  var meta = self._opts.meta;
  self._opts.defaultMeta = typeof meta == 'object'
                            ? self._getId(meta) || meta
                            : self.getSchema(META_SCHEMA_ID)
                              ? META_SCHEMA_ID
                              : undefined;
  return self._opts.defaultMeta;
  }


  /**
  * Get compiled schema from the instance by \`key\` or \`ref\`.
  * @this   Ajv
  * @param  {String} keyRef \`key\` that was passed to \`addSchema\` or full schema reference (\`schema.id\` or resolved id).
  * @return {Function} schema validating function (with property \`schema\`).
  */
  function getSchema(keyRef) {
  var schemaObj = _getSchemaObj(this, keyRef);
  switch (typeof schemaObj) {
    case 'object': return schemaObj.validate || this._compile(schemaObj);
    case 'string': return this.getSchema(schemaObj);
    case 'undefined': return _getSchemaFragment(this, keyRef);
  }
  }


  function _getSchemaFragment(self, ref) {
  var res = resolve.schema.call(self, { schema: {} }, ref);
  if (res) {
    var schema = res.schema
      , root = res.root
      , baseId = res.baseId;
    var v = compileSchema.call(self, schema, root, undefined, baseId);
    self._fragments[ref] = new SchemaObject({
      ref: ref,
      fragment: true,
      schema: schema,
      root: root,
      baseId: baseId,
      validate: v
    });
    return v;
  }
  }


  function _getSchemaObj(self, keyRef) {
  keyRef = resolve.normalizeId(keyRef);
  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
  }


  /**
  * Remove cached schema(s).
  * If no parameter is passed all schemas but meta-schemas are removed.
  * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
  * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
  * @this   Ajv
  * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
  */
  function removeSchema(schemaKeyRef) {
  if (schemaKeyRef instanceof RegExp) {
    _removeAllSchemas(this, this._schemas, schemaKeyRef);
    _removeAllSchemas(this, this._refs, schemaKeyRef);
    return;
  }
  switch (typeof schemaKeyRef) {
    case 'undefined':
      _removeAllSchemas(this, this._schemas);
      _removeAllSchemas(this, this._refs);
      this._cache.clear();
      return;
    case 'string':
      var schemaObj = _getSchemaObj(this, schemaKeyRef);
      if (schemaObj) this._cache.del(schemaObj.cacheKey);
      delete this._schemas[schemaKeyRef];
      delete this._refs[schemaKeyRef];
      return;
    case 'object':
      var serialize = this._opts.serialize;
      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
      this._cache.del(cacheKey);
      var id = this._getId(schemaKeyRef);
      if (id) {
        id = resolve.normalizeId(id);
        delete this._schemas[id];
        delete this._refs[id];
      }
  }
  }


  function _removeAllSchemas(self, schemas, regex) {
  for (var keyRef in schemas) {
    var schemaObj = schemas[keyRef];
    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
      self._cache.del(schemaObj.cacheKey);
      delete schemas[keyRef];
    }
  }
  }


  /* @this   Ajv */
  function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
  if (typeof schema != 'object' && typeof schema != 'boolean')
    throw new Error('schema should be object or boolean');
  var serialize = this._opts.serialize;
  var cacheKey = serialize ? serialize(schema) : schema;
  var cached = this._cache.get(cacheKey);
  if (cached) return cached;

  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;

  var id = resolve.normalizeId(this._getId(schema));
  if (id && shouldAddSchema) checkUnique(this, id);

  var willValidate = this._opts.validateSchema !== false && !skipValidation;
  var recursiveMeta;
  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
    this.validateSchema(schema, true);

  var localRefs = resolve.ids.call(this, schema);

  var schemaObj = new SchemaObject({
    id: id,
    schema: schema,
    localRefs: localRefs,
    cacheKey: cacheKey,
    meta: meta
  });

  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;
  this._cache.put(cacheKey, schemaObj);

  if (willValidate && recursiveMeta) this.validateSchema(schema, true);

  return schemaObj;
  }


  /* @this   Ajv */
  function _compile(schemaObj, root) {
  if (schemaObj.compiling) {
    schemaObj.validate = callValidate;
    callValidate.schema = schemaObj.schema;
    callValidate.errors = null;
    callValidate.root = root ? root : callValidate;
    if (schemaObj.schema.$async === true)
      callValidate.$async = true;
    return callValidate;
  }
  schemaObj.compiling = true;

  var currentOpts;
  if (schemaObj.meta) {
    currentOpts = this._opts;
    this._opts = this._metaOpts;
  }

  var v;
  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }
  finally {
    schemaObj.compiling = false;
    if (schemaObj.meta) this._opts = currentOpts;
  }

  schemaObj.validate = v;
  schemaObj.refs = v.refs;
  schemaObj.refVal = v.refVal;
  schemaObj.root = v.root;
  return v;


  function callValidate() {
    var _validate = schemaObj.validate;
    var result = _validate.apply(null, arguments);
    callValidate.errors = _validate.errors;
    return result;
  }
  }


  function chooseGetId(opts) {
  switch (opts.schemaId) {
    case '$id': return _get$Id;
    case 'id': return _getId;
    default: return _get$IdOrId;
  }
  }


  function _getId(schema) {
  if (schema.$id) console.warn('schema $id ignored', schema.$id);
  return schema.id;
  }


  function _get$Id(schema) {
  if (schema.id) console.warn('schema id ignored', schema.id);
  return schema.$id;
  }


  function _get$IdOrId(schema) {
  if (schema.$id && schema.id && schema.$id != schema.id)
    throw new Error('schema $id is different from id');
  return schema.$id || schema.id;
  }


  /**
  * Convert array of error message objects to string
  * @this   Ajv
  * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
  * @param  {Object} options optional options with properties \`separator\` and \`dataVar\`.
  * @return {String} human readable string with all errors descriptions
  */
  function errorsText(errors, options) {
  errors = errors || this.errors;
  if (!errors) return 'No errors';
  options = options || {};
  var separator = options.separator === undefined ? ', ' : options.separator;
  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

  var text = '';
  for (var i=0; i<errors.length; i++) {
    var e = errors[i];
    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
  }
  return text.slice(0, -separator.length);
  }


  /**
  * Add custom format
  * @this   Ajv
  * @param {String} name format name
  * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
  */
  function addFormat(name, format) {
  if (typeof format == 'string') format = new RegExp(format);
  this._formats[name] = format;
  }


  function addDraft6MetaSchema(self) {
  var $dataSchema;
  if (self._opts.$data) {
    $dataSchema = require('./refs/$data.json');
    self.addMetaSchema($dataSchema, $dataSchema.$id, true);
  }
  if (self._opts.meta === false) return;
  var metaSchema = require('./refs/json-schema-draft-06.json');
  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
  }


  function addInitialSchemas(self) {
  var optsSchemas = self._opts.schemas;
  if (!optsSchemas) return;
  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);
  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
  }


  function addInitialFormats(self) {
  for (var name in self._opts.formats) {
    var format = self._opts.formats[name];
    self.addFormat(name, format);
  }
  }


  function checkUnique(self, id) {
  if (self._schemas[id] || self._refs[id])
    throw new Error('schema with key or id \\"' + id + '\\" already exists');
  }


  function getMetaSchemaOptions(self) {
  var metaOpts = util.copy(self._opts);
  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)
    delete metaOpts[META_IGNORE_OPTIONS[i]];
  return metaOpts;
  }

  },{\\"./$data\\":8,\\"./cache\\":10,\\"./compile\\":15,\\"./compile/async\\":12,\\"./compile/error_classes\\":13,\\"./compile/formats\\":14,\\"./compile/resolve\\":16,\\"./compile/rules\\":17,\\"./compile/schema_obj\\":18,\\"./compile/util\\":20,\\"./keyword\\":44,\\"./patternGroups\\":45,\\"./refs/$data.json\\":46,\\"./refs/json-schema-draft-06.json\\":47,\\"co\\":48,\\"json-stable-stringify\\":51}],10:[function(require,module,exports){
  'use strict';


  var Cache = module.exports = function Cache() {
  this._cache = {};
  };


  Cache.prototype.put = function Cache_put(key, value) {
  this._cache[key] = value;
  };


  Cache.prototype.get = function Cache_get(key) {
  return this._cache[key];
  };


  Cache.prototype.del = function Cache_del(key) {
  delete this._cache[key];
  };


  Cache.prototype.clear = function Cache_clear() {
  this._cache = {};
  };

  },{}],11:[function(require,module,exports){
  'use strict';

  //all requires must be explicit because browserify won't work with dynamic requires
  module.exports = {
  '$ref': require('../dotjs/ref'),
  allOf: require('../dotjs/allOf'),
  anyOf: require('../dotjs/anyOf'),
  const: require('../dotjs/const'),
  contains: require('../dotjs/contains'),
  dependencies: require('../dotjs/dependencies'),
  'enum': require('../dotjs/enum'),
  format: require('../dotjs/format'),
  items: require('../dotjs/items'),
  maximum: require('../dotjs/_limit'),
  minimum: require('../dotjs/_limit'),
  maxItems: require('../dotjs/_limitItems'),
  minItems: require('../dotjs/_limitItems'),
  maxLength: require('../dotjs/_limitLength'),
  minLength: require('../dotjs/_limitLength'),
  maxProperties: require('../dotjs/_limitProperties'),
  minProperties: require('../dotjs/_limitProperties'),
  multipleOf: require('../dotjs/multipleOf'),
  not: require('../dotjs/not'),
  oneOf: require('../dotjs/oneOf'),
  pattern: require('../dotjs/pattern'),
  properties: require('../dotjs/properties'),
  propertyNames: require('../dotjs/propertyNames'),
  required: require('../dotjs/required'),
  uniqueItems: require('../dotjs/uniqueItems'),
  validate: require('../dotjs/validate')
  };

  },{\\"../dotjs/_limit\\":21,\\"../dotjs/_limitItems\\":22,\\"../dotjs/_limitLength\\":23,\\"../dotjs/_limitProperties\\":24,\\"../dotjs/allOf\\":25,\\"../dotjs/anyOf\\":26,\\"../dotjs/const\\":27,\\"../dotjs/contains\\":28,\\"../dotjs/dependencies\\":30,\\"../dotjs/enum\\":31,\\"../dotjs/format\\":32,\\"../dotjs/items\\":33,\\"../dotjs/multipleOf\\":34,\\"../dotjs/not\\":35,\\"../dotjs/oneOf\\":36,\\"../dotjs/pattern\\":37,\\"../dotjs/properties\\":38,\\"../dotjs/propertyNames\\":39,\\"../dotjs/ref\\":40,\\"../dotjs/required\\":41,\\"../dotjs/uniqueItems\\":42,\\"../dotjs/validate\\":43}],12:[function(require,module,exports){
  'use strict';

  var MissingRefError = require('./error_classes').MissingRef;

  module.exports = compileAsync;


  /**
  * Creates validating function for passed schema with asynchronous loading of missing schemas.
  * \`loadSchema\` option should be a function that accepts schema uri and returns promise that resolves with the schema.
  * @this  Ajv
  * @param {Object}   schema schema object
  * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
  * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
  * @return {Promise} promise that resolves with a validating function.
  */
  function compileAsync(schema, meta, callback) {
  /* eslint no-shadow: 0 */
  /* global Promise */
  /* jshint validthis: true */
  var self = this;
  if (typeof this._opts.loadSchema != 'function')
    throw new Error('options.loadSchema should be a function');

  if (typeof meta == 'function') {
    callback = meta;
    meta = undefined;
  }

  var p = loadMetaSchemaOf(schema).then(function () {
    var schemaObj = self._addSchema(schema, undefined, meta);
    return schemaObj.validate || _compileAsync(schemaObj);
  });

  if (callback) {
    p.then(
      function(v) { callback(null, v); },
      callback
    );
  }

  return p;


  function loadMetaSchemaOf(sch) {
    var $schema = sch.$schema;
    return $schema && !self.getSchema($schema)
            ? compileAsync.call(self, { $ref: $schema }, true)
            : Promise.resolve();
  }


  function _compileAsync(schemaObj) {
    try { return self._compile(schemaObj); }
    catch(e) {
      if (e instanceof MissingRefError) return loadMissingSchema(e);
      throw e;
    }


    function loadMissingSchema(e) {
      var ref = e.missingSchema;
      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');

      var schemaPromise = self._loadingSchemas[ref];
      if (!schemaPromise) {
        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
        schemaPromise.then(removePromise, removePromise);
      }

      return schemaPromise.then(function (sch) {
        if (!added(ref)) {
          return loadMetaSchemaOf(sch).then(function () {
            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
          });
        }
      }).then(function() {
        return _compileAsync(schemaObj);
      });

      function removePromise() {
        delete self._loadingSchemas[ref];
      }

      function added(ref) {
        return self._refs[ref] || self._schemas[ref];
      }
    }
  }
  }

  },{\\"./error_classes\\":13}],13:[function(require,module,exports){
  'use strict';

  var resolve = require('./resolve');

  module.exports = {
  Validation: errorSubclass(ValidationError),
  MissingRef: errorSubclass(MissingRefError)
  };


  function ValidationError(errors) {
  this.message = 'validation failed';
  this.errors = errors;
  this.ajv = this.validation = true;
  }


  MissingRefError.message = function (baseId, ref) {
  return 'can\\\\'t resolve reference ' + ref + ' from id ' + baseId;
  };


  function MissingRefError(baseId, ref, message) {
  this.message = message || MissingRefError.message(baseId, ref);
  this.missingRef = resolve.url(baseId, ref);
  this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));
  }


  function errorSubclass(Subclass) {
  Subclass.prototype = Object.create(Error.prototype);
  Subclass.prototype.constructor = Subclass;
  return Subclass;
  }

  },{\\"./resolve\\":16}],14:[function(require,module,exports){
  'use strict';

  var util = require('./util');

  var DATE = /^\\\\d\\\\d\\\\d\\\\d-(\\\\d\\\\d)-(\\\\d\\\\d)$/;
  var DAYS = [0,31,29,31,30,31,30,31,31,30,31,30,31];
  var TIME = /^(\\\\d\\\\d):(\\\\d\\\\d):(\\\\d\\\\d)(\\\\.\\\\d+)?(z|[+-]\\\\d\\\\d:\\\\d\\\\d)?$/i;
  var HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
  var URI = /^(?:[a-z][a-z0-9+\\\\-.]*:)(?:\\\\/?\\\\/(?:(?:[a-z0-9\\\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\\\.[a-z0-9\\\\-._~!$&'()*+,;=:]+)\\\\]|(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)|(?:[a-z0-9\\\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\\\d*)?(?:\\\\/(?:[a-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\\\/(?:(?:[a-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\\\/(?:[a-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\\\/(?:[a-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\\\?(?:[a-z0-9\\\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  var URIREF = /^(?:[a-z][a-z0-9+\\\\-.]*:)?(?:\\\\/?\\\\/(?:(?:[a-z0-9\\\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\\\.[a-z0-9\\\\-._~!$&'()*+,;=:]+)\\\\]|(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)|(?:[a-z0-9\\\\-._~!$&'\\"()*+,;=]|%[0-9a-f]{2})*)(?::\\\\d*)?(?:\\\\/(?:[a-z0-9\\\\-._~!$&'\\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\\\/(?:(?:[a-z0-9\\\\-._~!$&'\\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\\\/(?:[a-z0-9\\\\-._~!$&'\\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\\\-._~!$&'\\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\\\/(?:[a-z0-9\\\\-._~!$&'\\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\\\?(?:[a-z0-9\\\\-._~!$&'\\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\\\-._~!$&'\\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  // uri-template: https://tools.ietf.org/html/rfc6570
  var URITEMPLATE = /^(?:(?:[^\\\\x00-\\\\x20\\"'<>%\\\\\\\\^\`{|}]|%[0-9a-f]{2})|\\\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\\\*)?)*\\\\})*$/i;
  // For the source: https://gist.github.com/dperini/729294
  // For test cases: https://mathiasbynens.be/demo/url-regex
  // @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
  // var URL = /^(?:(?:https?|ftp):\\\\/\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!10(?:\\\\.\\\\d{1,3}){3})(?!127(?:\\\\.\\\\d{1,3}){3})(?!169\\\\.254(?:\\\\.\\\\d{1,3}){2})(?!192\\\\.168(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u{00a1}-\\\\u{ffff}0-9]+-?)*[a-z\\\\u{00a1}-\\\\u{ffff}0-9]+)(?:\\\\.(?:[a-z\\\\u{00a1}-\\\\u{ffff}0-9]+-?)*[a-z\\\\u{00a1}-\\\\u{ffff}0-9]+)*(?:\\\\.(?:[a-z\\\\u{00a1}-\\\\u{ffff}]{2,})))(?::\\\\d{2,5})?(?:\\\\/[^\\\\s]*)?$/iu;
  var URL = /^(?:(?:http[s\\\\u017F]?|ftp):\\\\/\\\\/)(?:(?:[\\\\0-\\\\x08\\\\x0E-\\\\x1F!-\\\\x9F\\\\xA1-\\\\u167F\\\\u1681-\\\\u1FFF\\\\u200B-\\\\u2027\\\\u202A-\\\\u202E\\\\u2030-\\\\u205E\\\\u2060-\\\\u2FFF\\\\u3001-\\\\uD7FF\\\\uE000-\\\\uFEFE\\\\uFF00-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+(?::(?:[\\\\0-\\\\x08\\\\x0E-\\\\x1F!-\\\\x9F\\\\xA1-\\\\u167F\\\\u1681-\\\\u1FFF\\\\u200B-\\\\u2027\\\\u202A-\\\\u202E\\\\u2030-\\\\u205E\\\\u2060-\\\\u2FFF\\\\u3001-\\\\uD7FF\\\\uE000-\\\\uFEFE\\\\uFF00-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])*)?@)?(?:(?!10(?:\\\\.[0-9]{1,3}){3})(?!127(?:\\\\.[0-9]{1,3}){3})(?!169\\\\.254(?:\\\\.[0-9]{1,3}){2})(?!192\\\\.168(?:\\\\.[0-9]{1,3}){2})(?!172\\\\.(?:1[6-9]|2[0-9]|3[01])(?:\\\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+-?)*(?:[0-9KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+)(?:\\\\.(?:(?:[0-9KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+-?)*(?:[0-9KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+)*(?:\\\\.(?:(?:[KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\\\/(?:[\\\\0-\\\\x08\\\\x0E-\\\\x1F!-\\\\x9F\\\\xA1-\\\\u167F\\\\u1681-\\\\u1FFF\\\\u200B-\\\\u2027\\\\u202A-\\\\u202E\\\\u2030-\\\\u205E\\\\u2060-\\\\u2FFF\\\\u3001-\\\\uD7FF\\\\uE000-\\\\uFEFE\\\\uFF00-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])*)?$/i;
  var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
  var JSON_POINTER = /^(?:\\\\/(?:[^~/]|~0|~1)*)*$|^#(?:\\\\/(?:[a-z0-9_\\\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
  var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\\\\/(?:[^~/]|~0|~1)*)*)$/;


  module.exports = formats;

  function formats(mode) {
  mode = mode == 'full' ? 'full' : 'fast';
  return util.copy(formats[mode]);
  }


  formats.fast = {
  // date: http://tools.ietf.org/html/rfc3339#section-5.6
  date: /^\\\\d\\\\d\\\\d\\\\d-[0-1]\\\\d-[0-3]\\\\d$/,
  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
  time: /^[0-2]\\\\d:[0-5]\\\\d:[0-5]\\\\d(?:\\\\.\\\\d+)?(?:z|[+-]\\\\d\\\\d:\\\\d\\\\d)?$/i,
  'date-time': /^\\\\d\\\\d\\\\d\\\\d-[0-1]\\\\d-[0-3]\\\\d[t\\\\s][0-2]\\\\d:[0-5]\\\\d:[0-5]\\\\d(?:\\\\.\\\\d+)?(?:z|[+-]\\\\d\\\\d:\\\\d\\\\d)$/i,
  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
  uri: /^(?:[a-z][a-z0-9+-.]*)(?::|\\\\/)\\\\/?[^\\\\s]*$/i,
  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\\\\/\\\\/)?[^\\\\s]*$/i,
  'uri-template': URITEMPLATE,
  url: URL,
  // email (sources from jsen validator):
  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
  email: /^[a-z0-9.!#$%&'*+/=?^_\`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
  hostname: HOSTNAME,
  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
  ipv4: /^(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)$/,
  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
  ipv6: /^\\\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:)))(?:%.+)?\\\\s*$/i,
  regex: regex,
  // uuid: http://tools.ietf.org/html/rfc4122
  uuid: UUID,
  // JSON-pointer: https://tools.ietf.org/html/rfc6901
  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
  'json-pointer': JSON_POINTER,
  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
  'relative-json-pointer': RELATIVE_JSON_POINTER
  };


  formats.full = {
  date: date,
  time: time,
  'date-time': date_time,
  uri: uri,
  'uri-reference': URIREF,
  'uri-template': URITEMPLATE,
  url: URL,
  email: /^[a-z0-9!#$%&'*+/=?^_\`{|}~-]+(?:\\\\.[a-z0-9!#$%&''*+/=?^_\`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
  hostname: hostname,
  ipv4: /^(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)$/,
  ipv6: /^\\\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:)))(?:%.+)?\\\\s*$/i,
  regex: regex,
  uuid: UUID,
  'json-pointer': JSON_POINTER,
  'relative-json-pointer': RELATIVE_JSON_POINTER
  };


  function date(str) {
  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
  var matches = str.match(DATE);
  if (!matches) return false;

  var month = +matches[1];
  var day = +matches[2];
  return month >= 1 && month <= 12 && day >= 1 && day <= DAYS[month];
  }


  function time(str, full) {
  var matches = str.match(TIME);
  if (!matches) return false;

  var hour = matches[1];
  var minute = matches[2];
  var second = matches[3];
  var timeZone = matches[5];
  return hour <= 23 && minute <= 59 && second <= 59 && (!full || timeZone);
  }


  var DATE_TIME_SEPARATOR = /t|\\\\s/i;
  function date_time(str) {
  // http://tools.ietf.org/html/rfc3339#section-5.6
  var dateTime = str.split(DATE_TIME_SEPARATOR);
  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
  }


  function hostname(str) {
  // https://tools.ietf.org/html/rfc1034#section-3.5
  // https://tools.ietf.org/html/rfc1123#section-2
  return str.length <= 255 && HOSTNAME.test(str);
  }


  var NOT_URI_FRAGMENT = /\\\\/|:/;
  function uri(str) {
  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \\".\\"
  return NOT_URI_FRAGMENT.test(str) && URI.test(str);
  }


  var Z_ANCHOR = /[^\\\\\\\\]\\\\\\\\Z/;
  function regex(str) {
  if (Z_ANCHOR.test(str)) return false;
  try {
    new RegExp(str);
    return true;
  } catch(e) {
    return false;
  }
  }

  },{\\"./util\\":20}],15:[function(require,module,exports){
  'use strict';

  var resolve = require('./resolve')
  , util = require('./util')
  , errorClasses = require('./error_classes')
  , stableStringify = require('json-stable-stringify');

  var validateGenerator = require('../dotjs/validate');

  /**
  * Functions below are used inside compiled validations function
  */

  var co = require('co');
  var ucs2length = util.ucs2length;
  var equal = require('fast-deep-equal');

  // this error is thrown by async schemas to return validation errors via exception
  var ValidationError = errorClasses.Validation;

  module.exports = compile;


  /**
  * Compiles schema to validation function
  * @this   Ajv
  * @param  {Object} schema schema object
  * @param  {Object} root object with information about the root schema for this schema
  * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
  * @param  {String} baseId base ID for IDs in the schema
  * @return {Function} validation function
  */
  function compile(schema, root, localRefs, baseId) {
  /* jshint validthis: true, evil: true */
  /* eslint no-shadow: 0 */
  var self = this
    , opts = this._opts
    , refVal = [ undefined ]
    , refs = {}
    , patterns = []
    , patternsHash = {}
    , defaults = []
    , defaultsHash = {}
    , customRules = [];

  root = root || { schema: schema, refVal: refVal, refs: refs };

  var c = checkCompiling.call(this, schema, root, baseId);
  var compilation = this._compilations[c.index];
  if (c.compiling) return (compilation.callValidate = callValidate);

  var formats = this._formats;
  var RULES = this.RULES;

  try {
    var v = localCompile(schema, root, localRefs, baseId);
    compilation.validate = v;
    var cv = compilation.callValidate;
    if (cv) {
      cv.schema = v.schema;
      cv.errors = null;
      cv.refs = v.refs;
      cv.refVal = v.refVal;
      cv.root = v.root;
      cv.$async = v.$async;
      if (opts.sourceCode) cv.source = v.source;
    }
    return v;
  } finally {
    endCompiling.call(this, schema, root, baseId);
  }

  function callValidate() {
    var validate = compilation.validate;
    var result = validate.apply(null, arguments);
    callValidate.errors = validate.errors;
    return result;
  }

  function localCompile(_schema, _root, localRefs, baseId) {
    var isRoot = !_root || (_root && _root.schema == _schema);
    if (_root.schema != root.schema)
      return compile.call(self, _schema, _root, localRefs, baseId);

    var $async = _schema.$async === true;

    var sourceCode = validateGenerator({
      isTop: true,
      schema: _schema,
      isRoot: isRoot,
      baseId: baseId,
      root: _root,
      schemaPath: '',
      errSchemaPath: '#',
      errorPath: '\\"\\"',
      MissingRefError: errorClasses.MissingRef,
      RULES: RULES,
      validate: validateGenerator,
      util: util,
      resolve: resolve,
      resolveRef: resolveRef,
      usePattern: usePattern,
      useDefault: useDefault,
      useCustomRule: useCustomRule,
      opts: opts,
      formats: formats,
      self: self
    });

    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)
                   + vars(defaults, defaultCode) + vars(customRules, customRuleCode)
                   + sourceCode;

    if (opts.processCode) sourceCode = opts.processCode(sourceCode);
    // console.log('\\\\n\\\\n\\\\n *** \\\\n', JSON.stringify(sourceCode));
    var validate;
    try {
      var makeValidate = new Function(
        'self',
        'RULES',
        'formats',
        'root',
        'refVal',
        'defaults',
        'customRules',
        'co',
        'equal',
        'ucs2length',
        'ValidationError',
        sourceCode
      );

      validate = makeValidate(
        self,
        RULES,
        formats,
        root,
        refVal,
        defaults,
        customRules,
        co,
        equal,
        ucs2length,
        ValidationError
      );

      refVal[0] = validate;
    } catch(e) {
      console.error('Error compiling schema, function code:', sourceCode);
      throw e;
    }

    validate.schema = _schema;
    validate.errors = null;
    validate.refs = refs;
    validate.refVal = refVal;
    validate.root = isRoot ? validate : _root;
    if ($async) validate.$async = true;
    if (opts.sourceCode === true) {
      validate.source = {
        code: sourceCode,
        patterns: patterns,
        defaults: defaults
      };
    }

    return validate;
  }

  function resolveRef(baseId, ref, isRoot) {
    ref = resolve.url(baseId, ref);
    var refIndex = refs[ref];
    var _refVal, refCode;
    if (refIndex !== undefined) {
      _refVal = refVal[refIndex];
      refCode = 'refVal[' + refIndex + ']';
      return resolvedRef(_refVal, refCode);
    }
    if (!isRoot && root.refs) {
      var rootRefId = root.refs[ref];
      if (rootRefId !== undefined) {
        _refVal = root.refVal[rootRefId];
        refCode = addLocalRef(ref, _refVal);
        return resolvedRef(_refVal, refCode);
      }
    }

    refCode = addLocalRef(ref);
    var v = resolve.call(self, localCompile, root, ref);
    if (v === undefined) {
      var localSchema = localRefs && localRefs[ref];
      if (localSchema) {
        v = resolve.inlineRef(localSchema, opts.inlineRefs)
            ? localSchema
            : compile.call(self, localSchema, root, localRefs, baseId);
      }
    }

    if (v === undefined) {
      removeLocalRef(ref);
    } else {
      replaceLocalRef(ref, v);
      return resolvedRef(v, refCode);
    }
  }

  function addLocalRef(ref, v) {
    var refId = refVal.length;
    refVal[refId] = v;
    refs[ref] = refId;
    return 'refVal' + refId;
  }

  function removeLocalRef(ref) {
    delete refs[ref];
  }

  function replaceLocalRef(ref, v) {
    var refId = refs[ref];
    refVal[refId] = v;
  }

  function resolvedRef(refVal, code) {
    return typeof refVal == 'object' || typeof refVal == 'boolean'
            ? { code: code, schema: refVal, inline: true }
            : { code: code, $async: refVal && refVal.$async };
  }

  function usePattern(regexStr) {
    var index = patternsHash[regexStr];
    if (index === undefined) {
      index = patternsHash[regexStr] = patterns.length;
      patterns[index] = regexStr;
    }
    return 'pattern' + index;
  }

  function useDefault(value) {
    switch (typeof value) {
      case 'boolean':
      case 'number':
        return '' + value;
      case 'string':
        return util.toQuotedString(value);
      case 'object':
        if (value === null) return 'null';
        var valueStr = stableStringify(value);
        var index = defaultsHash[valueStr];
        if (index === undefined) {
          index = defaultsHash[valueStr] = defaults.length;
          defaults[index] = value;
        }
        return 'default' + index;
    }
  }

  function useCustomRule(rule, schema, parentSchema, it) {
    var validateSchema = rule.definition.validateSchema;
    if (validateSchema && self._opts.validateSchema !== false) {
      var valid = validateSchema(schema);
      if (!valid) {
        var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
        if (self._opts.validateSchema == 'log') console.error(message);
        else throw new Error(message);
      }
    }

    var compile = rule.definition.compile
      , inline = rule.definition.inline
      , macro = rule.definition.macro;

    var validate;
    if (compile) {
      validate = compile.call(self, schema, parentSchema, it);
    } else if (macro) {
      validate = macro.call(self, schema, parentSchema, it);
      if (opts.validateSchema !== false) self.validateSchema(validate, true);
    } else if (inline) {
      validate = inline.call(self, it, rule.keyword, schema, parentSchema);
    } else {
      validate = rule.definition.validate;
      if (!validate) return;
    }

    if (validate === undefined)
      throw new Error('custom keyword \\"' + rule.keyword + '\\"failed to compile');

    var index = customRules.length;
    customRules[index] = validate;

    return {
      code: 'customRule' + index,
      validate: validate
    };
  }
  }


  /**
  * Checks if the schema is currently compiled
  * @this   Ajv
  * @param  {Object} schema schema to compile
  * @param  {Object} root root object
  * @param  {String} baseId base schema ID
  * @return {Object} object with properties \\"index\\" (compilation index) and \\"compiling\\" (boolean)
  */
  function checkCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var index = compIndex.call(this, schema, root, baseId);
  if (index >= 0) return { index: index, compiling: true };
  index = this._compilations.length;
  this._compilations[index] = {
    schema: schema,
    root: root,
    baseId: baseId
  };
  return { index: index, compiling: false };
  }


  /**
  * Removes the schema from the currently compiled list
  * @this   Ajv
  * @param  {Object} schema schema to compile
  * @param  {Object} root root object
  * @param  {String} baseId base schema ID
  */
  function endCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var i = compIndex.call(this, schema, root, baseId);
  if (i >= 0) this._compilations.splice(i, 1);
  }


  /**
  * Index of schema compilation in the currently compiled list
  * @this   Ajv
  * @param  {Object} schema schema to compile
  * @param  {Object} root root object
  * @param  {String} baseId base schema ID
  * @return {Integer} compilation index
  */
  function compIndex(schema, root, baseId) {
  /* jshint validthis: true */
  for (var i=0; i<this._compilations.length; i++) {
    var c = this._compilations[i];
    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
  }
  return -1;
  }


  function patternCode(i, patterns) {
  return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
  }


  function defaultCode(i) {
  return 'var default' + i + ' = defaults[' + i + '];';
  }


  function refValCode(i, refVal) {
  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
  }


  function customRuleCode(i) {
  return 'var customRule' + i + ' = customRules[' + i + '];';
  }


  function vars(arr, statement) {
  if (!arr.length) return '';
  var code = '';
  for (var i=0; i<arr.length; i++)
    code += statement(i, arr);
  return code;
  }

  },{\\"../dotjs/validate\\":43,\\"./error_classes\\":13,\\"./resolve\\":16,\\"./util\\":20,\\"co\\":48,\\"fast-deep-equal\\":49,\\"json-stable-stringify\\":51}],16:[function(require,module,exports){
  'use strict';

  var url = require('url')
  , equal = require('fast-deep-equal')
  , util = require('./util')
  , SchemaObject = require('./schema_obj')
  , traverse = require('json-schema-traverse');

  module.exports = resolve;

  resolve.normalizeId = normalizeId;
  resolve.fullPath = getFullPath;
  resolve.url = resolveUrl;
  resolve.ids = resolveIds;
  resolve.inlineRef = inlineRef;
  resolve.schema = resolveSchema;

  /**
  * [resolve and compile the references ($ref)]
  * @this   Ajv
  * @param  {Function} compile reference to schema compilation funciton (localCompile)
  * @param  {Object} root object with information about the root schema for the current schema
  * @param  {String} ref reference to resolve
  * @return {Object|Function} schema object (if the schema can be inlined) or validation function
  */
  function resolve(compile, root, ref) {
  /* jshint validthis: true */
  var refVal = this._refs[ref];
  if (typeof refVal == 'string') {
    if (this._refs[refVal]) refVal = this._refs[refVal];
    else return resolve.call(this, compile, root, refVal);
  }

  refVal = refVal || this._schemas[ref];
  if (refVal instanceof SchemaObject) {
    return inlineRef(refVal.schema, this._opts.inlineRefs)
            ? refVal.schema
            : refVal.validate || this._compile(refVal);
  }

  var res = resolveSchema.call(this, root, ref);
  var schema, v, baseId;
  if (res) {
    schema = res.schema;
    root = res.root;
    baseId = res.baseId;
  }

  if (schema instanceof SchemaObject) {
    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
  } else if (schema !== undefined) {
    v = inlineRef(schema, this._opts.inlineRefs)
        ? schema
        : compile.call(this, schema, root, undefined, baseId);
  }

  return v;
  }


  /**
  * Resolve schema, its root and baseId
  * @this Ajv
  * @param  {Object} root root object with properties schema, refVal, refs
  * @param  {String} ref  reference to resolve
  * @return {Object} object with properties schema, root, baseId
  */
  function resolveSchema(root, ref) {
  /* jshint validthis: true */
  var p = url.parse(ref, false, true)
    , refPath = _getFullPath(p)
    , baseId = getFullPath(this._getId(root.schema));
  if (refPath !== baseId) {
    var id = normalizeId(refPath);
    var refVal = this._refs[id];
    if (typeof refVal == 'string') {
      return resolveRecursive.call(this, root, refVal, p);
    } else if (refVal instanceof SchemaObject) {
      if (!refVal.validate) this._compile(refVal);
      root = refVal;
    } else {
      refVal = this._schemas[id];
      if (refVal instanceof SchemaObject) {
        if (!refVal.validate) this._compile(refVal);
        if (id == normalizeId(ref))
          return { schema: refVal, root: root, baseId: baseId };
        root = refVal;
      } else {
        return;
      }
    }
    if (!root.schema) return;
    baseId = getFullPath(this._getId(root.schema));
  }
  return getJsonPointer.call(this, p, baseId, root.schema, root);
  }


  /* @this Ajv */
  function resolveRecursive(root, ref, parsedRef) {
  /* jshint validthis: true */
  var res = resolveSchema.call(this, root, ref);
  if (res) {
    var schema = res.schema;
    var baseId = res.baseId;
    root = res.root;
    var id = this._getId(schema);
    if (id) baseId = resolveUrl(baseId, id);
    return getJsonPointer.call(this, parsedRef, baseId, schema, root);
  }
  }


  var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
  /* @this Ajv */
  function getJsonPointer(parsedRef, baseId, schema, root) {
  /* jshint validthis: true */
  parsedRef.hash = parsedRef.hash || '';
  if (parsedRef.hash.slice(0,2) != '#/') return;
  var parts = parsedRef.hash.split('/');

  for (var i = 1; i < parts.length; i++) {
    var part = parts[i];
    if (part) {
      part = util.unescapeFragment(part);
      schema = schema[part];
      if (schema === undefined) break;
      var id;
      if (!PREVENT_SCOPE_CHANGE[part]) {
        id = this._getId(schema);
        if (id) baseId = resolveUrl(baseId, id);
        if (schema.$ref) {
          var $ref = resolveUrl(baseId, schema.$ref);
          var res = resolveSchema.call(this, root, $ref);
          if (res) {
            schema = res.schema;
            root = res.root;
            baseId = res.baseId;
          }
        }
      }
    }
  }
  if (schema !== undefined && schema !== root.schema)
    return { schema: schema, root: root, baseId: baseId };
  }


  var SIMPLE_INLINED = util.toHash([
  'type', 'format', 'pattern',
  'maxLength', 'minLength',
  'maxProperties', 'minProperties',
  'maxItems', 'minItems',
  'maximum', 'minimum',
  'uniqueItems', 'multipleOf',
  'required', 'enum'
  ]);
  function inlineRef(schema, limit) {
  if (limit === false) return false;
  if (limit === undefined || limit === true) return checkNoRef(schema);
  else if (limit) return countKeys(schema) <= limit;
  }


  function checkNoRef(schema) {
  var item;
  if (Array.isArray(schema)) {
    for (var i=0; i<schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return false;
      item = schema[key];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  }
  return true;
  }


  function countKeys(schema) {
  var count = 0, item;
  if (Array.isArray(schema)) {
    for (var i=0; i<schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object') count += countKeys(item);
      if (count == Infinity) return Infinity;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return Infinity;
      if (SIMPLE_INLINED[key]) {
        count++;
      } else {
        item = schema[key];
        if (typeof item == 'object') count += countKeys(item) + 1;
        if (count == Infinity) return Infinity;
      }
    }
  }
  return count;
  }


  function getFullPath(id, normalize) {
  if (normalize !== false) id = normalizeId(id);
  var p = url.parse(id, false, true);
  return _getFullPath(p);
  }


  function _getFullPath(p) {
  var protocolSeparator = p.protocol || p.href.slice(0,2) == '//' ? '//' : '';
  return (p.protocol||'') + protocolSeparator + (p.host||'') + (p.path||'')  + '#';
  }


  var TRAILING_SLASH_HASH = /#\\\\/?$/;
  function normalizeId(id) {
  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
  }


  function resolveUrl(baseId, id) {
  id = normalizeId(id);
  return url.resolve(baseId, id);
  }


  /* @this Ajv */
  function resolveIds(schema) {
  var schemaId = normalizeId(this._getId(schema));
  var baseIds = {'': schemaId};
  var fullPaths = {'': getFullPath(schemaId, false)};
  var localRefs = {};
  var self = this;

  traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (jsonPtr === '') return;
    var id = self._getId(sch);
    var baseId = baseIds[parentJsonPtr];
    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
    if (keyIndex !== undefined)
      fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));

    if (typeof id == 'string') {
      id = baseId = normalizeId(baseId ? url.resolve(baseId, id) : id);

      var refVal = self._refs[id];
      if (typeof refVal == 'string') refVal = self._refs[refVal];
      if (refVal && refVal.schema) {
        if (!equal(sch, refVal.schema))
          throw new Error('id \\"' + id + '\\" resolves to more than one schema');
      } else if (id != normalizeId(fullPath)) {
        if (id[0] == '#') {
          if (localRefs[id] && !equal(sch, localRefs[id]))
            throw new Error('id \\"' + id + '\\" resolves to more than one schema');
          localRefs[id] = sch;
        } else {
          self._refs[id] = fullPath;
        }
      }
    }
    baseIds[jsonPtr] = baseId;
    fullPaths[jsonPtr] = fullPath;
  });

  return localRefs;
  }

  },{\\"./schema_obj\\":18,\\"./util\\":20,\\"fast-deep-equal\\":49,\\"json-schema-traverse\\":50,\\"url\\":5}],17:[function(require,module,exports){
  'use strict';

  var ruleModules = require('./_rules')
  , toHash = require('./util').toHash;

  module.exports = function rules() {
  var RULES = [
    { type: 'number',
      rules: [ { 'maximum': ['exclusiveMaximum'] },
               { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },
    { type: 'string',
      rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },
    { type: 'array',
      rules: [ 'maxItems', 'minItems', 'uniqueItems', 'contains', 'items' ] },
    { type: 'object',
      rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',
               { 'properties': ['additionalProperties', 'patternProperties'] } ] },
    { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf' ] }
  ];

  var ALL = [ 'type' ];
  var KEYWORDS = [
    'additionalItems', '$schema', 'id', 'title',
    'description', 'default', 'definitions'
  ];
  var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];
  RULES.all = toHash(ALL);
  RULES.types = toHash(TYPES);

  RULES.forEach(function (group) {
    group.rules = group.rules.map(function (keyword) {
      var implKeywords;
      if (typeof keyword == 'object') {
        var key = Object.keys(keyword)[0];
        implKeywords = keyword[key];
        keyword = key;
        implKeywords.forEach(function (k) {
          ALL.push(k);
          RULES.all[k] = true;
        });
      }
      ALL.push(keyword);
      var rule = RULES.all[keyword] = {
        keyword: keyword,
        code: ruleModules[keyword],
        implements: implKeywords
      };
      return rule;
    });

    if (group.type) RULES.types[group.type] = group;
  });

  RULES.keywords = toHash(ALL.concat(KEYWORDS));
  RULES.custom = {};

  return RULES;
  };

  },{\\"./_rules\\":11,\\"./util\\":20}],18:[function(require,module,exports){
  'use strict';

  var util = require('./util');

  module.exports = SchemaObject;

  function SchemaObject(obj) {
  util.copy(obj, this);
  }

  },{\\"./util\\":20}],19:[function(require,module,exports){
  'use strict';

  // https://mathiasbynens.be/notes/javascript-encoding
  // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
  module.exports = function ucs2length(str) {
  var length = 0
    , len = str.length
    , pos = 0
    , value;
  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);
    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
      // high surrogate, and there is a next character
      value = str.charCodeAt(pos);
      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
    }
  }
  return length;
  };

  },{}],20:[function(require,module,exports){
  'use strict';


  module.exports = {
  copy: copy,
  checkDataType: checkDataType,
  checkDataTypes: checkDataTypes,
  coerceToTypes: coerceToTypes,
  toHash: toHash,
  getProperty: getProperty,
  escapeQuotes: escapeQuotes,
  equal: require('fast-deep-equal'),
  ucs2length: require('./ucs2length'),
  varOccurences: varOccurences,
  varReplace: varReplace,
  cleanUpCode: cleanUpCode,
  finalCleanUpCode: finalCleanUpCode,
  schemaHasRules: schemaHasRules,
  schemaHasRulesExcept: schemaHasRulesExcept,
  toQuotedString: toQuotedString,
  getPathExpr: getPathExpr,
  getPath: getPath,
  getData: getData,
  unescapeFragment: unescapeFragment,
  unescapeJsonPointer: unescapeJsonPointer,
  escapeFragment: escapeFragment,
  escapeJsonPointer: escapeJsonPointer
  };


  function copy(o, to) {
  to = to || {};
  for (var key in o) to[key] = o[key];
  return to;
  }


  function checkDataType(dataType, data, negate) {
  var EQUAL = negate ? ' !== ' : ' === '
    , AND = negate ? ' || ' : ' && '
    , OK = negate ? '!' : ''
    , NOT = negate ? '' : '!';
  switch (dataType) {
    case 'null': return data + EQUAL + 'null';
    case 'array': return OK + 'Array.isArray(' + data + ')';
    case 'object': return '(' + OK + data + AND +
                          'typeof ' + data + EQUAL + '\\"object\\"' + AND +
                          NOT + 'Array.isArray(' + data + '))';
    case 'integer': return '(typeof ' + data + EQUAL + '\\"number\\"' + AND +
                           NOT + '(' + data + ' % 1)' +
                           AND + data + EQUAL + data + ')';
    default: return 'typeof ' + data + EQUAL + '\\"' + dataType + '\\"';
  }
  }


  function checkDataTypes(dataTypes, data) {
  switch (dataTypes.length) {
    case 1: return checkDataType(dataTypes[0], data, true);
    default:
      var code = '';
      var types = toHash(dataTypes);
      if (types.array && types.object) {
        code = types.null ? '(': '(!' + data + ' || ';
        code += 'typeof ' + data + ' !== \\"object\\")';
        delete types.null;
        delete types.array;
        delete types.object;
      }
      if (types.number) delete types.integer;
      for (var t in types)
        code += (code ? ' && ' : '' ) + checkDataType(t, data, true);

      return code;
  }
  }


  var COERCE_TO_TYPES = toHash([ 'string', 'number', 'integer', 'boolean', 'null' ]);
  function coerceToTypes(optionCoerceTypes, dataTypes) {
  if (Array.isArray(dataTypes)) {
    var types = [];
    for (var i=0; i<dataTypes.length; i++) {
      var t = dataTypes[i];
      if (COERCE_TO_TYPES[t]) types[types.length] = t;
      else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
    }
    if (types.length) return types;
  } else if (COERCE_TO_TYPES[dataTypes]) {
    return [dataTypes];
  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
    return ['array'];
  }
  }


  function toHash(arr) {
  var hash = {};
  for (var i=0; i<arr.length; i++) hash[arr[i]] = true;
  return hash;
  }


  var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
  var SINGLE_QUOTE = /'|\\\\\\\\/g;
  function getProperty(key) {
  return typeof key == 'number'
          ? '[' + key + ']'
          : IDENTIFIER.test(key)
            ? '.' + key
            : \\"['\\" + escapeQuotes(key) + \\"']\\";
  }


  function escapeQuotes(str) {
  return str.replace(SINGLE_QUOTE, '\\\\\\\\$&')
            .replace(/\\\\n/g, '\\\\\\\\n')
            .replace(/\\\\r/g, '\\\\\\\\r')
            .replace(/\\\\f/g, '\\\\\\\\f')
            .replace(/\\\\t/g, '\\\\\\\\t');
  }


  function varOccurences(str, dataVar) {
  dataVar += '[^0-9]';
  var matches = str.match(new RegExp(dataVar, 'g'));
  return matches ? matches.length : 0;
  }


  function varReplace(str, dataVar, expr) {
  dataVar += '([^0-9])';
  expr = expr.replace(/\\\\$/g, '$$$$');
  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
  }


  var EMPTY_ELSE = /else\\\\s*{\\\\s*}/g
  , EMPTY_IF_NO_ELSE = /if\\\\s*\\\\([^)]+\\\\)\\\\s*\\\\{\\\\s*\\\\}(?!\\\\s*else)/g
  , EMPTY_IF_WITH_ELSE = /if\\\\s*\\\\(([^)]+)\\\\)\\\\s*\\\\{\\\\s*\\\\}\\\\s*else(?!\\\\s*if)/g;
  function cleanUpCode(out) {
  return out.replace(EMPTY_ELSE, '')
            .replace(EMPTY_IF_NO_ELSE, '')
            .replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
  }


  var ERRORS_REGEXP = /[^v.]errors/g
  , REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g
  , REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g
  , RETURN_VALID = 'return errors === 0;'
  , RETURN_TRUE = 'validate.errors = null; return true;'
  , RETURN_ASYNC = /if \\\\(errors === 0\\\\) return data;\\\\s*else throw new ValidationError\\\\(vErrors\\\\);/
  , RETURN_DATA_ASYNC = 'return data;'
  , ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g
  , REMOVE_ROOTDATA = /if \\\\(rootData === undefined\\\\) rootData = data;/;

  function finalCleanUpCode(out, async) {
  var matches = out.match(ERRORS_REGEXP);
  if (matches && matches.length == 2) {
    out = async
          ? out.replace(REMOVE_ERRORS_ASYNC, '')
               .replace(RETURN_ASYNC, RETURN_DATA_ASYNC)
          : out.replace(REMOVE_ERRORS, '')
               .replace(RETURN_VALID, RETURN_TRUE);
  }

  matches = out.match(ROOTDATA_REGEXP);
  if (!matches || matches.length !== 3) return out;
  return out.replace(REMOVE_ROOTDATA, '');
  }


  function schemaHasRules(schema, rules) {
  if (typeof schema == 'boolean') return !schema;
  for (var key in schema) if (rules[key]) return true;
  }


  function schemaHasRulesExcept(schema, rules, exceptKeyword) {
  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';
  for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
  }


  function toQuotedString(str) {
  return '\\\\'' + escapeQuotes(str) + '\\\\'';
  }


  function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
  var path = jsonPointers // false by default
              ? '\\\\'/\\\\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \\\\'~0\\\\').replace(/\\\\\\\\//g, \\\\'~1\\\\')')
              : (isNumber ? '\\\\'[\\\\' + ' + expr + ' + \\\\']\\\\'' : '\\\\'[\\\\\\\\\\\\'\\\\' + ' + expr + ' + \\\\'\\\\\\\\\\\\']\\\\'');
  return joinPaths(currentPath, path);
  }


  function getPath(currentPath, prop, jsonPointers) {
  var path = jsonPointers // false by default
              ? toQuotedString('/' + escapeJsonPointer(prop))
              : toQuotedString(getProperty(prop));
  return joinPaths(currentPath, path);
  }


  var JSON_POINTER = /^\\\\/(?:[^~]|~0|~1)*$/;
  var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\\\/(?:[^~]|~0|~1)*)?$/;
  function getData($data, lvl, paths) {
  var up, jsonPointer, data, matches;
  if ($data === '') return 'rootData';
  if ($data[0] == '/') {
    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
    jsonPointer = $data;
    data = 'rootData';
  } else {
    matches = $data.match(RELATIVE_JSON_POINTER);
    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
    up = +matches[1];
    jsonPointer = matches[2];
    if (jsonPointer == '#') {
      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
      return paths[lvl - up];
    }

    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
    data = 'data' + ((lvl - up) || '');
    if (!jsonPointer) return data;
  }

  var expr = data;
  var segments = jsonPointer.split('/');
  for (var i=0; i<segments.length; i++) {
    var segment = segments[i];
    if (segment) {
      data += getProperty(unescapeJsonPointer(segment));
      expr += ' && ' + data;
    }
  }
  return expr;
  }


  function joinPaths (a, b) {
  if (a == '\\"\\"') return b;
  return (a + ' + ' + b).replace(/' \\\\+ '/g, '');
  }


  function unescapeFragment(str) {
  return unescapeJsonPointer(decodeURIComponent(str));
  }


  function escapeFragment(str) {
  return encodeURIComponent(escapeJsonPointer(str));
  }


  function escapeJsonPointer(str) {
  return str.replace(/~/g, '~0').replace(/\\\\//g, '~1');
  }


  function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
  }

  },{\\"./ucs2length\\":19,\\"fast-deep-equal\\":49}],21:[function(require,module,exports){
  'use strict';
  module.exports = function generate__limit(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $isMax = $keyword == 'maximum',
    $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
    $schemaExcl = it.schema[$exclusiveKeyword],
    $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
    $op = $isMax ? '<' : '>',
    $notOp = $isMax ? '>' : '<',
    $errorKeyword = undefined;
  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
      $exclusive = 'exclusive' + $lvl,
      $exclType = 'exclType' + $lvl,
      $exclIsNumber = 'exclIsNumber' + $lvl,
      $opExpr = 'op' + $lvl,
      $opStr = '\\\\' + ' + $opExpr + ' + \\\\'';
    out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';
    $schemaValueExcl = 'schemaExcl' + $lvl;
    out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \\\\'boolean\\\\' && ' + ($exclType) + ' != \\\\'undefined\\\\' && ' + ($exclType) + ' != \\\\'number\\\\') { ';
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \\\\'' + ($errorKeyword || '_exclusiveLimit') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \\\\'' + ($exclusiveKeyword) + ' should be boolean\\\\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } else if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\\\'number\\\\') || ';
    }
    out += ' ' + ($exclType) + ' == \\\\'number\\\\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \\\\'' + ($op) + '\\\\' : \\\\'' + ($op) + '=\\\\';';
  } else {
    var $exclIsNumber = typeof $schemaExcl == 'number',
      $opStr = $op;
    if ($exclIsNumber && $isData) {
      var $opExpr = '\\\\'' + $opStr + '\\\\'';
      out += ' if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\\\'number\\\\') || ';
      }
      out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';
    } else {
      if ($exclIsNumber && $schema === undefined) {
        $exclusive = true;
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
        $schemaValue = $schemaExcl;
        $notOp += '=';
      } else {
        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);
        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
          $notOp += '=';
        } else {
          $exclusive = false;
          $opStr += '=';
        }
      }
      var $opExpr = '\\\\'' + $opStr + '\\\\'';
      out += ' if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\\\'number\\\\') || ';
      }
      out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';
    }
  }
  $errorKeyword = $errorKeyword || $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ($errorKeyword || '_limit') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should be ' + ($opStr) + ' ';
      if ($isData) {
        out += '\\\\' + ' + ($schemaValue);
      } else {
        out += '' + ($schemaValue) + '\\\\'';
      }
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
  }

  },{}],22:[function(require,module,exports){
  'use strict';
  module.exports = function generate__limitItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxItems' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\\\'number\\\\') || ';
  }
  out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ($errorKeyword || '_limitItems') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should NOT have ';
      if ($keyword == 'maxItems') {
        out += 'more';
      } else {
        out += 'less';
      }
      out += ' than ';
      if ($isData) {
        out += '\\\\' + ' + ($schemaValue) + ' + \\\\'';
      } else {
        out += '' + ($schema);
      }
      out += ' items\\\\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
  }

  },{}],23:[function(require,module,exports){
  'use strict';
  module.exports = function generate__limitLength(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxLength' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\\\'number\\\\') || ';
  }
  if (it.opts.unicode === false) {
    out += ' ' + ($data) + '.length ';
  } else {
    out += ' ucs2length(' + ($data) + ') ';
  }
  out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ($errorKeyword || '_limitLength') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should NOT be ';
      if ($keyword == 'maxLength') {
        out += 'longer';
      } else {
        out += 'shorter';
      }
      out += ' than ';
      if ($isData) {
        out += '\\\\' + ' + ($schemaValue) + ' + \\\\'';
      } else {
        out += '' + ($schema);
      }
      out += ' characters\\\\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
  }

  },{}],24:[function(require,module,exports){
  'use strict';
  module.exports = function generate__limitProperties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxProperties' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\\\'number\\\\') || ';
  }
  out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ($errorKeyword || '_limitProperties') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should NOT have ';
      if ($keyword == 'maxProperties') {
        out += 'more';
      } else {
        out += 'less';
      }
      out += ' than ';
      if ($isData) {
        out += '\\\\' + ' + ($schemaValue) + ' + \\\\'';
      } else {
        out += '' + ($schema);
      }
      out += ' properties\\\\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
  }

  },{}],25:[function(require,module,exports){
  'use strict';
  module.exports = function generate_allOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
    $allSchemasEmpty = true;
  var arr1 = $schema;
  if (arr1) {
    var $sch, $i = -1,
      l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[$i += 1];
      if (it.util.schemaHasRules($sch, it.RULES.all)) {
        $allSchemasEmpty = false;
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  if ($breakOnError) {
    if ($allSchemasEmpty) {
      out += ' if (true) { ';
    } else {
      out += ' ' + ($closingBraces.slice(0, -1)) + ' ';
    }
  }
  out = it.util.cleanUpCode(out);
  return out;
  }

  },{}],26:[function(require,module,exports){
  'use strict';
  module.exports = function generate_anyOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $noEmptySchema = $schema.every(function($sch) {
    return it.util.schemaHasRules($sch, it.RULES.all);
  });
  if ($noEmptySchema) {
    var $currentBaseId = $it.baseId;
    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';
        $closingBraces += '}';
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \\\\'' + ('anyOf') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \\\\'should match some schema in anyOf\\\\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
    if (it.opts.allErrors) {
      out += ' } ';
    }
    out = it.util.cleanUpCode(out);
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
  }

  },{}],27:[function(require,module,exports){
  'use strict';
  module.exports = function generate_const(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  if (!$isData) {
    out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';
  }
  out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ('const') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should be equal to constant\\\\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' }';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
  }

  },{}],28:[function(require,module,exports){
  'use strict';
  module.exports = function generate_contains(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
    $dataNxt = $it.dataLevel = it.dataLevel + 1,
    $nextData = 'data' + $dataNxt,
    $currentBaseId = it.baseId,
    $nonEmptySchema = it.util.schemaHasRules($schema, it.RULES.all);
  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
  if ($nonEmptySchema) {
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
    } else {
      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
    }
    out += ' if (' + ($nextValid) + ') break; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';
  } else {
    out += ' if (' + ($data) + '.length == 0) {';
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ('contains') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should contain a valid item\\\\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } else { ';
  if ($nonEmptySchema) {
    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
  }
  if (it.opts.allErrors) {
    out += ' } ';
  }
  out = it.util.cleanUpCode(out);
  return out;
  }

  },{}],29:[function(require,module,exports){
  'use strict';
  module.exports = function generate_custom(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $rule = this,
    $definition = 'definition' + $lvl,
    $rDef = $rule.definition,
    $closingBraces = '';
  var $compile, $inline, $macro, $ruleValidate, $validateCode;
  if ($isData && $rDef.$data) {
    $validateCode = 'keywordValidate' + $lvl;
    var $validateSchema = $rDef.validateSchema;
    out += ' var ' + ($definition) + ' = RULES.custom[\\\\'' + ($keyword) + '\\\\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';
  } else {
    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
    if (!$ruleValidate) return;
    $schemaValue = 'validate.schema' + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  }
  var $ruleErrs = $validateCode + '.errors',
    $i = 'i' + $lvl,
    $ruleErr = 'ruleErr' + $lvl,
    $asyncKeyword = $rDef.async;
  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
  if (!($inline || $macro)) {
    out += '' + ($ruleErrs) + ' = null;';
  }
  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
  if ($isData && $rDef.$data) {
    $closingBraces += '}';
    out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';
    if ($validateSchema) {
      $closingBraces += '}';
      out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';
    }
  }
  if ($inline) {
    if ($rDef.statements) {
      out += ' ' + ($ruleValidate.validate) + ' ';
    } else {
      out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';
    }
  } else if ($macro) {
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = '';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it).replace(/validate\\\\.schema/g, $validateCode);
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + ($code);
  } else {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    out += '  ' + ($validateCode) + '.call( ';
    if (it.opts.passContext) {
      out += 'this';
    } else {
      out += 'self';
    }
    if ($compile || $rDef.schema === false) {
      out += ' , ' + ($data) + ' ';
    } else {
      out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';
    }
    out += ' , (dataPath || \\\\'\\\\')';
    if (it.errorPath != '\\"\\"') {
      out += ' + ' + (it.errorPath);
    }
    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';
    var def_callRuleValidate = out;
    out = $$outStack.pop();
    if ($rDef.errors === false) {
      out += ' ' + ($valid) + ' = ';
      if ($asyncKeyword) {
        out += '' + (it.yieldAwait);
      }
      out += '' + (def_callRuleValidate) + '; ';
    } else {
      if ($asyncKeyword) {
        $ruleErrs = 'customErrors' + $lvl;
        out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = ' + (it.yieldAwait) + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';
      } else {
        out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';
      }
    }
  }
  if ($rDef.modifying) {
    out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';
  }
  out += '' + ($closingBraces);
  if ($rDef.valid) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  } else {
    out += ' if ( ';
    if ($rDef.valid === undefined) {
      out += ' !';
      if ($macro) {
        out += '' + ($nextValid);
      } else {
        out += '' + ($valid);
      }
    } else {
      out += ' ' + (!$rDef.valid) + ' ';
    }
    out += ') { ';
    $errorKeyword = $rule.keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \\\\'' + ($errorKeyword || 'custom') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \\\\'' + ($rule.keyword) + '\\\\' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \\\\'should pass \\"' + ($rule.keyword) + '\\" keyword validation\\\\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    var def_customError = out;
    out = $$outStack.pop();
    if ($inline) {
      if ($rDef.errors) {
        if ($rDef.errors != 'full') {
          out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\\\'\\\\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = \\"' + ($errSchemaPath) + '\\"; } ';
          if (it.opts.verbose) {
            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
          }
          out += ' } ';
        }
      } else {
        if ($rDef.errors === false) {
          out += ' ' + (def_customError) + ' ';
        } else {
          out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\\\'\\\\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = \\"' + ($errSchemaPath) + '\\"; } ';
          if (it.opts.verbose) {
            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
          }
          out += ' } } ';
        }
      }
    } else if ($macro) {
      out += '   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \\\\'' + ($errorKeyword || 'custom') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \\\\'' + ($rule.keyword) + '\\\\' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \\\\'should pass \\"' + ($rule.keyword) + '\\" keyword validation\\\\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
    } else {
      if ($rDef.errors === false) {
        out += ' ' + (def_customError) + ' ';
      } else {
        out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = \\"' + ($errSchemaPath) + '\\";  ';
        if (it.opts.verbose) {
          out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
        }
        out += ' } } else { ' + (def_customError) + ' } ';
      }
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
  }
  return out;
  }

  },{}],30:[function(require,module,exports){
  'use strict';
  module.exports = function generate_dependencies(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $schemaDeps = {},
    $propertyDeps = {},
    $ownProperties = it.opts.ownProperties;
  for ($property in $schema) {
    var $sch = $schema[$property];
    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
    $deps[$property] = $sch;
  }
  out += 'var ' + ($errs) + ' = errors;';
  var $currentErrorPath = it.errorPath;
  out += 'var missing' + ($lvl) + ';';
  for (var $property in $propertyDeps) {
    $deps = $propertyDeps[$property];
    if ($deps.length) {
      out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \\\\'' + (it.util.escapeQuotes($property)) + '\\\\') ';
      }
      if ($breakOnError) {
        out += ' && ( ';
        var arr1 = $deps;
        if (arr1) {
          var $propertyKey, $i = -1,
            l1 = arr1.length - 1;
          while ($i < l1) {
            $propertyKey = arr1[$i += 1];
            if ($i) {
              out += ' || ';
            }
            var $prop = it.util.getProperty($propertyKey),
              $useData = $data + $prop;
            out += ' ( ( ' + ($useData) + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\\\'' + (it.util.escapeQuotes($propertyKey)) + '\\\\') ';
            }
            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
          }
        }
        out += ')) {  ';
        var $propertyPath = 'missing' + $lvl,
          $missingProperty = '\\\\' + ' + $propertyPath + ' + \\\\'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \\\\'' + ('dependencies') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \\\\'' + (it.util.escapeQuotes($property)) + '\\\\', missingProperty: \\\\'' + ($missingProperty) + '\\\\', depsCount: ' + ($deps.length) + ', deps: \\\\'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\\", \\"))) + '\\\\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \\\\'should have ';
            if ($deps.length == 1) {
              out += 'property ' + (it.util.escapeQuotes($deps[0]));
            } else {
              out += 'properties ' + (it.util.escapeQuotes($deps.join(\\", \\")));
            }
            out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\\\\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      } else {
        out += ' ) { ';
        var arr2 = $deps;
        if (arr2) {
          var $propertyKey, i2 = -1,
            l2 = arr2.length - 1;
          while (i2 < l2) {
            $propertyKey = arr2[i2 += 1];
            var $prop = it.util.getProperty($propertyKey),
              $missingProperty = it.util.escapeQuotes($propertyKey),
              $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += ' if ( ' + ($useData) + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\\\'' + (it.util.escapeQuotes($propertyKey)) + '\\\\') ';
            }
            out += ') {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \\\\'' + ('dependencies') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \\\\'' + (it.util.escapeQuotes($property)) + '\\\\', missingProperty: \\\\'' + ($missingProperty) + '\\\\', depsCount: ' + ($deps.length) + ', deps: \\\\'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\\", \\"))) + '\\\\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \\\\'should have ';
                if ($deps.length == 1) {
                  out += 'property ' + (it.util.escapeQuotes($deps[0]));
                } else {
                  out += 'properties ' + (it.util.escapeQuotes($deps.join(\\", \\")));
                }
                out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\\\\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
      out += ' }   ';
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
  }
  it.errorPath = $currentErrorPath;
  var $currentBaseId = $it.baseId;
  for (var $property in $schemaDeps) {
    var $sch = $schemaDeps[$property];
    if (it.util.schemaHasRules($sch, it.RULES.all)) {
      out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \\\\'' + (it.util.escapeQuotes($property)) + '\\\\') ';
      }
      out += ') { ';
      $it.schema = $sch;
      $it.schemaPath = $schemaPath + it.util.getProperty($property);
      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
      out += '  ' + (it.validate($it)) + ' ';
      $it.baseId = $currentBaseId;
      out += ' }  ';
      if ($breakOnError) {
        out += ' if (' + ($nextValid) + ') { ';
        $closingBraces += '}';
      }
    }
  }
  if ($breakOnError) {
    out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
  }

  },{}],31:[function(require,module,exports){
  'use strict';
  module.exports = function generate_enum(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $i = 'i' + $lvl,
    $vSchema = 'schema' + $lvl;
  if (!$isData) {
    out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';
  }
  out += 'var ' + ($valid) + ';';
  if ($isData) {
    out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
  }
  out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';
  if ($isData) {
    out += '  }  ';
  }
  out += ' if (!' + ($valid) + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ('enum') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should be equal to one of the allowed values\\\\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' }';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
  }

  },{}],32:[function(require,module,exports){
  'use strict';
  module.exports = function generate_format(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  if (it.opts.format === false) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
    return out;
  }
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $unknownFormats = it.opts.unknownFormats,
    $allowUnknown = Array.isArray($unknownFormats);
  if ($isData) {
    var $format = 'format' + $lvl,
      $isObject = 'isObject' + $lvl,
      $formatType = 'formatType' + $lvl;
    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \\\\'object\\\\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \\\\'string\\\\'; if (' + ($isObject) + ') { ';
    if (it.async) {
      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';
    }
    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\\\'string\\\\') || ';
    }
    out += ' (';
    if ($unknownFormats != 'ignore') {
      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';
      if ($allowUnknown) {
        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';
      }
      out += ') || ';
    }
    out += ' (' + ($format) + ' && ' + ($formatType) + ' == \\\\'' + ($ruleType) + '\\\\' && !(typeof ' + ($format) + ' == \\\\'function\\\\' ? ';
    if (it.async) {
      out += ' (async' + ($lvl) + ' ? ' + (it.yieldAwait) + ' ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';
    } else {
      out += ' ' + ($format) + '(' + ($data) + ') ';
    }
    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';
  } else {
    var $format = it.formats[$schema];
    if (!$format) {
      if ($unknownFormats == 'ignore') {
        console.warn('unknown format \\"' + $schema + '\\" ignored in schema at path \\"' + it.errSchemaPath + '\\"');
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      } else {
        throw new Error('unknown format \\"' + $schema + '\\" is used in schema at path \\"' + it.errSchemaPath + '\\"');
      }
    }
    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
    var $formatType = $isObject && $format.type || 'string';
    if ($isObject) {
      var $async = $format.async === true;
      $format = $format.validate;
    }
    if ($formatType != $ruleType) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
      return out;
    }
    if ($async) {
      if (!it.async) throw new Error('async format in sync schema');
      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
      out += ' if (!(' + (it.yieldAwait) + ' ' + ($formatRef) + '(' + ($data) + '))) { ';
    } else {
      out += ' if (! ';
      var $formatRef = 'formats' + it.util.getProperty($schema);
      if ($isObject) $formatRef += '.validate';
      if (typeof $format == 'function') {
        out += ' ' + ($formatRef) + '(' + ($data) + ') ';
      } else {
        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';
      }
      out += ') { ';
    }
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ('format') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';
    if ($isData) {
      out += '' + ($schemaValue);
    } else {
      out += '' + (it.util.toQuotedString($schema));
    }
    out += '  } ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should match format \\"';
      if ($isData) {
        out += '\\\\' + ' + ($schemaValue) + ' + \\\\'';
      } else {
        out += '' + (it.util.escapeQuotes($schema));
      }
      out += '\\"\\\\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + (it.util.toQuotedString($schema));
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
  }

  },{}],33:[function(require,module,exports){
  'use strict';
  module.exports = function generate_items(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
    $dataNxt = $it.dataLevel = it.dataLevel + 1,
    $nextData = 'data' + $dataNxt,
    $currentBaseId = it.baseId;
  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
  if (Array.isArray($schema)) {
    var $additionalItems = it.schema.additionalItems;
    if ($additionalItems === false) {
      out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';
      var $currErrSchemaPath = $errSchemaPath;
      $errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += '  if (!' + ($valid) + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \\\\'' + ('additionalItems') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \\\\'should NOT have more than ' + ($schema.length) + ' items\\\\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      $errSchemaPath = $currErrSchemaPath;
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';
          var $passData = $data + '[' + $i + ']';
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
          $it.dataPathArr[$dataNxt] = $i;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if (typeof $additionalItems == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {
      $it.schema = $additionalItems;
      $it.schemaPath = it.schemaPath + '.additionalItems';
      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
      } else {
        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
      }
      if ($breakOnError) {
        out += ' if (!' + ($nextValid) + ') break; ';
      }
      out += ' } }  ';
      if ($breakOnError) {
        out += ' if (' + ($nextValid) + ') { ';
        $closingBraces += '}';
      }
    }
  } else if (it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
    } else {
      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
    }
    if ($breakOnError) {
      out += ' if (!' + ($nextValid) + ') break; ';
    }
    out += ' }';
  }
  if ($breakOnError) {
    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
  }

  },{}],34:[function(require,module,exports){
  'use strict';
  module.exports = function generate_multipleOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  out += 'var division' + ($lvl) + ';if (';
  if ($isData) {
    out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \\\\'number\\\\' || ';
  }
  out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';
  if (it.opts.multipleOfPrecision) {
    out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';
  } else {
    out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';
  }
  out += ' ) ';
  if ($isData) {
    out += '  )  ';
  }
  out += ' ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ('multipleOf') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should be multiple of ';
      if ($isData) {
        out += '\\\\' + ' + ($schemaValue);
      } else {
        out += '' + ($schemaValue) + '\\\\'';
      }
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
  }

  },{}],35:[function(require,module,exports){
  'use strict';
  module.exports = function generate_not(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  if (it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + ($errs) + ' = errors;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.createErrors = false;
    var $allErrorsOption;
    if ($it.opts.allErrors) {
      $allErrorsOption = $it.opts.allErrors;
      $it.opts.allErrors = false;
    }
    out += ' ' + (it.validate($it)) + ' ';
    $it.createErrors = true;
    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (' + ($nextValid) + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \\\\'' + ('not') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \\\\'should NOT be valid\\\\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
    if (it.opts.allErrors) {
      out += ' } ';
    }
  } else {
    out += '  var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \\\\'' + ('not') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \\\\'should NOT be valid\\\\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if ($breakOnError) {
      out += ' if (false) { ';
    }
  }
  return out;
  }

  },{}],36:[function(require,module,exports){
  'use strict';
  module.exports = function generate_oneOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  out += 'var ' + ($errs) + ' = errors;var prevValid' + ($lvl) + ' = false;var ' + ($valid) + ' = false;';
  var $currentBaseId = $it.baseId;
  var $wasComposite = it.compositeRule;
  it.compositeRule = $it.compositeRule = true;
  var arr1 = $schema;
  if (arr1) {
    var $sch, $i = -1,
      l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[$i += 1];
      if (it.util.schemaHasRules($sch, it.RULES.all)) {
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
      } else {
        out += ' var ' + ($nextValid) + ' = true; ';
      }
      if ($i) {
        out += ' if (' + ($nextValid) + ' && prevValid' + ($lvl) + ') ' + ($valid) + ' = false; else { ';
        $closingBraces += '}';
      }
      out += ' if (' + ($nextValid) + ') ' + ($valid) + ' = prevValid' + ($lvl) + ' = true;';
    }
  }
  it.compositeRule = $it.compositeRule = $wasComposite;
  out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ('oneOf') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should match exactly one schema in oneOf\\\\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; return false; ';
    }
  }
  out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';
  if (it.opts.allErrors) {
    out += ' } ';
  }
  return out;
  }

  },{}],37:[function(require,module,exports){
  'use strict';
  module.exports = function generate_pattern(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
  out += 'if ( ';
  if ($isData) {
    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\\\'string\\\\') || ';
  }
  out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \\\\'' + ('pattern') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';
    if ($isData) {
      out += '' + ($schemaValue);
    } else {
      out += '' + (it.util.toQuotedString($schema));
    }
    out += '  } ';
    if (it.opts.messages !== false) {
      out += ' , message: \\\\'should match pattern \\"';
      if ($isData) {
        out += '\\\\' + ' + ($schemaValue) + ' + \\\\'';
      } else {
        out += '' + (it.util.escapeQuotes($schema));
      }
      out += '\\"\\\\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + (it.util.toQuotedString($schema));
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
  }

  },{}],38:[function(require,module,exports){
  'use strict';
  module.exports = function generate_properties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $key = 'key' + $lvl,
    $idx = 'idx' + $lvl,
    $dataNxt = $it.dataLevel = it.dataLevel + 1,
    $nextData = 'data' + $dataNxt,
    $dataProperties = 'dataProperties' + $lvl;
  var $schemaKeys = Object.keys($schema || {}),
    $pProperties = it.schema.patternProperties || {},
    $pPropertyKeys = Object.keys($pProperties),
    $aProperties = it.schema.additionalProperties,
    $someProperties = $schemaKeys.length || $pPropertyKeys.length,
    $noAdditional = $aProperties === false,
    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
    $removeAdditional = it.opts.removeAdditional,
    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
    $ownProperties = it.opts.ownProperties,
    $currentBaseId = it.baseId;
  var $required = it.schema.required;
  if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);
  if (it.opts.patternGroups) {
    var $pgProperties = it.schema.patternGroups || {},
      $pgPropertyKeys = Object.keys($pgProperties);
  }
  out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';
  if ($ownProperties) {
    out += ' var ' + ($dataProperties) + ' = undefined;';
  }
  if ($checkAdditional) {
    if ($ownProperties) {
      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
    } else {
      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
    }
    if ($someProperties) {
      out += ' var isAdditional' + ($lvl) + ' = !(false ';
      if ($schemaKeys.length) {
        if ($schemaKeys.length > 5) {
          out += ' || validate.schema' + ($schemaPath) + '[' + ($key) + '] ';
        } else {
          var arr1 = $schemaKeys;
          if (arr1) {
            var $propertyKey, i1 = -1,
              l1 = arr1.length - 1;
            while (i1 < l1) {
              $propertyKey = arr1[i1 += 1];
              out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
            }
          }
        }
      }
      if ($pPropertyKeys.length) {
        var arr2 = $pPropertyKeys;
        if (arr2) {
          var $pProperty, $i = -1,
            l2 = arr2.length - 1;
          while ($i < l2) {
            $pProperty = arr2[$i += 1];
            out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';
          }
        }
      }
      if (it.opts.patternGroups && $pgPropertyKeys.length) {
        var arr3 = $pgPropertyKeys;
        if (arr3) {
          var $pgProperty, $i = -1,
            l3 = arr3.length - 1;
          while ($i < l3) {
            $pgProperty = arr3[$i += 1];
            out += ' || ' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ') ';
          }
        }
      }
      out += ' ); if (isAdditional' + ($lvl) + ') { ';
    }
    if ($removeAdditional == 'all') {
      out += ' delete ' + ($data) + '[' + ($key) + ']; ';
    } else {
      var $currentErrorPath = it.errorPath;
      var $additionalProperty = '\\\\' + ' + $key + ' + \\\\'';
      if (it.opts._errorDataPathProperty) {
        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
      }
      if ($noAdditional) {
        if ($removeAdditional) {
          out += ' delete ' + ($data) + '[' + ($key) + ']; ';
        } else {
          out += ' ' + ($nextValid) + ' = false; ';
          var $currErrSchemaPath = $errSchemaPath;
          $errSchemaPath = it.errSchemaPath + '/additionalProperties';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \\\\'' + ('additionalProperties') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \\\\'' + ($additionalProperty) + '\\\\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \\\\'should NOT have additional properties\\\\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          $errSchemaPath = $currErrSchemaPath;
          if ($breakOnError) {
            out += ' break; ';
          }
        }
      } else if ($additionalIsSchema) {
        if ($removeAdditional == 'failing') {
          out += ' var ' + ($errs) + ' = errors;  ';
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';
          it.compositeRule = $it.compositeRule = $wasComposite;
        } else {
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + ($nextValid) + ') break; ';
          }
        }
      }
      it.errorPath = $currentErrorPath;
    }
    if ($someProperties) {
      out += ' } ';
    }
    out += ' }  ';
    if ($breakOnError) {
      out += ' if (' + ($nextValid) + ') { ';
      $closingBraces += '}';
    }
  }
  var $useDefaults = it.opts.useDefaults && !it.compositeRule;
  if ($schemaKeys.length) {
    var arr4 = $schemaKeys;
    if (arr4) {
      var $propertyKey, i4 = -1,
        l4 = arr4.length - 1;
      while (i4 < l4) {
        $propertyKey = arr4[i4 += 1];
        var $sch = $schema[$propertyKey];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          var $prop = it.util.getProperty($propertyKey),
            $passData = $data + $prop,
            $hasDefault = $useDefaults && $sch.default !== undefined;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + $prop;
          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            $code = it.util.varReplace($code, $nextData, $passData);
            var $useData = $passData;
          } else {
            var $useData = $nextData;
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
          }
          if ($hasDefault) {
            out += ' ' + ($code) + ' ';
          } else {
            if ($requiredHash && $requiredHash[$propertyKey]) {
              out += ' if ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\\\'' + (it.util.escapeQuotes($propertyKey)) + '\\\\') ';
              }
              out += ') { ' + ($nextValid) + ' = false; ';
              var $currentErrorPath = it.errorPath,
                $currErrSchemaPath = $errSchemaPath,
                $missingProperty = it.util.escapeQuotes($propertyKey);
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              $errSchemaPath = it.errSchemaPath + '/required';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \\\\'' + ('required') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\\\'' + ($missingProperty) + '\\\\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \\\\'';
                  if (it.opts._errorDataPathProperty) {
                    out += 'is a required property';
                  } else {
                    out += 'should have required property \\\\\\\\\\\\'' + ($missingProperty) + '\\\\\\\\\\\\'';
                  }
                  out += '\\\\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              $errSchemaPath = $currErrSchemaPath;
              it.errorPath = $currentErrorPath;
              out += ' } else { ';
            } else {
              if ($breakOnError) {
                out += ' if ( ' + ($useData) + ' === undefined ';
                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\\\'' + (it.util.escapeQuotes($propertyKey)) + '\\\\') ';
                }
                out += ') { ' + ($nextValid) + ' = true; } else { ';
              } else {
                out += ' if (' + ($useData) + ' !== undefined ';
                if ($ownProperties) {
                  out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \\\\'' + (it.util.escapeQuotes($propertyKey)) + '\\\\') ';
                }
                out += ' ) { ';
              }
            }
            out += ' ' + ($code) + ' } ';
          }
        }
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  if ($pPropertyKeys.length) {
    var arr5 = $pPropertyKeys;
    if (arr5) {
      var $pProperty, i5 = -1,
        l5 = arr5.length - 1;
      while (i5 < l5) {
        $pProperty = arr5[i5 += 1];
        var $sch = $pProperties[$pProperty];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
          if ($ownProperties) {
            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
          } else {
            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
          }
          out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';
          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + ($nextValid) + ') break; ';
          }
          out += ' } ';
          if ($breakOnError) {
            out += ' else ' + ($nextValid) + ' = true; ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
  }
  if (it.opts.patternGroups && $pgPropertyKeys.length) {
    var arr6 = $pgPropertyKeys;
    if (arr6) {
      var $pgProperty, i6 = -1,
        l6 = arr6.length - 1;
      while (i6 < l6) {
        $pgProperty = arr6[i6 += 1];
        var $pgSchema = $pgProperties[$pgProperty],
          $sch = $pgSchema.schema;
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = it.schemaPath + '.patternGroups' + it.util.getProperty($pgProperty) + '.schema';
          $it.errSchemaPath = it.errSchemaPath + '/patternGroups/' + it.util.escapeFragment($pgProperty) + '/schema';
          out += ' var pgPropCount' + ($lvl) + ' = 0;  ';
          if ($ownProperties) {
            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
          } else {
            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
          }
          out += ' if (' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ')) { pgPropCount' + ($lvl) + '++; ';
          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + ($nextValid) + ') break; ';
          }
          out += ' } ';
          if ($breakOnError) {
            out += ' else ' + ($nextValid) + ' = true; ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
          var $pgMin = $pgSchema.minimum,
            $pgMax = $pgSchema.maximum;
          if ($pgMin !== undefined || $pgMax !== undefined) {
            out += ' var ' + ($valid) + ' = true; ';
            var $currErrSchemaPath = $errSchemaPath;
            if ($pgMin !== undefined) {
              var $limit = $pgMin,
                $reason = 'minimum',
                $moreOrLess = 'less';
              out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' >= ' + ($pgMin) + '; ';
              $errSchemaPath = it.errSchemaPath + '/patternGroups/minimum';
              out += '  if (!' + ($valid) + ') {   ';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \\\\'' + ('patternGroups') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \\\\'' + ($reason) + '\\\\', limit: ' + ($limit) + ', pattern: \\\\'' + (it.util.escapeQuotes($pgProperty)) + '\\\\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \\\\'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern \\"' + (it.util.escapeQuotes($pgProperty)) + '\\"\\\\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } ';
              if ($pgMax !== undefined) {
                out += ' else ';
              }
            }
            if ($pgMax !== undefined) {
              var $limit = $pgMax,
                $reason = 'maximum',
                $moreOrLess = 'more';
              out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' <= ' + ($pgMax) + '; ';
              $errSchemaPath = it.errSchemaPath + '/patternGroups/maximum';
              out += '  if (!' + ($valid) + ') {   ';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \\\\'' + ('patternGroups') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \\\\'' + ($reason) + '\\\\', limit: ' + ($limit) + ', pattern: \\\\'' + (it.util.escapeQuotes($pgProperty)) + '\\\\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \\\\'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern \\"' + (it.util.escapeQuotes($pgProperty)) + '\\"\\\\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } ';
            }
            $errSchemaPath = $currErrSchemaPath;
            if ($breakOnError) {
              out += ' if (' + ($valid) + ') { ';
              $closingBraces += '}';
            }
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
  }

  },{}],39:[function(require,module,exports){
  'use strict';
  module.exports = function generate_propertyNames(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  if (it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $i = 'i' + $lvl,
      $invalidName = '\\\\' + ' + $key + ' + \\\\'',
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $dataProperties = 'dataProperties' + $lvl,
      $ownProperties = it.opts.ownProperties,
      $currentBaseId = it.baseId;
    out += ' var ' + ($errs) + ' = errors; ';
    if ($ownProperties) {
      out += ' var ' + ($dataProperties) + ' = undefined; ';
    }
    if ($ownProperties) {
      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
    } else {
      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
    }
    out += ' var startErrs' + ($lvl) + ' = errors; ';
    var $passData = $key;
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
    } else {
      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \\\\'' + ('propertyNames') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \\\\'' + ($invalidName) + '\\\\' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \\\\'property name \\\\\\\\\\\\'' + ($invalidName) + '\\\\\\\\\\\\' is invalid\\\\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    if ($breakOnError) {
      out += ' break; ';
    }
    out += ' } }';
  }
  if ($breakOnError) {
    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
  }

  },{}],40:[function(require,module,exports){
  'use strict';
  module.exports = function generate_ref(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $async, $refCode;
  if ($schema == '#' || $schema == '#/') {
    if (it.isRoot) {
      $async = it.async;
      $refCode = 'validate';
    } else {
      $async = it.root.schema.$async === true;
      $refCode = 'root.refVal[0]';
    }
  } else {
    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
    if ($refVal === undefined) {
      var $message = it.MissingRefError.message(it.baseId, $schema);
      if (it.opts.missingRefs == 'fail') {
        console.error($message);
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \\\\'' + ('$ref') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \\\\'' + (it.util.escapeQuotes($schema)) + '\\\\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \\\\'can\\\\\\\\\\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\\\\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        if ($breakOnError) {
          out += ' if (false) { ';
        }
      } else if (it.opts.missingRefs == 'ignore') {
        console.warn($message);
        if ($breakOnError) {
          out += ' if (true) { ';
        }
      } else {
        throw new it.MissingRefError(it.baseId, $schema, $message);
      }
    } else if ($refVal.inline) {
      var $it = it.util.copy(it);
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      $it.schema = $refVal.schema;
      $it.schemaPath = '';
      $it.errSchemaPath = $schema;
      var $code = it.validate($it).replace(/validate\\\\.schema/g, $refVal.code);
      out += ' ' + ($code) + ' ';
      if ($breakOnError) {
        out += ' if (' + ($nextValid) + ') { ';
      }
    } else {
      $async = $refVal.$async === true;
      $refCode = $refVal.code;
    }
  }
  if ($refCode) {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    if (it.opts.passContext) {
      out += ' ' + ($refCode) + '.call(this, ';
    } else {
      out += ' ' + ($refCode) + '( ';
    }
    out += ' ' + ($data) + ', (dataPath || \\\\'\\\\')';
    if (it.errorPath != '\\"\\"') {
      out += ' + ' + (it.errorPath);
    }
    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';
    var __callValidate = out;
    out = $$outStack.pop();
    if ($async) {
      if (!it.async) throw new Error('async schema referenced by sync schema');
      if ($breakOnError) {
        out += ' var ' + ($valid) + '; ';
      }
      out += ' try { ' + (it.yieldAwait) + ' ' + (__callValidate) + '; ';
      if ($breakOnError) {
        out += ' ' + ($valid) + ' = true; ';
      }
      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
      if ($breakOnError) {
        out += ' ' + ($valid) + ' = false; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' if (' + ($valid) + ') { ';
      }
    } else {
      out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    }
  }
  return out;
  }

  },{}],41:[function(require,module,exports){
  'use strict';
  module.exports = function generate_required(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $vSchema = 'schema' + $lvl;
  if (!$isData) {
    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
      var $required = [];
      var arr1 = $schema;
      if (arr1) {
        var $property, i1 = -1,
          l1 = arr1.length - 1;
        while (i1 < l1) {
          $property = arr1[i1 += 1];
          var $propertySch = it.schema.properties[$property];
          if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
            $required[$required.length] = $property;
          }
        }
      }
    } else {
      var $required = $schema;
    }
  }
  if ($isData || $required.length) {
    var $currentErrorPath = it.errorPath,
      $loopRequired = $isData || $required.length >= it.opts.loopRequired,
      $ownProperties = it.opts.ownProperties;
    if ($breakOnError) {
      out += ' var missing' + ($lvl) + '; ';
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
        }
        var $i = 'i' + $lvl,
          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
          $missingProperty = '\\\\' + ' + $propertyPath + ' + \\\\'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        out += ' var ' + ($valid) + ' = true; ';
        if ($isData) {
          out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
        }
        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';
        if ($ownProperties) {
          out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
        }
        out += '; if (!' + ($valid) + ') break; } ';
        if ($isData) {
          out += '  }  ';
        }
        out += '  if (!' + ($valid) + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \\\\'' + ('required') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\\\'' + ($missingProperty) + '\\\\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \\\\'';
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\\\\\\\\\\'' + ($missingProperty) + '\\\\\\\\\\\\'';
            }
            out += '\\\\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      } else {
        out += ' if ( ';
        var arr2 = $required;
        if (arr2) {
          var $propertyKey, $i = -1,
            l2 = arr2.length - 1;
          while ($i < l2) {
            $propertyKey = arr2[$i += 1];
            if ($i) {
              out += ' || ';
            }
            var $prop = it.util.getProperty($propertyKey),
              $useData = $data + $prop;
            out += ' ( ( ' + ($useData) + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\\\'' + (it.util.escapeQuotes($propertyKey)) + '\\\\') ';
            }
            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
          }
        }
        out += ') {  ';
        var $propertyPath = 'missing' + $lvl,
          $missingProperty = '\\\\' + ' + $propertyPath + ' + \\\\'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \\\\'' + ('required') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\\\'' + ($missingProperty) + '\\\\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \\\\'';
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\\\\\\\\\\'' + ($missingProperty) + '\\\\\\\\\\\\'';
            }
            out += '\\\\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      }
    } else {
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
        }
        var $i = 'i' + $lvl,
          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
          $missingProperty = '\\\\' + ' + $propertyPath + ' + \\\\'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        if ($isData) {
          out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \\\\'' + ('required') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\\\'' + ($missingProperty) + '\\\\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \\\\'';
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\\\\\\\\\\'' + ($missingProperty) + '\\\\\\\\\\\\'';
              }
              out += '\\\\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';
        }
        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';
        if ($ownProperties) {
          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
        }
        out += ') {  var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \\\\'' + ('required') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\\\'' + ($missingProperty) + '\\\\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \\\\'';
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\\\\\\\\\\'' + ($missingProperty) + '\\\\\\\\\\\\'';
            }
            out += '\\\\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
        if ($isData) {
          out += '  }  ';
        }
      } else {
        var arr3 = $required;
        if (arr3) {
          var $propertyKey, i3 = -1,
            l3 = arr3.length - 1;
          while (i3 < l3) {
            $propertyKey = arr3[i3 += 1];
            var $prop = it.util.getProperty($propertyKey),
              $missingProperty = it.util.escapeQuotes($propertyKey),
              $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += ' if ( ' + ($useData) + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\\\'' + (it.util.escapeQuotes($propertyKey)) + '\\\\') ';
            }
            out += ') {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \\\\'' + ('required') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\\\'' + ($missingProperty) + '\\\\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \\\\'';
                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\\\\\\\\\\'' + ($missingProperty) + '\\\\\\\\\\\\'';
                }
                out += '\\\\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
    }
    it.errorPath = $currentErrorPath;
  } else if ($breakOnError) {
    out += ' if (true) {';
  }
  return out;
  }

  },{}],42:[function(require,module,exports){
  'use strict';
  module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  if (($schema || $isData) && it.opts.uniqueItems !== false) {
    if ($isData) {
      out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \\\\'boolean\\\\') ' + ($valid) + ' = false; else { ';
    }
    out += ' var ' + ($valid) + ' = true; if (' + ($data) + '.length > 1) { var i = ' + ($data) + '.length, j; outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } } ';
    if ($isData) {
      out += '  }  ';
    }
    out += ' if (!' + ($valid) + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \\\\'' + ('uniqueItems') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';
      if (it.opts.messages !== false) {
        out += ' , message: \\\\'should NOT have duplicate items (items ## \\\\' + j + \\\\' and \\\\' + i + \\\\' are identical)\\\\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
  }

  },{}],43:[function(require,module,exports){
  'use strict';
  module.exports = function generate_validate(it, $keyword, $ruleType) {
  var out = '';
  var $async = it.schema.$async === true,
    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
    $id = it.self._getId(it.schema);
  if (it.isTop) {
    if ($async) {
      it.async = true;
      var $es7 = it.opts.async == 'es7';
      it.yieldAwait = $es7 ? 'await' : 'yield';
    }
    out += ' var validate = ';
    if ($async) {
      if ($es7) {
        out += ' (async function ';
      } else {
        if (it.opts.async != '*') {
          out += 'co.wrap';
        }
        out += '(function* ';
      }
    } else {
      out += ' (function ';
    }
    out += ' (data, dataPath, parentData, parentDataProperty, rootData) { \\\\'use strict\\\\'; ';
    if ($id && (it.opts.sourceCode || it.opts.processCode)) {
      out += ' ' + ('/\\\\*# sourceURL=' + $id + ' */') + ' ';
    }
  }
  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
    var $keyword = 'false schema';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    if (it.schema === false) {
      if (it.isTop) {
        $breakOnError = true;
      } else {
        out += ' var ' + ($valid) + ' = false; ';
      }
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \\\\'' + ($errorKeyword || 'false schema') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \\\\'boolean schema is false\\\\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
    } else {
      if (it.isTop) {
        if ($async) {
          out += ' return data; ';
        } else {
          out += ' validate.errors = null; return true; ';
        }
      } else {
        out += ' var ' + ($valid) + ' = true; ';
      }
    }
    if (it.isTop) {
      out += ' }); return validate; ';
    }
    return out;
  }
  if (it.isTop) {
    var $top = it.isTop,
      $lvl = it.level = 0,
      $dataLvl = it.dataLevel = 0,
      $data = 'data';
    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
    it.baseId = it.baseId || it.rootId;
    delete it.isTop;
    it.dataPathArr = [undefined];
    out += ' var vErrors = null; ';
    out += ' var errors = 0;     ';
    out += ' if (rootData === undefined) rootData = data; ';
  } else {
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $data = 'data' + ($dataLvl || '');
    if ($id) it.baseId = it.resolve.url(it.baseId, $id);
    if ($async && !it.async) throw new Error('async schema in sync schema');
    out += ' var errs_' + ($lvl) + ' = errors;';
  }
  var $valid = 'valid' + $lvl,
    $breakOnError = !it.opts.allErrors,
    $closingBraces1 = '',
    $closingBraces2 = '';
  var $errorKeyword;
  var $typeSchema = it.schema.type,
    $typeIsArray = Array.isArray($typeSchema);
  if ($typeIsArray && $typeSchema.length == 1) {
    $typeSchema = $typeSchema[0];
    $typeIsArray = false;
  }
  if (it.schema.$ref && $refKeywords) {
    if (it.opts.extendRefs == 'fail') {
      throw new Error('$ref: validation keywords used in schema at path \\"' + it.errSchemaPath + '\\" (see option extendRefs)');
    } else if (it.opts.extendRefs !== true) {
      $refKeywords = false;
      console.warn('$ref: keywords ignored in schema at path \\"' + it.errSchemaPath + '\\"');
    }
  }
  if ($typeSchema) {
    if (it.opts.coerceTypes) {
      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
    }
    var $rulesGroup = it.RULES.types[$typeSchema];
    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
      var $schemaPath = it.schemaPath + '.type',
        $errSchemaPath = it.errSchemaPath + '/type';
      var $schemaPath = it.schemaPath + '.type',
        $errSchemaPath = it.errSchemaPath + '/type',
        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
      out += ' if (' + (it.util[$method]($typeSchema, $data, true)) + ') { ';
      if ($coerceToTypes) {
        var $dataType = 'dataType' + $lvl,
          $coerced = 'coerced' + $lvl;
        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; ';
        if (it.opts.coerceTypes == 'array') {
          out += ' if (' + ($dataType) + ' == \\\\'object\\\\' && Array.isArray(' + ($data) + ')) ' + ($dataType) + ' = \\\\'array\\\\'; ';
        }
        out += ' var ' + ($coerced) + ' = undefined; ';
        var $bracesCoercion = '';
        var arr1 = $coerceToTypes;
        if (arr1) {
          var $type, $i = -1,
            l1 = arr1.length - 1;
          while ($i < l1) {
            $type = arr1[$i += 1];
            if ($i) {
              out += ' if (' + ($coerced) + ' === undefined) { ';
              $bracesCoercion += '}';
            }
            if (it.opts.coerceTypes == 'array' && $type != 'array') {
              out += ' if (' + ($dataType) + ' == \\\\'array\\\\' && ' + ($data) + '.length == 1) { ' + ($coerced) + ' = ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + ';  } ';
            }
            if ($type == 'string') {
              out += ' if (' + ($dataType) + ' == \\\\'number\\\\' || ' + ($dataType) + ' == \\\\'boolean\\\\') ' + ($coerced) + ' = \\\\'\\\\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \\\\'\\\\'; ';
            } else if ($type == 'number' || $type == 'integer') {
              out += ' if (' + ($dataType) + ' == \\\\'boolean\\\\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \\\\'string\\\\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';
              if ($type == 'integer') {
                out += ' && !(' + ($data) + ' % 1)';
              }
              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';
            } else if ($type == 'boolean') {
              out += ' if (' + ($data) + ' === \\\\'false\\\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \\\\'true\\\\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';
            } else if ($type == 'null') {
              out += ' if (' + ($data) + ' === \\\\'\\\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';
            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
              out += ' if (' + ($dataType) + ' == \\\\'string\\\\' || ' + ($dataType) + ' == \\\\'number\\\\' || ' + ($dataType) + ' == \\\\'boolean\\\\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';
            }
          }
        }
        out += ' ' + ($bracesCoercion) + ' if (' + ($coerced) + ' === undefined) {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \\\\'' + ($errorKeyword || 'type') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\\\'';
          if ($typeIsArray) {
            out += '' + ($typeSchema.join(\\",\\"));
          } else {
            out += '' + ($typeSchema);
          }
          out += '\\\\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \\\\'should be ';
            if ($typeIsArray) {
              out += '' + ($typeSchema.join(\\",\\"));
            } else {
              out += '' + ($typeSchema);
            }
            out += '\\\\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else {  ';
        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';
        if (!$dataLvl) {
          out += 'if (' + ($parentData) + ' !== undefined)';
        }
        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';
      } else {
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \\\\'' + ($errorKeyword || 'type') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\\\'';
          if ($typeIsArray) {
            out += '' + ($typeSchema.join(\\",\\"));
          } else {
            out += '' + ($typeSchema);
          }
          out += '\\\\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \\\\'should be ';
            if ($typeIsArray) {
              out += '' + ($typeSchema.join(\\",\\"));
            } else {
              out += '' + ($typeSchema);
            }
            out += '\\\\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      }
      out += ' } ';
    }
  }
  if (it.schema.$ref && !$refKeywords) {
    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';
    if ($breakOnError) {
      out += ' } if (errors === ';
      if ($top) {
        out += '0';
      } else {
        out += 'errs_' + ($lvl);
      }
      out += ') { ';
      $closingBraces2 += '}';
    }
  } else {
    if (it.opts.v5 && it.schema.patternGroups) {
      console.warn('keyword \\"patternGroups\\" is deprecated and disabled. Use option patternGroups: true to enable.');
    }
    var arr2 = it.RULES;
    if (arr2) {
      var $rulesGroup, i2 = -1,
        l2 = arr2.length - 1;
      while (i2 < l2) {
        $rulesGroup = arr2[i2 += 1];
        if ($shouldUseGroup($rulesGroup)) {
          if ($rulesGroup.type) {
            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data)) + ') { ';
          }
          if (it.opts.useDefaults && !it.compositeRule) {
            if ($rulesGroup.type == 'object' && it.schema.properties) {
              var $schema = it.schema.properties,
                $schemaKeys = Object.keys($schema);
              var arr3 = $schemaKeys;
              if (arr3) {
                var $propertyKey, i3 = -1,
                  l3 = arr3.length - 1;
                while (i3 < l3) {
                  $propertyKey = arr3[i3 += 1];
                  var $sch = $schema[$propertyKey];
                  if ($sch.default !== undefined) {
                    var $passData = $data + it.util.getProperty($propertyKey);
                    out += '  if (' + ($passData) + ' === undefined) ' + ($passData) + ' = ';
                    if (it.opts.useDefaults == 'shared') {
                      out += ' ' + (it.useDefault($sch.default)) + ' ';
                    } else {
                      out += ' ' + (JSON.stringify($sch.default)) + ' ';
                    }
                    out += '; ';
                  }
                }
              }
            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
              var arr4 = it.schema.items;
              if (arr4) {
                var $sch, $i = -1,
                  l4 = arr4.length - 1;
                while ($i < l4) {
                  $sch = arr4[$i += 1];
                  if ($sch.default !== undefined) {
                    var $passData = $data + '[' + $i + ']';
                    out += '  if (' + ($passData) + ' === undefined) ' + ($passData) + ' = ';
                    if (it.opts.useDefaults == 'shared') {
                      out += ' ' + (it.useDefault($sch.default)) + ' ';
                    } else {
                      out += ' ' + (JSON.stringify($sch.default)) + ' ';
                    }
                    out += '; ';
                  }
                }
              }
            }
          }
          var arr5 = $rulesGroup.rules;
          if (arr5) {
            var $rule, i5 = -1,
              l5 = arr5.length - 1;
            while (i5 < l5) {
              $rule = arr5[i5 += 1];
              if ($shouldUseRule($rule)) {
                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                if ($code) {
                  out += ' ' + ($code) + ' ';
                  if ($breakOnError) {
                    $closingBraces1 += '}';
                  }
                }
              }
            }
          }
          if ($breakOnError) {
            out += ' ' + ($closingBraces1) + ' ';
            $closingBraces1 = '';
          }
          if ($rulesGroup.type) {
            out += ' } ';
            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
              out += ' else { ';
              var $schemaPath = it.schemaPath + '.type',
                $errSchemaPath = it.errSchemaPath + '/type';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \\\\'' + ($errorKeyword || 'type') + '\\\\' , dataPath: (dataPath || \\\\'\\\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\\\'';
                if ($typeIsArray) {
                  out += '' + ($typeSchema.join(\\",\\"));
                } else {
                  out += '' + ($typeSchema);
                }
                out += '\\\\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \\\\'should be ';
                  if ($typeIsArray) {
                    out += '' + ($typeSchema.join(\\",\\"));
                  } else {
                    out += '' + ($typeSchema);
                  }
                  out += '\\\\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } ';
            }
          }
          if ($breakOnError) {
            out += ' if (errors === ';
            if ($top) {
              out += '0';
            } else {
              out += 'errs_' + ($lvl);
            }
            out += ') { ';
            $closingBraces2 += '}';
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += ' ' + ($closingBraces2) + ' ';
  }
  if ($top) {
    if ($async) {
      out += ' if (errors === 0) return data;           ';
      out += ' else throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; ';
      out += ' return errors === 0;       ';
    }
    out += ' }); return validate;';
  } else {
    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';
  }
  out = it.util.cleanUpCode(out);
  if ($top) {
    out = it.util.finalCleanUpCode(out, $async);
  }

  function $shouldUseGroup($rulesGroup) {
    var rules = $rulesGroup.rules;
    for (var i = 0; i < rules.length; i++)
      if ($shouldUseRule(rules[i])) return true;
  }

  function $shouldUseRule($rule) {
    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImlementsSomeKeyword($rule));
  }

  function $ruleImlementsSomeKeyword($rule) {
    var impl = $rule.implements;
    for (var i = 0; i < impl.length; i++)
      if (it.schema[impl[i]] !== undefined) return true;
  }
  return out;
  }

  },{}],44:[function(require,module,exports){
  'use strict';

  var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
  var customRuleCode = require('./dotjs/custom');

  module.exports = {
  add: addKeyword,
  get: getKeyword,
  remove: removeKeyword
  };

  /**
  * Define custom keyword
  * @this  Ajv
  * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
  * @param {Object} definition keyword definition object with properties \`type\` (type(s) which the keyword applies to), \`validate\` or \`compile\`.
  */
  function addKeyword(keyword, definition) {
  /* jshint validthis: true */
  /* eslint no-shadow: 0 */
  var RULES = this.RULES;

  if (RULES.keywords[keyword])
    throw new Error('Keyword ' + keyword + ' is already defined');

  if (!IDENTIFIER.test(keyword))
    throw new Error('Keyword ' + keyword + ' is not a valid identifier');

  if (definition) {
    if (definition.macro && definition.valid !== undefined)
      throw new Error('\\"valid\\" option cannot be used with macro keywords');

    var dataType = definition.type;
    if (Array.isArray(dataType)) {
      var i, len = dataType.length;
      for (i=0; i<len; i++) checkDataType(dataType[i]);
      for (i=0; i<len; i++) _addRule(keyword, dataType[i], definition);
    } else {
      if (dataType) checkDataType(dataType);
      _addRule(keyword, dataType, definition);
    }

    var $data = definition.$data === true && this._opts.$data;
    if ($data && !definition.validate)
      throw new Error('$data support: \\"validate\\" function is not defined');

    var metaSchema = definition.metaSchema;
    if (metaSchema) {
      if ($data) {
        metaSchema = {
          anyOf: [
            metaSchema,
            { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#' }
          ]
        };
      }
      definition.validateSchema = this.compile(metaSchema, true);
    }
  }

  RULES.keywords[keyword] = RULES.all[keyword] = true;


  function _addRule(keyword, dataType, definition) {
    var ruleGroup;
    for (var i=0; i<RULES.length; i++) {
      var rg = RULES[i];
      if (rg.type == dataType) {
        ruleGroup = rg;
        break;
      }
    }

    if (!ruleGroup) {
      ruleGroup = { type: dataType, rules: [] };
      RULES.push(ruleGroup);
    }

    var rule = {
      keyword: keyword,
      definition: definition,
      custom: true,
      code: customRuleCode,
      implements: definition.implements
    };
    ruleGroup.rules.push(rule);
    RULES.custom[keyword] = rule;
  }


  function checkDataType(dataType) {
    if (!RULES.types[dataType]) throw new Error('Unknown type ' + dataType);
  }
  }


  /**
  * Get keyword
  * @this  Ajv
  * @param {String} keyword pre-defined or custom keyword.
  * @return {Object|Boolean} custom keyword definition, \`true\` if it is a predefined keyword, \`false\` otherwise.
  */
  function getKeyword(keyword) {
  /* jshint validthis: true */
  var rule = this.RULES.custom[keyword];
  return rule ? rule.definition : this.RULES.keywords[keyword] || false;
  }


  /**
  * Remove keyword
  * @this  Ajv
  * @param {String} keyword pre-defined or custom keyword.
  */
  function removeKeyword(keyword) {
  /* jshint validthis: true */
  var RULES = this.RULES;
  delete RULES.keywords[keyword];
  delete RULES.all[keyword];
  delete RULES.custom[keyword];
  for (var i=0; i<RULES.length; i++) {
    var rules = RULES[i].rules;
    for (var j=0; j<rules.length; j++) {
      if (rules[j].keyword == keyword) {
        rules.splice(j, 1);
        break;
      }
    }
  }
  }

  },{\\"./dotjs/custom\\":29}],45:[function(require,module,exports){
  'use strict';

  var META_SCHEMA_ID = 'http://json-schema.org/draft-06/schema';

  module.exports = function (ajv) {
  var defaultMeta = ajv._opts.defaultMeta;
  var metaSchemaRef = typeof defaultMeta == 'string'
                      ? { $ref: defaultMeta }
                      : ajv.getSchema(META_SCHEMA_ID)
                        ? { $ref: META_SCHEMA_ID }
                        : {};

  ajv.addKeyword('patternGroups', {
    // implemented in properties.jst
    metaSchema: {
      type: 'object',
      additionalProperties: {
        type: 'object',
        required: [ 'schema' ],
        properties: {
          maximum: {
            type: 'integer',
            minimum: 0
          },
          minimum: {
            type: 'integer',
            minimum: 0
          },
          schema: metaSchemaRef
        },
        additionalProperties: false
      }
    }
  });
  ajv.RULES.all.properties.implements.push('patternGroups');
  };

  },{}],46:[function(require,module,exports){
  module.exports={
    \\"$schema\\": \\"http://json-schema.org/draft-06/schema#\\",
    \\"$id\\": \\"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#\\",
    \\"description\\": \\"Meta-schema for $data reference (JSON-schema extension proposal)\\",
    \\"type\\": \\"object\\",
    \\"required\\": [ \\"$data\\" ],
    \\"properties\\": {
        \\"$data\\": {
            \\"type\\": \\"string\\",
            \\"anyOf\\": [
                { \\"format\\": \\"relative-json-pointer\\" },
                { \\"format\\": \\"json-pointer\\" }
            ]
        }
    },
    \\"additionalProperties\\": false
  }

  },{}],47:[function(require,module,exports){
  module.exports={
    \\"$schema\\": \\"http://json-schema.org/draft-06/schema#\\",
    \\"$id\\": \\"http://json-schema.org/draft-06/schema#\\",
    \\"title\\": \\"Core schema meta-schema\\",
    \\"definitions\\": {
        \\"schemaArray\\": {
            \\"type\\": \\"array\\",
            \\"minItems\\": 1,
            \\"items\\": { \\"$ref\\": \\"#\\" }
        },
        \\"nonNegativeInteger\\": {
            \\"type\\": \\"integer\\",
            \\"minimum\\": 0
        },
        \\"nonNegativeIntegerDefault0\\": {
            \\"allOf\\": [
                { \\"$ref\\": \\"#/definitions/nonNegativeInteger\\" },
                { \\"default\\": 0 }
            ]
        },
        \\"simpleTypes\\": {
            \\"enum\\": [
                \\"array\\",
                \\"boolean\\",
                \\"integer\\",
                \\"null\\",
                \\"number\\",
                \\"object\\",
                \\"string\\"
            ]
        },
        \\"stringArray\\": {
            \\"type\\": \\"array\\",
            \\"items\\": { \\"type\\": \\"string\\" },
            \\"uniqueItems\\": true,
            \\"default\\": []
        }
    },
    \\"type\\": [\\"object\\", \\"boolean\\"],
    \\"properties\\": {
        \\"$id\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uri-reference\\"
        },
        \\"$schema\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uri\\"
        },
        \\"$ref\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uri-reference\\"
        },
        \\"title\\": {
            \\"type\\": \\"string\\"
        },
        \\"description\\": {
            \\"type\\": \\"string\\"
        },
        \\"default\\": {},
        \\"multipleOf\\": {
            \\"type\\": \\"number\\",
            \\"exclusiveMinimum\\": 0
        },
        \\"maximum\\": {
            \\"type\\": \\"number\\"
        },
        \\"exclusiveMaximum\\": {
            \\"type\\": \\"number\\"
        },
        \\"minimum\\": {
            \\"type\\": \\"number\\"
        },
        \\"exclusiveMinimum\\": {
            \\"type\\": \\"number\\"
        },
        \\"maxLength\\": { \\"$ref\\": \\"#/definitions/nonNegativeInteger\\" },
        \\"minLength\\": { \\"$ref\\": \\"#/definitions/nonNegativeIntegerDefault0\\" },
        \\"pattern\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"regex\\"
        },
        \\"additionalItems\\": { \\"$ref\\": \\"#\\" },
        \\"items\\": {
            \\"anyOf\\": [
                { \\"$ref\\": \\"#\\" },
                { \\"$ref\\": \\"#/definitions/schemaArray\\" }
            ],
            \\"default\\": {}
        },
        \\"maxItems\\": { \\"$ref\\": \\"#/definitions/nonNegativeInteger\\" },
        \\"minItems\\": { \\"$ref\\": \\"#/definitions/nonNegativeIntegerDefault0\\" },
        \\"uniqueItems\\": {
            \\"type\\": \\"boolean\\",
            \\"default\\": false
        },
        \\"contains\\": { \\"$ref\\": \\"#\\" },
        \\"maxProperties\\": { \\"$ref\\": \\"#/definitions/nonNegativeInteger\\" },
        \\"minProperties\\": { \\"$ref\\": \\"#/definitions/nonNegativeIntegerDefault0\\" },
        \\"required\\": { \\"$ref\\": \\"#/definitions/stringArray\\" },
        \\"additionalProperties\\": { \\"$ref\\": \\"#\\" },
        \\"definitions\\": {
            \\"type\\": \\"object\\",
            \\"additionalProperties\\": { \\"$ref\\": \\"#\\" },
            \\"default\\": {}
        },
        \\"properties\\": {
            \\"type\\": \\"object\\",
            \\"additionalProperties\\": { \\"$ref\\": \\"#\\" },
            \\"default\\": {}
        },
        \\"patternProperties\\": {
            \\"type\\": \\"object\\",
            \\"additionalProperties\\": { \\"$ref\\": \\"#\\" },
            \\"default\\": {}
        },
        \\"dependencies\\": {
            \\"type\\": \\"object\\",
            \\"additionalProperties\\": {
                \\"anyOf\\": [
                    { \\"$ref\\": \\"#\\" },
                    { \\"$ref\\": \\"#/definitions/stringArray\\" }
                ]
            }
        },
        \\"propertyNames\\": { \\"$ref\\": \\"#\\" },
        \\"const\\": {},
        \\"enum\\": {
            \\"type\\": \\"array\\",
            \\"minItems\\": 1,
            \\"uniqueItems\\": true
        },
        \\"type\\": {
            \\"anyOf\\": [
                { \\"$ref\\": \\"#/definitions/simpleTypes\\" },
                {
                    \\"type\\": \\"array\\",
                    \\"items\\": { \\"$ref\\": \\"#/definitions/simpleTypes\\" },
                    \\"minItems\\": 1,
                    \\"uniqueItems\\": true
                }
            ]
        },
        \\"format\\": { \\"type\\": \\"string\\" },
        \\"allOf\\": { \\"$ref\\": \\"#/definitions/schemaArray\\" },
        \\"anyOf\\": { \\"$ref\\": \\"#/definitions/schemaArray\\" },
        \\"oneOf\\": { \\"$ref\\": \\"#/definitions/schemaArray\\" },
        \\"not\\": { \\"$ref\\": \\"#\\" }
    },
    \\"default\\": {}
  }

  },{}],48:[function(require,module,exports){

  /**
  * slice() reference.
  */

  var slice = Array.prototype.slice;

  /**
  * Expose \`co\`.
  */

  module.exports = co['default'] = co.co = co;

  /**
  * Wrap the given generator \`fn\` into a
  * function that returns a promise.
  * This is a separate function so that
  * every \`co()\` call doesn't create a new,
  * unnecessary closure.
  *
  * @param {GeneratorFunction} fn
  * @return {Function}
  * @api public
  */

  co.wrap = function (fn) {
  createPromise.__generatorFunction__ = fn;
  return createPromise;
  function createPromise() {
    return co.call(this, fn.apply(this, arguments));
  }
  };

  /**
  * Execute the generator function or a generator
  * and return a promise.
  *
  * @param {Function} fn
  * @return {Promise}
  * @api public
  */

  function co(gen) {
  var ctx = this;
  var args = slice.call(arguments, 1)

  // we wrap everything in a promise to avoid promise chaining,
  // which leads to memory leak errors.
  // see https://github.com/tj/co/issues/180
  return new Promise(function(resolve, reject) {
    if (typeof gen === 'function') gen = gen.apply(ctx, args);
    if (!gen || typeof gen.next !== 'function') return resolve(gen);

    onFulfilled();

    /**
     * @param {Mixed} res
     * @return {Promise}
     * @api private
     */

    function onFulfilled(res) {
      var ret;
      try {
        ret = gen.next(res);
      } catch (e) {
        return reject(e);
      }
      next(ret);
    }

    /**
     * @param {Error} err
     * @return {Promise}
     * @api private
     */

    function onRejected(err) {
      var ret;
      try {
        ret = gen.throw(err);
      } catch (e) {
        return reject(e);
      }
      next(ret);
    }

    /**
     * Get the next value in the generator,
     * return a promise.
     *
     * @param {Object} ret
     * @return {Promise}
     * @api private
     */

    function next(ret) {
      if (ret.done) return resolve(ret.value);
      var value = toPromise.call(ctx, ret.value);
      if (value && isPromise(value)) return value.then(onFulfilled, onRejected);
      return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '
        + 'but the following object was passed: \\"' + String(ret.value) + '\\"'));
    }
  });
  }

  /**
  * Convert a \`yield\`ed value into a promise.
  *
  * @param {Mixed} obj
  * @return {Promise}
  * @api private
  */

  function toPromise(obj) {
  if (!obj) return obj;
  if (isPromise(obj)) return obj;
  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);
  if ('function' == typeof obj) return thunkToPromise.call(this, obj);
  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);
  if (isObject(obj)) return objectToPromise.call(this, obj);
  return obj;
  }

  /**
  * Convert a thunk to a promise.
  *
  * @param {Function}
  * @return {Promise}
  * @api private
  */

  function thunkToPromise(fn) {
  var ctx = this;
  return new Promise(function (resolve, reject) {
    fn.call(ctx, function (err, res) {
      if (err) return reject(err);
      if (arguments.length > 2) res = slice.call(arguments, 1);
      resolve(res);
    });
  });
  }

  /**
  * Convert an array of \\"yieldables\\" to a promise.
  * Uses \`Promise.all()\` internally.
  *
  * @param {Array} obj
  * @return {Promise}
  * @api private
  */

  function arrayToPromise(obj) {
  return Promise.all(obj.map(toPromise, this));
  }

  /**
  * Convert an object of \\"yieldables\\" to a promise.
  * Uses \`Promise.all()\` internally.
  *
  * @param {Object} obj
  * @return {Promise}
  * @api private
  */

  function objectToPromise(obj){
  var results = new obj.constructor();
  var keys = Object.keys(obj);
  var promises = [];
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var promise = toPromise.call(this, obj[key]);
    if (promise && isPromise(promise)) defer(promise, key);
    else results[key] = obj[key];
  }
  return Promise.all(promises).then(function () {
    return results;
  });

  function defer(promise, key) {
    // predefine the key in the result
    results[key] = undefined;
    promises.push(promise.then(function (res) {
      results[key] = res;
    }));
  }
  }

  /**
  * Check if \`obj\` is a promise.
  *
  * @param {Object} obj
  * @return {Boolean}
  * @api private
  */

  function isPromise(obj) {
  return 'function' == typeof obj.then;
  }

  /**
  * Check if \`obj\` is a generator.
  *
  * @param {Mixed} obj
  * @return {Boolean}
  * @api private
  */

  function isGenerator(obj) {
  return 'function' == typeof obj.next && 'function' == typeof obj.throw;
  }

  /**
  * Check if \`obj\` is a generator function.
  *
  * @param {Mixed} obj
  * @return {Boolean}
  * @api private
  */
  function isGeneratorFunction(obj) {
  var constructor = obj.constructor;
  if (!constructor) return false;
  if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;
  return isGenerator(constructor.prototype);
  }

  /**
  * Check for plain object.
  *
  * @param {Mixed} val
  * @return {Boolean}
  * @api private
  */

  function isObject(val) {
  return Object == val.constructor;
  }

  },{}],49:[function(require,module,exports){
  'use strict';

  module.exports = function equal(a, b) {
  if (a === b) return true;

  var arrA = Array.isArray(a)
    , arrB = Array.isArray(b)
    , i;

  if (arrA && arrB) {
    if (a.length != b.length) return false;
    for (i = 0; i < a.length; i++)
      if (!equal(a[i], b[i])) return false;
    return true;
  }

  if (arrA != arrB) return false;

  if (a && b && typeof a === 'object' && typeof b === 'object') {
    var keys = Object.keys(a);
    if (keys.length !== Object.keys(b).length) return false;

    var dateA = a instanceof Date
      , dateB = b instanceof Date;
    if (dateA && dateB) return a.getTime() == b.getTime();
    if (dateA != dateB) return false;

    var regexpA = a instanceof RegExp
      , regexpB = b instanceof RegExp;
    if (regexpA && regexpB) return a.toString() == b.toString();
    if (regexpA != regexpB) return false;

    for (i = 0; i < keys.length; i++)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = 0; i < keys.length; i++)
      if(!equal(a[keys[i]], b[keys[i]])) return false;

    return true;
  }

  return false;
  };

  },{}],50:[function(require,module,exports){
  'use strict';

  var traverse = module.exports = function (schema, opts, cb) {
  if (typeof opts == 'function') {
    cb = opts;
    opts = {};
  }
  _traverse(opts, cb, schema, '', schema);
  };


  traverse.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true
  };

  traverse.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
  };

  traverse.propsKeywords = {
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
  };

  traverse.skipKeywords = {
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
  };


  function _traverse(opts, cb, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
    cb(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    for (var key in schema) {
      var sch = schema[key];
      if (Array.isArray(sch)) {
        if (key in traverse.arrayKeywords) {
          for (var i=0; i<sch.length; i++)
            _traverse(opts, cb, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
        }
      } else if (key in traverse.propsKeywords) {
        if (sch && typeof sch == 'object') {
          for (var prop in sch)
            _traverse(opts, cb, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
        }
      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
        _traverse(opts, cb, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
      }
    }
  }
  }


  function escapeJsonPtr(str) {
  return str.replace(/~/g, '~0').replace(/\\\\//g, '~1');
  }

  },{}],51:[function(require,module,exports){
  var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');

  module.exports = function (obj, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = { cmp: opts };
    var space = opts.space || '';
    if (typeof space === 'number') space = Array(space+1).join(' ');
    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
    var replacer = opts.replacer || function(key, value) { return value; };

    var cmp = opts.cmp && (function (f) {
        return function (node) {
            return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
            };
        };
    })(opts.cmp);

    var seen = [];
    return (function stringify (parent, key, node, level) {
        var indent = space ? ('\\\\n' + new Array(level + 1).join(space)) : '';
        var colonSeparator = space ? ': ' : ':';

        if (node && node.toJSON && typeof node.toJSON === 'function') {
            node = node.toJSON();
        }

        node = replacer.call(parent, key, node);

        if (node === undefined) {
            return;
        }
        if (typeof node !== 'object' || node === null) {
            return json.stringify(node);
        }
        if (isArray(node)) {
            var out = [];
            for (var i = 0; i < node.length; i++) {
                var item = stringify(node, i, node[i], level+1) || json.stringify(null);
                out.push(indent + space + item);
            }
            return '[' + out.join(',') + indent + ']';
        }
        else {
            if (seen.indexOf(node) !== -1) {
                if (cycles) return json.stringify('__cycle__');
                throw new TypeError('Converting circular structure to JSON');
            }
            else seen.push(node);

            var keys = objectKeys(node).sort(cmp && cmp(node));
            var out = [];
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var value = stringify(node, key, node[key], level+1);

                if(!value) continue;

                var keyValue = json.stringify(key)
                    + colonSeparator
                    + value;
                ;
                out.push(indent + space + keyValue);
            }
            seen.splice(seen.indexOf(node), 1);
            return '{' + out.join(',') + indent + '}';
        }
    })({ '': obj }, '', obj, 0);
  };

  var isArray = Array.isArray || function (x) {
    return {}.toString.call(x) === '[object Array]';
  };

  var objectKeys = Object.keys || function (obj) {
    var has = Object.prototype.hasOwnProperty || function () { return true };
    var keys = [];
    for (var key in obj) {
        if (has.call(obj, key)) keys.push(key);
    }
    return keys;
  };

  },{\\"jsonify\\":52}],52:[function(require,module,exports){
  exports.parse = require('./lib/parse');
  exports.stringify = require('./lib/stringify');

  },{\\"./lib/parse\\":53,\\"./lib/stringify\\":54}],53:[function(require,module,exports){
  var at, // The index of the current character
    ch, // The current character
    escapee = {
        '\\"':  '\\"',
        '\\\\\\\\': '\\\\\\\\',
        '/':  '/',
        b:    '\\\\b',
        f:    '\\\\f',
        n:    '\\\\n',
        r:    '\\\\r',
        t:    '\\\\t'
    },
    text,

    error = function (m) {
        // Call error when something is wrong.
        throw {
            name:    'SyntaxError',
            message: m,
            at:      at,
            text:    text
        };
    },

    next = function (c) {
        // If a c parameter is provided, verify that it matches the current character.
        if (c && c !== ch) {
            error(\\"Expected '\\" + c + \\"' instead of '\\" + ch + \\"'\\");
        }

        // Get the next character. When there are no more characters,
        // return the empty string.

        ch = text.charAt(at);
        at += 1;
        return ch;
    },

    number = function () {
        // Parse a number value.
        var number,
            string = '';

        if (ch === '-') {
            string = '-';
            next('-');
        }
        while (ch >= '0' && ch <= '9') {
            string += ch;
            next();
        }
        if (ch === '.') {
            string += '.';
            while (next() && ch >= '0' && ch <= '9') {
                string += ch;
            }
        }
        if (ch === 'e' || ch === 'E') {
            string += ch;
            next();
            if (ch === '-' || ch === '+') {
                string += ch;
                next();
            }
            while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
            }
        }
        number = +string;
        if (!isFinite(number)) {
            error(\\"Bad number\\");
        } else {
            return number;
        }
    },

    string = function () {
        // Parse a string value.
        var hex,
            i,
            string = '',
            uffff;

        // When parsing for string values, we must look for \\" and \\\\ characters.
        if (ch === '\\"') {
            while (next()) {
                if (ch === '\\"') {
                    next();
                    return string;
                } else if (ch === '\\\\\\\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    } else {
                        break;
                    }
                } else {
                    string += ch;
                }
            }
        }
        error(\\"Bad string\\");
    },

    white = function () {

  // Skip whitespace.

        while (ch && ch <= ' ') {
            next();
        }
    },

    word = function () {

  // true, false, or null.

        switch (ch) {
        case 't':
            next('t');
            next('r');
            next('u');
            next('e');
            return true;
        case 'f':
            next('f');
            next('a');
            next('l');
            next('s');
            next('e');
            return false;
        case 'n':
            next('n');
            next('u');
            next('l');
            next('l');
            return null;
        }
        error(\\"Unexpected '\\" + ch + \\"'\\");
    },

    value,  // Place holder for the value function.

    array = function () {

  // Parse an array value.

        var array = [];

        if (ch === '[') {
            next('[');
            white();
            if (ch === ']') {
                next(']');
                return array;   // empty array
            }
            while (ch) {
                array.push(value());
                white();
                if (ch === ']') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error(\\"Bad array\\");
    },

    object = function () {

  // Parse an object value.

        var key,
            object = {};

        if (ch === '{') {
            next('{');
            white();
            if (ch === '}') {
                next('}');
                return object;   // empty object
            }
            while (ch) {
                key = string();
                white();
                next(':');
                if (Object.hasOwnProperty.call(object, key)) {
                    error('Duplicate key \\"' + key + '\\"');
                }
                object[key] = value();
                white();
                if (ch === '}') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error(\\"Bad object\\");
    };

  value = function () {

  // Parse a JSON value. It could be an object, an array, a string, a number,
  // or a word.

    white();
    switch (ch) {
    case '{':
        return object();
    case '[':
        return array();
    case '\\"':
        return string();
    case '-':
        return number();
    default:
        return ch >= '0' && ch <= '9' ? number() : word();
    }
  };

  // Return the json_parse function. It will have access to all of the above
  // functions and variables.

  module.exports = function (source, reviver) {
    var result;

    text = source;
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) {
        error(\\"Syntax error\\");
    }

    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.

    return typeof reviver === 'function' ? (function walk(holder, key) {
        var k, v, value = holder[key];
        if (value && typeof value === 'object') {
            for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = walk(value, k);
                    if (v !== undefined) {
                        value[k] = v;
                    } else {
                        delete value[k];
                    }
                }
            }
        }
        return reviver.call(holder, key, value);
    }({'': result}, '')) : result;
  };

  },{}],54:[function(require,module,exports){
  var cx = /[\\\\u0000\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g,
    escapable = /[\\\\\\\\\\\\\\"\\\\x00-\\\\x1f\\\\x7f-\\\\x9f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g,
    gap,
    indent,
    meta = {    // table of character substitutions
        '\\\\b': '\\\\\\\\b',
        '\\\\t': '\\\\\\\\t',
        '\\\\n': '\\\\\\\\n',
        '\\\\f': '\\\\\\\\f',
        '\\\\r': '\\\\\\\\r',
        '\\"' : '\\\\\\\\\\"',
        '\\\\\\\\': '\\\\\\\\\\\\\\\\'
    },
    rep;

  function quote(string) {
    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.

    escapable.lastIndex = 0;
    return escapable.test(string) ? '\\"' + string.replace(escapable, function (a) {
        var c = meta[a];
        return typeof c === 'string' ? c :
            '\\\\\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '\\"' : '\\"' + string + '\\"';
  }

  function str(key, holder) {
    // Produce a string from holder[key].
    var i,          // The loop counter.
        k,          // The member key.
        v,          // The member value.
        length,
        mind = gap,
        partial,
        value = holder[key];

    // If the value has a toJSON method, call it to obtain a replacement value.
    if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
        value = value.toJSON(key);
    }

    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.
    if (typeof rep === 'function') {
        value = rep.call(holder, key, value);
    }

    // What happens next depends on the value's type.
    switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);

        case 'object':
            if (!value) return 'null';
            gap += indent;
            partial = [];

            // Array.isArray
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

                // Join all of the elements together, separated with commas, and
                // wrap them in brackets.
                v = partial.length === 0 ? '[]' : gap ?
                    '[\\\\n' + gap + partial.join(',\\\\n' + gap) + '\\\\n' + mind + ']' :
                    '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            else {
                // Otherwise, iterate through all of the keys in the object.
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

        // Join all of the member texts together, separated with commas,
        // and wrap them in braces.

        v = partial.length === 0 ? '{}' : gap ?
            '{\\\\n' + gap + partial.join(',\\\\n' + gap) + '\\\\n' + mind + '}' :
            '{' + partial.join(',') + '}';
        gap = mind;
        return v;
    }
  }

  module.exports = function (value, replacer, space) {
    var i;
    gap = '';
    indent = '';

    // If the space parameter is a number, make an indent string containing that
    // many spaces.
    if (typeof space === 'number') {
        for (i = 0; i < space; i += 1) {
            indent += ' ';
        }
    }
    // If the space parameter is a string, it will be used as the indent string.
    else if (typeof space === 'string') {
        indent = space;
    }

    // If there is a replacer, it must be a function or an array.
    // Otherwise, throw an error.
    rep = replacer;
    if (replacer && typeof replacer !== 'function'
    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
        throw new Error('JSON.stringify');
    }

    // Make a fake root object containing our value under the key of ''.
    // Return the result of stringifying the value.
    return str('', {'': value});
  };

  },{}]},{},[7])(7)
  });

    /* plv8 bundle ends */

    return module;
  })();

",
                          },
                        },
                      },
                    },
                  ],
                ],
              },
            },
          },
        },
        "stmt_len": 276141,
        "stmt_location": 241,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "TransactionStmt": Object {
            "kind": 2,
          },
        },
        "stmt_len": 8,
        "stmt_location": 276383,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink insert 2`] = `
"BEGIN;
INSERT INTO shoelace_data VALUES (1, 2, 3, 'truth', (TRUE));
INSERT INTO v8.modules ( name, code ) VALUES ('ajv', '
(function () {
var module = {
exports: { }
};
var exports = module.exports;
/* plv8 bundle begins */
(function(f){if(typeof exports===\\"object\\"&&typeof module!==\\"undefined\\"){module.exports=f()}else if(typeof define===\\"function\\"&&define.amd){define([],f)}else{var g;if(typeof window!==\\"undefined\\"){g=window}else if(typeof global!==\\"undefined\\"){g=global}else if(typeof self!==\\"undefined\\"){g=self}else{g=this}g.ajv = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\\"function\\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\\"Cannot find module ''\\"+o+\\"''\\");throw f.code=\\"MODULE_NOT_FOUND\\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\\"function\\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {
/** Detect free variables */
var freeExports = typeof exports == ''object'' && exports &&
!exports.nodeType && exports;
var freeModule = typeof module == ''object'' && module &&
!module.nodeType && module;
var freeGlobal = typeof global == ''object'' && global;
if (
freeGlobal.global === freeGlobal ||
freeGlobal.window === freeGlobal ||
freeGlobal.self === freeGlobal
) {
root = freeGlobal;
}
/**
* The \`punycode\` object.
* @name punycode
* @type Object
*/
var punycode,
/** Highest positive signed 32-bit float value */
maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
/** Bootstring parameters */
base = 36,
tMin = 1,
tMax = 26,
skew = 38,
damp = 700,
initialBias = 72,
initialN = 128, // 0x80
delimiter = ''-'', // ''\\\\x2D''
/** Regular expressions */
regexPunycode = /^xn--/,
regexNonASCII = /[^\\\\x20-\\\\x7E]/, // unprintable ASCII chars + non-ASCII chars
regexSeparators = /[\\\\x2E\\\\u3002\\\\uFF0E\\\\uFF61]/g, // RFC 3490 separators
/** Error messages */
errors = {
''overflow'': ''Overflow: input needs wider integers to process'',
''not-basic'': ''Illegal input >= 0x80 (not a basic code point)'',
''invalid-input'': ''Invalid input''
},
/** Convenience shortcuts */
baseMinusTMin = base - tMin,
floor = Math.floor,
stringFromCharCode = String.fromCharCode,
/** Temporary variable */
key;
/*--------------------------------------------------------------------------*/
/**
* A generic error utility function.
* @private
* @param {String} type The error type.
* @returns {Error} Throws a \`RangeError\` with the applicable error message.
*/
function error(type) {
throw new RangeError(errors[type]);
}
/**
* A generic \`Array#map\` utility function.
* @private
* @param {Array} array The array to iterate over.
* @param {Function} callback The function that gets called for every array
* item.
* @returns {Array} A new array of values returned by the callback function.
*/
function map(array, fn) {
var length = array.length;
var result = [];
while (length--) {
result[length] = fn(array[length]);
}
return result;
}
/**
* A simple \`Array#map\`-like wrapper to work with domain name strings or email
* addresses.
* @private
* @param {String} domain The domain name or email address.
* @param {Function} callback The function that gets called for every
* character.
* @returns {Array} A new string of characters returned by the callback
* function.
*/
function mapDomain(string, fn) {
var parts = string.split(''@'');
var result = '''';
if (parts.length > 1) {
// In email addresses, only the domain name should be punycoded. Leave
// the local part (i.e. everything up to \`@\`) intact.
result = parts[0] + ''@'';
string = parts[1];
}
// Avoid \`split(regex)\` for IE8 compatibility. See #17.
string = string.replace(regexSeparators, ''\\\\x2E'');
var labels = string.split(''.'');
var encoded = map(labels, fn).join(''.'');
return result + encoded;
}
/**
* Creates an array containing the numeric code points of each Unicode
* character in the string. While JavaScript uses UCS-2 internally,
* this function will convert a pair of surrogate halves (each of which
* UCS-2 exposes as separate characters) into a single code point,
* matching UTF-16.
* @see \`punycode.ucs2.encode\`
* @see <https://mathiasbynens.be/notes/javascript-encoding>
* @memberOf punycode.ucs2
* @name decode
* @param {String} string The Unicode input string (UCS-2).
* @returns {Array} The new array of code points.
*/
function ucs2decode(string) {
var output = [],
counter = 0,
length = string.length,
value,
extra;
while (counter < length) {
value = string.charCodeAt(counter++);
if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
// high surrogate, and there is a next character
extra = string.charCodeAt(counter++);
if ((extra & 0xFC00) == 0xDC00) { // low surrogate
output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
} else {
// unmatched surrogate; only append this code unit, in case the next
// code unit is the high surrogate of a surrogate pair
output.push(value);
counter--;
}
} else {
output.push(value);
}
}
return output;
}
/**
* Creates a string based on an array of numeric code points.
* @see \`punycode.ucs2.decode\`
* @memberOf punycode.ucs2
* @name encode
* @param {Array} codePoints The array of numeric code points.
* @returns {String} The new Unicode string (UCS-2).
*/
function ucs2encode(array) {
return map(array, function(value) {
var output = '''';
if (value > 0xFFFF) {
value -= 0x10000;
output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
value = 0xDC00 | value & 0x3FF;
}
output += stringFromCharCode(value);
return output;
}).join('''');
}
/**
* Converts a basic code point into a digit/integer.
* @see \`digitToBasic()\`
* @private
* @param {Number} codePoint The basic numeric code point value.
* @returns {Number} The numeric value of a basic code point (for use in
* representing integers) in the range \`0\` to \`base - 1\`, or \`base\` if
* the code point does not represent a value.
*/
function basicToDigit(codePoint) {
if (codePoint - 48 < 10) {
return codePoint - 22;
}
if (codePoint - 65 < 26) {
return codePoint - 65;
}
if (codePoint - 97 < 26) {
return codePoint - 97;
}
return base;
}
/**
* Converts a digit/integer into a basic code point.
* @see \`basicToDigit()\`
* @private
* @param {Number} digit The numeric value of a basic code point.
* @returns {Number} The basic code point whose value (when used for
* representing integers) is \`digit\`, which needs to be in the range
* \`0\` to \`base - 1\`. If \`flag\` is non-zero, the uppercase form is
* used; else, the lowercase form is used. The behavior is undefined
* if \`flag\` is non-zero and \`digit\` has no uppercase form.
*/
function digitToBasic(digit, flag) {
//  0..25 map to ASCII a..z or A..Z
// 26..35 map to ASCII 0..9
return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
}
/**
* Bias adaptation function as per section 3.4 of RFC 3492.
* https://tools.ietf.org/html/rfc3492#section-3.4
* @private
*/
function adapt(delta, numPoints, firstTime) {
var k = 0;
delta = firstTime ? floor(delta / damp) : delta >> 1;
delta += floor(delta / numPoints);
for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
delta = floor(delta / baseMinusTMin);
}
return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
}
/**
* Converts a Punycode string of ASCII-only symbols to a string of Unicode
* symbols.
* @memberOf punycode
* @param {String} input The Punycode string of ASCII-only symbols.
* @returns {String} The resulting string of Unicode symbols.
*/
function decode(input) {
// Don''t use UCS-2
var output = [],
inputLength = input.length,
out,
i = 0,
n = initialN,
bias = initialBias,
basic,
j,
index,
oldi,
w,
k,
digit,
t,
/** Cached calculation results */
baseMinusT;
// Handle the basic code points: let \`basic\` be the number of input code
// points before the last delimiter, or \`0\` if there is none, then copy
// the first basic code points to the output.
basic = input.lastIndexOf(delimiter);
if (basic < 0) {
basic = 0;
}
for (j = 0; j < basic; ++j) {
// if it''s not a basic code point
if (input.charCodeAt(j) >= 0x80) {
error(''not-basic'');
}
output.push(input.charCodeAt(j));
}
// Main decoding loop: start just after the last delimiter if any basic code
// points were copied; start at the beginning otherwise.
for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
// \`index\` is the index of the next character to be consumed.
// Decode a generalized variable-length integer into \`delta\`,
// which gets added to \`i\`. The overflow checking is easier
// if we increase \`i\` as we go, then subtract off its starting
// value at the end to obtain \`delta\`.
for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
if (index >= inputLength) {
error(''invalid-input'');
}
digit = basicToDigit(input.charCodeAt(index++));
if (digit >= base || digit > floor((maxInt - i) / w)) {
error(''overflow'');
}
i += digit * w;
t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
if (digit < t) {
break;
}
baseMinusT = base - t;
if (w > floor(maxInt / baseMinusT)) {
error(''overflow'');
}
w *= baseMinusT;
}
out = output.length + 1;
bias = adapt(i - oldi, out, oldi == 0);
// \`i\` was supposed to wrap around from \`out\` to \`0\`,
// incrementing \`n\` each time, so we''ll fix that now:
if (floor(i / out) > maxInt - n) {
error(''overflow'');
}
n += floor(i / out);
i %= out;
// Insert \`n\` at position \`i\` of the output
output.splice(i++, 0, n);
}
return ucs2encode(output);
}
/**
* Converts a string of Unicode symbols (e.g. a domain name label) to a
* Punycode string of ASCII-only symbols.
* @memberOf punycode
* @param {String} input The string of Unicode symbols.
* @returns {String} The resulting Punycode string of ASCII-only symbols.
*/
function encode(input) {
var n,
delta,
handledCPCount,
basicLength,
bias,
j,
m,
q,
k,
t,
currentValue,
output = [],
/** \`inputLength\` will hold the number of code points in \`input\`. */
inputLength,
/** Cached calculation results */
handledCPCountPlusOne,
baseMinusT,
qMinusT;
// Convert the input in UCS-2 to Unicode
input = ucs2decode(input);
// Cache the length
inputLength = input.length;
// Initialize the state
n = initialN;
delta = 0;
bias = initialBias;
// Handle the basic code points
for (j = 0; j < inputLength; ++j) {
currentValue = input[j];
if (currentValue < 0x80) {
output.push(stringFromCharCode(currentValue));
}
}
handledCPCount = basicLength = output.length;
// \`handledCPCount\` is the number of code points that have been handled;
// \`basicLength\` is the number of basic code points.
// Finish the basic string - if it is not empty - with a delimiter
if (basicLength) {
output.push(delimiter);
}
// Main encoding loop:
while (handledCPCount < inputLength) {
// All non-basic code points < n have been handled already. Find the next
// larger one:
for (m = maxInt, j = 0; j < inputLength; ++j) {
currentValue = input[j];
if (currentValue >= n && currentValue < m) {
m = currentValue;
}
}
// Increase \`delta\` enough to advance the decoder''s <n,i> state to <m,0>,
// but guard against overflow
handledCPCountPlusOne = handledCPCount + 1;
if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
error(''overflow'');
}
delta += (m - n) * handledCPCountPlusOne;
n = m;
for (j = 0; j < inputLength; ++j) {
currentValue = input[j];
if (currentValue < n && ++delta > maxInt) {
error(''overflow'');
}
if (currentValue == n) {
// Represent delta as a generalized variable-length integer
for (q = delta, k = base; /* no condition */; k += base) {
t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
if (q < t) {
break;
}
qMinusT = q - t;
baseMinusT = base - t;
output.push(
stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
);
q = floor(qMinusT / baseMinusT);
}
output.push(stringFromCharCode(digitToBasic(q, 0)));
bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
delta = 0;
++handledCPCount;
}
}
++delta;
++n;
}
return output.join('''');
}
/**
* Converts a Punycode string representing a domain name or an email address
* to Unicode. Only the Punycoded parts of the input will be converted, i.e.
* it doesn''t matter if you call it on a string that has already been
* converted to Unicode.
* @memberOf punycode
* @param {String} input The Punycoded domain name or email address to
* convert to Unicode.
* @returns {String} The Unicode representation of the given Punycode
* string.
*/
function toUnicode(input) {
return mapDomain(input, function(string) {
return regexPunycode.test(string)
? decode(string.slice(4).toLowerCase())
: string;
});
}
/**
* Converts a Unicode string representing a domain name or an email address to
* Punycode. Only the non-ASCII parts of the domain name will be converted,
* i.e. it doesn''t matter if you call it with a domain that''s already in
* ASCII.
* @memberOf punycode
* @param {String} input The domain name or email address to convert, as a
* Unicode string.
* @returns {String} The Punycode representation of the given domain name or
* email address.
*/
function toASCII(input) {
return mapDomain(input, function(string) {
return regexNonASCII.test(string)
? ''xn--'' + encode(string)
: string;
});
}
/*--------------------------------------------------------------------------*/
/** Define the public API */
punycode = {
/**
* A string representing the current Punycode.js version number.
* @memberOf punycode
* @type String
*/
''version'': ''1.4.1'',
/**
* An object of methods to convert from JavaScript''s internal character
* representation (UCS-2) to Unicode code points, and back.
* @see <https://mathiasbynens.be/notes/javascript-encoding>
* @memberOf punycode
* @type Object
*/
''ucs2'': {
''decode'': ucs2decode,
''encode'': ucs2encode
},
''decode'': decode,
''encode'': encode,
''toASCII'': toASCII,
''toUnicode'': toUnicode
};
/** Expose \`punycode\` */
// Some AMD build optimizers, like r.js, check for specific condition patterns
// like the following:
if (
typeof define == ''function'' &&
typeof define.amd == ''object'' &&
define.amd
) {
define(''punycode'', function() {
return punycode;
});
} else if (freeExports && freeModule) {
if (module.exports == freeExports) {
// in Node.js, io.js, or RingoJS v0.8.0+
freeModule.exports = punycode;
} else {
// in Narwhal or RingoJS v0.7.0-
for (key in punycode) {
punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
}
}
} else {
// in Rhino or a web browser
root.punycode = punycode;
}
}(this));
}).call(this,typeof global !== \\"undefined\\" ? global : typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : {})
},{}],2:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// \\"Software\\"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
''use strict'';
// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function(qs, sep, eq, options) {
sep = sep || ''&'';
eq = eq || ''='';
var obj = {};
if (typeof qs !== ''string'' || qs.length === 0) {
return obj;
}
var regexp = /\\\\+/g;
qs = qs.split(sep);
var maxKeys = 1000;
if (options && typeof options.maxKeys === ''number'') {
maxKeys = options.maxKeys;
}
var len = qs.length;
// maxKeys <= 0 means that we should not limit keys count
if (maxKeys > 0 && len > maxKeys) {
len = maxKeys;
}
for (var i = 0; i < len; ++i) {
var x = qs[i].replace(regexp, ''%20''),
idx = x.indexOf(eq),
kstr, vstr, k, v;
if (idx >= 0) {
kstr = x.substr(0, idx);
vstr = x.substr(idx + 1);
} else {
kstr = x;
vstr = '''';
}
k = decodeURIComponent(kstr);
v = decodeURIComponent(vstr);
if (!hasOwnProperty(obj, k)) {
obj[k] = v;
} else if (isArray(obj[k])) {
obj[k].push(v);
} else {
obj[k] = [obj[k], v];
}
}
return obj;
};
var isArray = Array.isArray || function (xs) {
return Object.prototype.toString.call(xs) === ''[object Array]'';
};
},{}],3:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// \\"Software\\"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
''use strict'';
var stringifyPrimitive = function(v) {
switch (typeof v) {
case ''string'':
return v;
case ''boolean'':
return v ? ''true'' : ''false'';
case ''number'':
return isFinite(v) ? v : '''';
default:
return '''';
}
};
module.exports = function(obj, sep, eq, name) {
sep = sep || ''&'';
eq = eq || ''='';
if (obj === null) {
obj = undefined;
}
if (typeof obj === ''object'') {
return map(objectKeys(obj), function(k) {
var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
if (isArray(obj[k])) {
return map(obj[k], function(v) {
return ks + encodeURIComponent(stringifyPrimitive(v));
}).join(sep);
} else {
return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
}
}).join(sep);
}
if (!name) return '''';
return encodeURIComponent(stringifyPrimitive(name)) + eq +
encodeURIComponent(stringifyPrimitive(obj));
};
var isArray = Array.isArray || function (xs) {
return Object.prototype.toString.call(xs) === ''[object Array]'';
};
function map (xs, f) {
if (xs.map) return xs.map(f);
var res = [];
for (var i = 0; i < xs.length; i++) {
res.push(f(xs[i], i));
}
return res;
}
var objectKeys = Object.keys || function (obj) {
var res = [];
for (var key in obj) {
if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
}
return res;
};
},{}],4:[function(require,module,exports){
''use strict'';
exports.decode = exports.parse = require(''./decode'');
exports.encode = exports.stringify = require(''./encode'');
},{\\"./decode\\":2,\\"./encode\\":3}],5:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// \\"Software\\"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
''use strict'';
var punycode = require(''punycode'');
var util = require(''./util'');
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;
function Url() {
this.protocol = null;
this.slashes = null;
this.auth = null;
this.host = null;
this.port = null;
this.hostname = null;
this.hash = null;
this.search = null;
this.query = null;
this.pathname = null;
this.path = null;
this.href = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
portPattern = /:[0-9]*$/,
// Special case for a simple path URL
simplePathPattern = /^(\\\\/\\\\/?(?!\\\\/)[^\\\\?\\\\s]*)(\\\\?[^\\\\s]*)?$/,
// RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = [''<'', ''>'', ''\\"'', ''\`'', '' '', ''\\\\r'', ''\\\\n'', ''\\\\t''],
// RFC 2396: characters not allowed for various reasons.
unwise = [''{'', ''}'', ''|'', ''\\\\\\\\'', ''^'', ''\`''].concat(delims),
// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = [''\\\\''''].concat(unwise),
// Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = [''%'', ''/'', ''?'', '';'', ''#''].concat(autoEscape),
hostEndingChars = [''/'', ''?'', ''#''],
hostnameMaxLen = 255,
hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
// protocols that can allow \\"unsafe\\" and \\"unwise\\" chars.
unsafeProtocol = {
''javascript'': true,
''javascript:'': true
},
// protocols that never have a hostname.
hostlessProtocol = {
''javascript'': true,
''javascript:'': true
},
// protocols that always contain a // bit.
slashedProtocol = {
''http'': true,
''https'': true,
''ftp'': true,
''gopher'': true,
''file'': true,
''http:'': true,
''https:'': true,
''ftp:'': true,
''gopher:'': true,
''file:'': true
},
querystring = require(''querystring'');
function urlParse(url, parseQueryString, slashesDenoteHost) {
if (url && util.isObject(url) && url instanceof Url) return url;
var u = new Url;
u.parse(url, parseQueryString, slashesDenoteHost);
return u;
}
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
if (!util.isString(url)) {
throw new TypeError(\\"Parameter ''url'' must be a string, not \\" + typeof url);
}
// Copy chrome, IE, opera backslash-handling behavior.
// Back slashes before the query string get converted to forward slashes
// See: https://code.google.com/p/chromium/issues/detail?id=25916
var queryIndex = url.indexOf(''?''),
splitter =
(queryIndex !== -1 && queryIndex < url.indexOf(''#'')) ? ''?'' : ''#'',
uSplit = url.split(splitter),
slashRegex = /\\\\\\\\/g;
uSplit[0] = uSplit[0].replace(slashRegex, ''/'');
url = uSplit.join(splitter);
var rest = url;
// trim before proceeding.
// This is to support parse stuff like \\"  http://foo.com  \\\\n\\"
rest = rest.trim();
if (!slashesDenoteHost && url.split(''#'').length === 1) {
// Try fast path regexp
var simplePath = simplePathPattern.exec(rest);
if (simplePath) {
this.path = rest;
this.href = rest;
this.pathname = simplePath[1];
if (simplePath[2]) {
this.search = simplePath[2];
if (parseQueryString) {
this.query = querystring.parse(this.search.substr(1));
} else {
this.query = this.search.substr(1);
}
} else if (parseQueryString) {
this.search = '''';
this.query = {};
}
return this;
}
}
var proto = protocolPattern.exec(rest);
if (proto) {
proto = proto[0];
var lowerProto = proto.toLowerCase();
this.protocol = lowerProto;
rest = rest.substr(proto.length);
}
// figure out if it''s got a host
// user@server is *always* interpreted as a hostname, and url
// resolution will treat //foo/bar as host=foo,path=bar because that''s
// how the browser resolves relative URLs.
if (slashesDenoteHost || proto || rest.match(/^\\\\/\\\\/[^@\\\\/]+@[^@\\\\/]+/)) {
var slashes = rest.substr(0, 2) === ''//'';
if (slashes && !(proto && hostlessProtocol[proto])) {
rest = rest.substr(2);
this.slashes = true;
}
}
if (!hostlessProtocol[proto] &&
(slashes || (proto && !slashedProtocol[proto]))) {
// there''s a hostname.
// the first instance of /, ?, ;, or # ends the host.
//
// If there is an @ in the hostname, then non-host chars *are* allowed
// to the left of the last @ sign, unless some host-ending character
// comes *before* the @-sign.
// URLs are obnoxious.
//
// ex:
// http://a@b@c/ => user:a@b host:c
// http://a@b?@c => user:a host:c path:/?@c
// v0.12 TODO(isaacs): This is not quite how Chrome does things.
// Review our test case against browsers more comprehensively.
// find the first instance of any hostEndingChars
var hostEnd = -1;
for (var i = 0; i < hostEndingChars.length; i++) {
var hec = rest.indexOf(hostEndingChars[i]);
if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
hostEnd = hec;
}
// at this point, either we have an explicit point where the
// auth portion cannot go past, or the last @ char is the decider.
var auth, atSign;
if (hostEnd === -1) {
// atSign can be anywhere.
atSign = rest.lastIndexOf(''@'');
} else {
// atSign must be in auth portion.
// http://a@b/c@d => host:b auth:a path:/c@d
atSign = rest.lastIndexOf(''@'', hostEnd);
}
// Now we have a portion which is definitely the auth.
// Pull that off.
if (atSign !== -1) {
auth = rest.slice(0, atSign);
rest = rest.slice(atSign + 1);
this.auth = decodeURIComponent(auth);
}
// the host is the remaining to the left of the first non-host char
hostEnd = -1;
for (var i = 0; i < nonHostChars.length; i++) {
var hec = rest.indexOf(nonHostChars[i]);
if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
hostEnd = hec;
}
// if we still have not hit it, then the entire thing is a host.
if (hostEnd === -1)
hostEnd = rest.length;
this.host = rest.slice(0, hostEnd);
rest = rest.slice(hostEnd);
// pull out port.
this.parseHost();
// we''ve indicated that there is a hostname,
// so even if it''s empty, it has to be present.
this.hostname = this.hostname || '''';
// if hostname begins with [ and ends with ]
// assume that it''s an IPv6 address.
var ipv6Hostname = this.hostname[0] === ''['' &&
this.hostname[this.hostname.length - 1] === '']'';
// validate a little.
if (!ipv6Hostname) {
var hostparts = this.hostname.split(/\\\\./);
for (var i = 0, l = hostparts.length; i < l; i++) {
var part = hostparts[i];
if (!part) continue;
if (!part.match(hostnamePartPattern)) {
var newpart = '''';
for (var j = 0, k = part.length; j < k; j++) {
if (part.charCodeAt(j) > 127) {
// we replace non-ASCII char with a temporary placeholder
// we need this to make sure size of hostname is not
// broken by replacing non-ASCII by nothing
newpart += ''x'';
} else {
newpart += part[j];
}
}
// we test again with ASCII char only
if (!newpart.match(hostnamePartPattern)) {
var validParts = hostparts.slice(0, i);
var notHost = hostparts.slice(i + 1);
var bit = part.match(hostnamePartStart);
if (bit) {
validParts.push(bit[1]);
notHost.unshift(bit[2]);
}
if (notHost.length) {
rest = ''/'' + notHost.join(''.'') + rest;
}
this.hostname = validParts.join(''.'');
break;
}
}
}
}
if (this.hostname.length > hostnameMaxLen) {
this.hostname = '''';
} else {
// hostnames are always lower case.
this.hostname = this.hostname.toLowerCase();
}
if (!ipv6Hostname) {
// IDNA Support: Returns a punycoded representation of \\"domain\\".
// It only converts parts of the domain name that
// have non-ASCII characters, i.e. it doesn''t matter if
// you call it with a domain that already is ASCII-only.
this.hostname = punycode.toASCII(this.hostname);
}
var p = this.port ? '':'' + this.port : '''';
var h = this.hostname || '''';
this.host = h + p;
this.href += this.host;
// strip [ and ] from the hostname
// the host field still retains them, though
if (ipv6Hostname) {
this.hostname = this.hostname.substr(1, this.hostname.length - 2);
if (rest[0] !== ''/'') {
rest = ''/'' + rest;
}
}
}
// now rest is set to the post-host stuff.
// chop off any delim chars.
if (!unsafeProtocol[lowerProto]) {
// First, make 100% sure that any \\"autoEscape\\" chars get
// escaped, even if encodeURIComponent doesn''t think they
// need to be.
for (var i = 0, l = autoEscape.length; i < l; i++) {
var ae = autoEscape[i];
if (rest.indexOf(ae) === -1)
continue;
var esc = encodeURIComponent(ae);
if (esc === ae) {
esc = escape(ae);
}
rest = rest.split(ae).join(esc);
}
}
// chop off from the tail first.
var hash = rest.indexOf(''#'');
if (hash !== -1) {
// got a fragment string.
this.hash = rest.substr(hash);
rest = rest.slice(0, hash);
}
var qm = rest.indexOf(''?'');
if (qm !== -1) {
this.search = rest.substr(qm);
this.query = rest.substr(qm + 1);
if (parseQueryString) {
this.query = querystring.parse(this.query);
}
rest = rest.slice(0, qm);
} else if (parseQueryString) {
// no query string, but parseQueryString still requested
this.search = '''';
this.query = {};
}
if (rest) this.pathname = rest;
if (slashedProtocol[lowerProto] &&
this.hostname && !this.pathname) {
this.pathname = ''/'';
}
//to support http.request
if (this.pathname || this.search) {
var p = this.pathname || '''';
var s = this.search || '''';
this.path = p + s;
}
// finally, reconstruct the href based on what has been validated.
this.href = this.format();
return this;
};
// format a parsed object into a url string
function urlFormat(obj) {
// ensure it''s an object, and not a string url.
// If it''s an obj, this is a no-op.
// this way, you can call url_format() on strings
// to clean up potentially wonky urls.
if (util.isString(obj)) obj = urlParse(obj);
if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
return obj.format();
}
Url.prototype.format = function() {
var auth = this.auth || '''';
if (auth) {
auth = encodeURIComponent(auth);
auth = auth.replace(/%3A/i, '':'');
auth += ''@'';
}
var protocol = this.protocol || '''',
pathname = this.pathname || '''',
hash = this.hash || '''',
host = false,
query = '''';
if (this.host) {
host = auth + this.host;
} else if (this.hostname) {
host = auth + (this.hostname.indexOf('':'') === -1 ?
this.hostname :
''['' + this.hostname + '']'');
if (this.port) {
host += '':'' + this.port;
}
}
if (this.query &&
util.isObject(this.query) &&
Object.keys(this.query).length) {
query = querystring.stringify(this.query);
}
var search = this.search || (query && (''?'' + query)) || '''';
if (protocol && protocol.substr(-1) !== '':'') protocol += '':'';
// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
// unless they had them to begin with.
if (this.slashes ||
(!protocol || slashedProtocol[protocol]) && host !== false) {
host = ''//'' + (host || '''');
if (pathname && pathname.charAt(0) !== ''/'') pathname = ''/'' + pathname;
} else if (!host) {
host = '''';
}
if (hash && hash.charAt(0) !== ''#'') hash = ''#'' + hash;
if (search && search.charAt(0) !== ''?'') search = ''?'' + search;
pathname = pathname.replace(/[?#]/g, function(match) {
return encodeURIComponent(match);
});
search = search.replace(''#'', ''%23'');
return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
if (!source) return relative;
return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
if (util.isString(relative)) {
var rel = new Url();
rel.parse(relative, false, true);
relative = rel;
}
var result = new Url();
var tkeys = Object.keys(this);
for (var tk = 0; tk < tkeys.length; tk++) {
var tkey = tkeys[tk];
result[tkey] = this[tkey];
}
// hash is always overridden, no matter what.
// even href=\\"\\" will remove it.
result.hash = relative.hash;
// if the relative url is empty, then there''s nothing left to do here.
if (relative.href === '''') {
result.href = result.format();
return result;
}
// hrefs like //foo/bar always cut to the protocol.
if (relative.slashes && !relative.protocol) {
// take everything except the protocol from relative
var rkeys = Object.keys(relative);
for (var rk = 0; rk < rkeys.length; rk++) {
var rkey = rkeys[rk];
if (rkey !== ''protocol'')
result[rkey] = relative[rkey];
}
//urlParse appends trailing / to urls like http://www.example.com
if (slashedProtocol[result.protocol] &&
result.hostname && !result.pathname) {
result.path = result.pathname = ''/'';
}
result.href = result.format();
return result;
}
if (relative.protocol && relative.protocol !== result.protocol) {
// if it''s a known url protocol, then changing
// the protocol does weird things
// first, if it''s not file:, then we MUST have a host,
// and if there was a path
// to begin with, then we MUST have a path.
// if it is file:, then the host is dropped,
// because that''s known to be hostless.
// anything else is assumed to be absolute.
if (!slashedProtocol[relative.protocol]) {
var keys = Object.keys(relative);
for (var v = 0; v < keys.length; v++) {
var k = keys[v];
result[k] = relative[k];
}
result.href = result.format();
return result;
}
result.protocol = relative.protocol;
if (!relative.host && !hostlessProtocol[relative.protocol]) {
var relPath = (relative.pathname || '''').split(''/'');
while (relPath.length && !(relative.host = relPath.shift()));
if (!relative.host) relative.host = '''';
if (!relative.hostname) relative.hostname = '''';
if (relPath[0] !== '''') relPath.unshift('''');
if (relPath.length < 2) relPath.unshift('''');
result.pathname = relPath.join(''/'');
} else {
result.pathname = relative.pathname;
}
result.search = relative.search;
result.query = relative.query;
result.host = relative.host || '''';
result.auth = relative.auth;
result.hostname = relative.hostname || relative.host;
result.port = relative.port;
// to support http.request
if (result.pathname || result.search) {
var p = result.pathname || '''';
var s = result.search || '''';
result.path = p + s;
}
result.slashes = result.slashes || relative.slashes;
result.href = result.format();
return result;
}
var isSourceAbs = (result.pathname && result.pathname.charAt(0) === ''/''),
isRelAbs = (
relative.host ||
relative.pathname && relative.pathname.charAt(0) === ''/''
),
mustEndAbs = (isRelAbs || isSourceAbs ||
(result.host && relative.pathname)),
removeAllDots = mustEndAbs,
srcPath = result.pathname && result.pathname.split(''/'') || [],
relPath = relative.pathname && relative.pathname.split(''/'') || [],
psychotic = result.protocol && !slashedProtocol[result.protocol];
// if the url is a non-slashed url, then relative
// links like ../.. should be able
// to crawl up to the hostname, as well.  This is strange.
// result.protocol has already been set by now.
// Later on, put the first path part into the host field.
if (psychotic) {
result.hostname = '''';
result.port = null;
if (result.host) {
if (srcPath[0] === '''') srcPath[0] = result.host;
else srcPath.unshift(result.host);
}
result.host = '''';
if (relative.protocol) {
relative.hostname = null;
relative.port = null;
if (relative.host) {
if (relPath[0] === '''') relPath[0] = relative.host;
else relPath.unshift(relative.host);
}
relative.host = null;
}
mustEndAbs = mustEndAbs && (relPath[0] === '''' || srcPath[0] === '''');
}
if (isRelAbs) {
// it''s absolute.
result.host = (relative.host || relative.host === '''') ?
relative.host : result.host;
result.hostname = (relative.hostname || relative.hostname === '''') ?
relative.hostname : result.hostname;
result.search = relative.search;
result.query = relative.query;
srcPath = relPath;
// fall through to the dot-handling below.
} else if (relPath.length) {
// it''s relative
// throw away the existing file, and take the new path instead.
if (!srcPath) srcPath = [];
srcPath.pop();
srcPath = srcPath.concat(relPath);
result.search = relative.search;
result.query = relative.query;
} else if (!util.isNullOrUndefined(relative.search)) {
// just pull out the search.
// like href=''?foo''.
// Put this after the other two cases because it simplifies the booleans
if (psychotic) {
result.hostname = result.host = srcPath.shift();
//occationaly the auth can get stuck only in host
//this especially happens in cases like
//url.resolveObject(''mailto:local1@domain1'', ''local2@domain2'')
var authInHost = result.host && result.host.indexOf(''@'') > 0 ?
result.host.split(''@'') : false;
if (authInHost) {
result.auth = authInHost.shift();
result.host = result.hostname = authInHost.shift();
}
}
result.search = relative.search;
result.query = relative.query;
//to support http.request
if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
result.path = (result.pathname ? result.pathname : '''') +
(result.search ? result.search : '''');
}
result.href = result.format();
return result;
}
if (!srcPath.length) {
// no path at all.  easy.
// we''ve already handled the other stuff above.
result.pathname = null;
//to support http.request
if (result.search) {
result.path = ''/'' + result.search;
} else {
result.path = null;
}
result.href = result.format();
return result;
}
// if a url ENDs in . or .., then it must get a trailing slash.
// however, if it ends in anything else non-slashy,
// then it must NOT get a trailing slash.
var last = srcPath.slice(-1)[0];
var hasTrailingSlash = (
(result.host || relative.host || srcPath.length > 1) &&
(last === ''.'' || last === ''..'') || last === '''');
// strip single dots, resolve double dots to parent dir
// if the path tries to go above the root, \`up\` ends up > 0
var up = 0;
for (var i = srcPath.length; i >= 0; i--) {
last = srcPath[i];
if (last === ''.'') {
srcPath.splice(i, 1);
} else if (last === ''..'') {
srcPath.splice(i, 1);
up++;
} else if (up) {
srcPath.splice(i, 1);
up--;
}
}
// if the path is allowed to go above the root, restore leading ..s
if (!mustEndAbs && !removeAllDots) {
for (; up--; up) {
srcPath.unshift(''..'');
}
}
if (mustEndAbs && srcPath[0] !== '''' &&
(!srcPath[0] || srcPath[0].charAt(0) !== ''/'')) {
srcPath.unshift('''');
}
if (hasTrailingSlash && (srcPath.join(''/'').substr(-1) !== ''/'')) {
srcPath.push('''');
}
var isAbsolute = srcPath[0] === '''' ||
(srcPath[0] && srcPath[0].charAt(0) === ''/'');
// put the host back
if (psychotic) {
result.hostname = result.host = isAbsolute ? '''' :
srcPath.length ? srcPath.shift() : '''';
//occationaly the auth can get stuck only in host
//this especially happens in cases like
//url.resolveObject(''mailto:local1@domain1'', ''local2@domain2'')
var authInHost = result.host && result.host.indexOf(''@'') > 0 ?
result.host.split(''@'') : false;
if (authInHost) {
result.auth = authInHost.shift();
result.host = result.hostname = authInHost.shift();
}
}
mustEndAbs = mustEndAbs || (result.host && srcPath.length);
if (mustEndAbs && !isAbsolute) {
srcPath.unshift('''');
}
if (!srcPath.length) {
result.pathname = null;
result.path = null;
} else {
result.pathname = srcPath.join(''/'');
}
//to support request.http
if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
result.path = (result.pathname ? result.pathname : '''') +
(result.search ? result.search : '''');
}
result.auth = relative.auth || result.auth;
result.slashes = result.slashes || relative.slashes;
result.href = result.format();
return result;
};
Url.prototype.parseHost = function() {
var host = this.host;
var port = portPattern.exec(host);
if (port) {
port = port[0];
if (port !== '':'') {
this.port = port.substr(1);
}
host = host.substr(0, host.length - port.length);
}
if (host) this.hostname = host;
};
},{\\"./util\\":6,\\"punycode\\":1,\\"querystring\\":4}],6:[function(require,module,exports){
''use strict'';
module.exports = {
isString: function(arg) {
return typeof(arg) === ''string'';
},
isObject: function(arg) {
return typeof(arg) === ''object'' && arg !== null;
},
isNull: function(arg) {
return arg === null;
},
isNullOrUndefined: function(arg) {
return arg == null;
}
};
},{}],7:[function(require,module,exports){
module.exports = require(''ajv'');
},{\\"ajv\\":9}],8:[function(require,module,exports){
''use strict'';
var KEYWORDS = [
''multipleOf'',
''maximum'',
''exclusiveMaximum'',
''minimum'',
''exclusiveMinimum'',
''maxLength'',
''minLength'',
''pattern'',
''additionalItems'',
''maxItems'',
''minItems'',
''uniqueItems'',
''maxProperties'',
''minProperties'',
''required'',
''additionalProperties'',
''enum'',
''format'',
''const''
];
module.exports = function (metaSchema, keywordsJsonPointers) {
for (var i=0; i<keywordsJsonPointers.length; i++) {
metaSchema = JSON.parse(JSON.stringify(metaSchema));
var segments = keywordsJsonPointers[i].split(''/'');
var keywords = metaSchema;
var j;
for (j=1; j<segments.length; j++)
keywords = keywords[segments[j]];
for (j=0; j<KEYWORDS.length; j++) {
var key = KEYWORDS[j];
var schema = keywords[key];
if (schema) {
keywords[key] = {
anyOf: [
schema,
{ $ref: ''https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#'' }
]
};
}
}
}
return metaSchema;
};
},{}],9:[function(require,module,exports){
''use strict'';
var compileSchema = require(''./compile'')
, resolve = require(''./compile/resolve'')
, Cache = require(''./cache'')
, SchemaObject = require(''./compile/schema_obj'')
, stableStringify = require(''json-stable-stringify'')
, formats = require(''./compile/formats'')
, rules = require(''./compile/rules'')
, $dataMetaSchema = require(''./$data'')
, patternGroups = require(''./patternGroups'')
, util = require(''./compile/util'')
, co = require(''co'');
module.exports = Ajv;
Ajv.prototype.validate = validate;
Ajv.prototype.compile = compile;
Ajv.prototype.addSchema = addSchema;
Ajv.prototype.addMetaSchema = addMetaSchema;
Ajv.prototype.validateSchema = validateSchema;
Ajv.prototype.getSchema = getSchema;
Ajv.prototype.removeSchema = removeSchema;
Ajv.prototype.addFormat = addFormat;
Ajv.prototype.errorsText = errorsText;
Ajv.prototype._addSchema = _addSchema;
Ajv.prototype._compile = _compile;
Ajv.prototype.compileAsync = require(''./compile/async'');
var customKeyword = require(''./keyword'');
Ajv.prototype.addKeyword = customKeyword.add;
Ajv.prototype.getKeyword = customKeyword.get;
Ajv.prototype.removeKeyword = customKeyword.remove;
var errorClasses = require(''./compile/error_classes'');
Ajv.ValidationError = errorClasses.Validation;
Ajv.MissingRefError = errorClasses.MissingRef;
Ajv.$dataMetaSchema = $dataMetaSchema;
var META_SCHEMA_ID = ''http://json-schema.org/draft-06/schema'';
var META_IGNORE_OPTIONS = [ ''removeAdditional'', ''useDefaults'', ''coerceTypes'' ];
var META_SUPPORT_DATA = [''/properties''];
/**
* Creates validator instance.
* Usage: \`Ajv(opts)\`
* @param {Object} opts optional options
* @return {Object} ajv instance
*/
function Ajv(opts) {
if (!(this instanceof Ajv)) return new Ajv(opts);
opts = this._opts = util.copy(opts) || {};
this._schemas = {};
this._refs = {};
this._fragments = {};
this._formats = formats(opts.format);
var schemaUriFormat = this._schemaUriFormat = this._formats[''uri-reference''];
this._schemaUriFormatFunc = function (str) { return schemaUriFormat.test(str); };
this._cache = opts.cache || new Cache;
this._loadingSchemas = {};
this._compilations = [];
this.RULES = rules();
this._getId = chooseGetId(opts);
opts.loopRequired = opts.loopRequired || Infinity;
if (opts.errorDataPath == ''property'') opts._errorDataPathProperty = true;
if (opts.serialize === undefined) opts.serialize = stableStringify;
this._metaOpts = getMetaSchemaOptions(this);
if (opts.formats) addInitialFormats(this);
addDraft6MetaSchema(this);
if (typeof opts.meta == ''object'') this.addMetaSchema(opts.meta);
addInitialSchemas(this);
if (opts.patternGroups) patternGroups(this);
}
/**
* Validate data using schema
* Schema will be compiled and cached (using serialized JSON as key. [json-stable-stringify](https://github.com/substack/json-stable-stringify) is used to serialize.
* @this   Ajv
* @param  {String|Object} schemaKeyRef key, ref or schema object
* @param  {Any} data to be validated
* @return {Boolean} validation result. Errors from the last validation will be available in \`ajv.errors\` (and also in compiled schema: \`schema.errors\`).
*/
function validate(schemaKeyRef, data) {
var v;
if (typeof schemaKeyRef == ''string'') {
v = this.getSchema(schemaKeyRef);
if (!v) throw new Error(''no schema with key or ref \\"'' + schemaKeyRef + ''\\"'');
} else {
var schemaObj = this._addSchema(schemaKeyRef);
v = schemaObj.validate || this._compile(schemaObj);
}
var valid = v(data);
if (v.$async === true)
return this._opts.async == ''*'' ? co(valid) : valid;
this.errors = v.errors;
return valid;
}
/**
* Create validating function for passed schema.
* @this   Ajv
* @param  {Object} schema schema object
* @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
* @return {Function} validating function
*/
function compile(schema, _meta) {
var schemaObj = this._addSchema(schema, undefined, _meta);
return schemaObj.validate || this._compile(schemaObj);
}
/**
* Adds schema to the instance.
* @this   Ajv
* @param {Object|Array} schema schema or array of schemas. If array is passed, \`key\` and other parameters will be ignored.
* @param {String} key Optional schema key. Can be passed to \`validate\` method instead of schema object or id/ref. One schema per instance can have empty \`id\` and \`key\`.
* @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
* @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
*/
function addSchema(schema, key, _skipValidation, _meta) {
if (Array.isArray(schema)){
for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);
return;
}
var id = this._getId(schema);
if (id !== undefined && typeof id != ''string'')
throw new Error(''schema id must be string'');
key = resolve.normalizeId(key || id);
checkUnique(this, key);
this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
}
/**
* Add schema that will be used to validate other schemas
* options in META_IGNORE_OPTIONS are alway set to false
* @this   Ajv
* @param {Object} schema schema object
* @param {String} key optional schema key
* @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
*/
function addMetaSchema(schema, key, skipValidation) {
this.addSchema(schema, key, skipValidation, true);
}
/**
* Validate schema
* @this   Ajv
* @param {Object} schema schema to validate
* @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
* @return {Boolean} true if schema is valid
*/
function validateSchema(schema, throwOrLogError) {
var $schema = schema.$schema;
if ($schema !== undefined && typeof $schema != ''string'')
throw new Error(''$schema must be a string'');
$schema = $schema || this._opts.defaultMeta || defaultMeta(this);
if (!$schema) {
console.warn(''meta-schema not available'');
this.errors = null;
return true;
}
var currentUriFormat = this._formats.uri;
this._formats.uri = typeof currentUriFormat == ''function''
? this._schemaUriFormatFunc
: this._schemaUriFormat;
var valid;
try { valid = this.validate($schema, schema); }
finally { this._formats.uri = currentUriFormat; }
if (!valid && throwOrLogError) {
var message = ''schema is invalid: '' + this.errorsText();
if (this._opts.validateSchema == ''log'') console.error(message);
else throw new Error(message);
}
return valid;
}
function defaultMeta(self) {
var meta = self._opts.meta;
self._opts.defaultMeta = typeof meta == ''object''
? self._getId(meta) || meta
: self.getSchema(META_SCHEMA_ID)
? META_SCHEMA_ID
: undefined;
return self._opts.defaultMeta;
}
/**
* Get compiled schema from the instance by \`key\` or \`ref\`.
* @this   Ajv
* @param  {String} keyRef \`key\` that was passed to \`addSchema\` or full schema reference (\`schema.id\` or resolved id).
* @return {Function} schema validating function (with property \`schema\`).
*/
function getSchema(keyRef) {
var schemaObj = _getSchemaObj(this, keyRef);
switch (typeof schemaObj) {
case ''object'': return schemaObj.validate || this._compile(schemaObj);
case ''string'': return this.getSchema(schemaObj);
case ''undefined'': return _getSchemaFragment(this, keyRef);
}
}
function _getSchemaFragment(self, ref) {
var res = resolve.schema.call(self, { schema: {} }, ref);
if (res) {
var schema = res.schema
, root = res.root
, baseId = res.baseId;
var v = compileSchema.call(self, schema, root, undefined, baseId);
self._fragments[ref] = new SchemaObject({
ref: ref,
fragment: true,
schema: schema,
root: root,
baseId: baseId,
validate: v
});
return v;
}
}
function _getSchemaObj(self, keyRef) {
keyRef = resolve.normalizeId(keyRef);
return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
}
/**
* Remove cached schema(s).
* If no parameter is passed all schemas but meta-schemas are removed.
* If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
* Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
* @this   Ajv
* @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
*/
function removeSchema(schemaKeyRef) {
if (schemaKeyRef instanceof RegExp) {
_removeAllSchemas(this, this._schemas, schemaKeyRef);
_removeAllSchemas(this, this._refs, schemaKeyRef);
return;
}
switch (typeof schemaKeyRef) {
case ''undefined'':
_removeAllSchemas(this, this._schemas);
_removeAllSchemas(this, this._refs);
this._cache.clear();
return;
case ''string'':
var schemaObj = _getSchemaObj(this, schemaKeyRef);
if (schemaObj) this._cache.del(schemaObj.cacheKey);
delete this._schemas[schemaKeyRef];
delete this._refs[schemaKeyRef];
return;
case ''object'':
var serialize = this._opts.serialize;
var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
this._cache.del(cacheKey);
var id = this._getId(schemaKeyRef);
if (id) {
id = resolve.normalizeId(id);
delete this._schemas[id];
delete this._refs[id];
}
}
}
function _removeAllSchemas(self, schemas, regex) {
for (var keyRef in schemas) {
var schemaObj = schemas[keyRef];
if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
self._cache.del(schemaObj.cacheKey);
delete schemas[keyRef];
}
}
}
/* @this   Ajv */
function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
if (typeof schema != ''object'' && typeof schema != ''boolean'')
throw new Error(''schema should be object or boolean'');
var serialize = this._opts.serialize;
var cacheKey = serialize ? serialize(schema) : schema;
var cached = this._cache.get(cacheKey);
if (cached) return cached;
shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
var id = resolve.normalizeId(this._getId(schema));
if (id && shouldAddSchema) checkUnique(this, id);
var willValidate = this._opts.validateSchema !== false && !skipValidation;
var recursiveMeta;
if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
this.validateSchema(schema, true);
var localRefs = resolve.ids.call(this, schema);
var schemaObj = new SchemaObject({
id: id,
schema: schema,
localRefs: localRefs,
cacheKey: cacheKey,
meta: meta
});
if (id[0] != ''#'' && shouldAddSchema) this._refs[id] = schemaObj;
this._cache.put(cacheKey, schemaObj);
if (willValidate && recursiveMeta) this.validateSchema(schema, true);
return schemaObj;
}
/* @this   Ajv */
function _compile(schemaObj, root) {
if (schemaObj.compiling) {
schemaObj.validate = callValidate;
callValidate.schema = schemaObj.schema;
callValidate.errors = null;
callValidate.root = root ? root : callValidate;
if (schemaObj.schema.$async === true)
callValidate.$async = true;
return callValidate;
}
schemaObj.compiling = true;
var currentOpts;
if (schemaObj.meta) {
currentOpts = this._opts;
this._opts = this._metaOpts;
}
var v;
try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }
finally {
schemaObj.compiling = false;
if (schemaObj.meta) this._opts = currentOpts;
}
schemaObj.validate = v;
schemaObj.refs = v.refs;
schemaObj.refVal = v.refVal;
schemaObj.root = v.root;
return v;
function callValidate() {
var _validate = schemaObj.validate;
var result = _validate.apply(null, arguments);
callValidate.errors = _validate.errors;
return result;
}
}
function chooseGetId(opts) {
switch (opts.schemaId) {
case ''$id'': return _get$Id;
case ''id'': return _getId;
default: return _get$IdOrId;
}
}
function _getId(schema) {
if (schema.$id) console.warn(''schema $id ignored'', schema.$id);
return schema.id;
}
function _get$Id(schema) {
if (schema.id) console.warn(''schema id ignored'', schema.id);
return schema.$id;
}
function _get$IdOrId(schema) {
if (schema.$id && schema.id && schema.$id != schema.id)
throw new Error(''schema $id is different from id'');
return schema.$id || schema.id;
}
/**
* Convert array of error message objects to string
* @this   Ajv
* @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
* @param  {Object} options optional options with properties \`separator\` and \`dataVar\`.
* @return {String} human readable string with all errors descriptions
*/
function errorsText(errors, options) {
errors = errors || this.errors;
if (!errors) return ''No errors'';
options = options || {};
var separator = options.separator === undefined ? '', '' : options.separator;
var dataVar = options.dataVar === undefined ? ''data'' : options.dataVar;
var text = '''';
for (var i=0; i<errors.length; i++) {
var e = errors[i];
if (e) text += dataVar + e.dataPath + '' '' + e.message + separator;
}
return text.slice(0, -separator.length);
}
/**
* Add custom format
* @this   Ajv
* @param {String} name format name
* @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
*/
function addFormat(name, format) {
if (typeof format == ''string'') format = new RegExp(format);
this._formats[name] = format;
}
function addDraft6MetaSchema(self) {
var $dataSchema;
if (self._opts.$data) {
$dataSchema = require(''./refs/$data.json'');
self.addMetaSchema($dataSchema, $dataSchema.$id, true);
}
if (self._opts.meta === false) return;
var metaSchema = require(''./refs/json-schema-draft-06.json'');
if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
self._refs[''http://json-schema.org/schema''] = META_SCHEMA_ID;
}
function addInitialSchemas(self) {
var optsSchemas = self._opts.schemas;
if (!optsSchemas) return;
if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);
else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
}
function addInitialFormats(self) {
for (var name in self._opts.formats) {
var format = self._opts.formats[name];
self.addFormat(name, format);
}
}
function checkUnique(self, id) {
if (self._schemas[id] || self._refs[id])
throw new Error(''schema with key or id \\"'' + id + ''\\" already exists'');
}
function getMetaSchemaOptions(self) {
var metaOpts = util.copy(self._opts);
for (var i=0; i<META_IGNORE_OPTIONS.length; i++)
delete metaOpts[META_IGNORE_OPTIONS[i]];
return metaOpts;
}
},{\\"./$data\\":8,\\"./cache\\":10,\\"./compile\\":15,\\"./compile/async\\":12,\\"./compile/error_classes\\":13,\\"./compile/formats\\":14,\\"./compile/resolve\\":16,\\"./compile/rules\\":17,\\"./compile/schema_obj\\":18,\\"./compile/util\\":20,\\"./keyword\\":44,\\"./patternGroups\\":45,\\"./refs/$data.json\\":46,\\"./refs/json-schema-draft-06.json\\":47,\\"co\\":48,\\"json-stable-stringify\\":51}],10:[function(require,module,exports){
''use strict'';
var Cache = module.exports = function Cache() {
this._cache = {};
};
Cache.prototype.put = function Cache_put(key, value) {
this._cache[key] = value;
};
Cache.prototype.get = function Cache_get(key) {
return this._cache[key];
};
Cache.prototype.del = function Cache_del(key) {
delete this._cache[key];
};
Cache.prototype.clear = function Cache_clear() {
this._cache = {};
};
},{}],11:[function(require,module,exports){
''use strict'';
//all requires must be explicit because browserify won''t work with dynamic requires
module.exports = {
''$ref'': require(''../dotjs/ref''),
allOf: require(''../dotjs/allOf''),
anyOf: require(''../dotjs/anyOf''),
const: require(''../dotjs/const''),
contains: require(''../dotjs/contains''),
dependencies: require(''../dotjs/dependencies''),
''enum'': require(''../dotjs/enum''),
format: require(''../dotjs/format''),
items: require(''../dotjs/items''),
maximum: require(''../dotjs/_limit''),
minimum: require(''../dotjs/_limit''),
maxItems: require(''../dotjs/_limitItems''),
minItems: require(''../dotjs/_limitItems''),
maxLength: require(''../dotjs/_limitLength''),
minLength: require(''../dotjs/_limitLength''),
maxProperties: require(''../dotjs/_limitProperties''),
minProperties: require(''../dotjs/_limitProperties''),
multipleOf: require(''../dotjs/multipleOf''),
not: require(''../dotjs/not''),
oneOf: require(''../dotjs/oneOf''),
pattern: require(''../dotjs/pattern''),
properties: require(''../dotjs/properties''),
propertyNames: require(''../dotjs/propertyNames''),
required: require(''../dotjs/required''),
uniqueItems: require(''../dotjs/uniqueItems''),
validate: require(''../dotjs/validate'')
};
},{\\"../dotjs/_limit\\":21,\\"../dotjs/_limitItems\\":22,\\"../dotjs/_limitLength\\":23,\\"../dotjs/_limitProperties\\":24,\\"../dotjs/allOf\\":25,\\"../dotjs/anyOf\\":26,\\"../dotjs/const\\":27,\\"../dotjs/contains\\":28,\\"../dotjs/dependencies\\":30,\\"../dotjs/enum\\":31,\\"../dotjs/format\\":32,\\"../dotjs/items\\":33,\\"../dotjs/multipleOf\\":34,\\"../dotjs/not\\":35,\\"../dotjs/oneOf\\":36,\\"../dotjs/pattern\\":37,\\"../dotjs/properties\\":38,\\"../dotjs/propertyNames\\":39,\\"../dotjs/ref\\":40,\\"../dotjs/required\\":41,\\"../dotjs/uniqueItems\\":42,\\"../dotjs/validate\\":43}],12:[function(require,module,exports){
''use strict'';
var MissingRefError = require(''./error_classes'').MissingRef;
module.exports = compileAsync;
/**
* Creates validating function for passed schema with asynchronous loading of missing schemas.
* \`loadSchema\` option should be a function that accepts schema uri and returns promise that resolves with the schema.
* @this  Ajv
* @param {Object}   schema schema object
* @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
* @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
* @return {Promise} promise that resolves with a validating function.
*/
function compileAsync(schema, meta, callback) {
/* eslint no-shadow: 0 */
/* global Promise */
/* jshint validthis: true */
var self = this;
if (typeof this._opts.loadSchema != ''function'')
throw new Error(''options.loadSchema should be a function'');
if (typeof meta == ''function'') {
callback = meta;
meta = undefined;
}
var p = loadMetaSchemaOf(schema).then(function () {
var schemaObj = self._addSchema(schema, undefined, meta);
return schemaObj.validate || _compileAsync(schemaObj);
});
if (callback) {
p.then(
function(v) { callback(null, v); },
callback
);
}
return p;
function loadMetaSchemaOf(sch) {
var $schema = sch.$schema;
return $schema && !self.getSchema($schema)
? compileAsync.call(self, { $ref: $schema }, true)
: Promise.resolve();
}
function _compileAsync(schemaObj) {
try { return self._compile(schemaObj); }
catch(e) {
if (e instanceof MissingRefError) return loadMissingSchema(e);
throw e;
}
function loadMissingSchema(e) {
var ref = e.missingSchema;
if (added(ref)) throw new Error(''Schema '' + ref + '' is loaded but '' + e.missingRef + '' cannot be resolved'');
var schemaPromise = self._loadingSchemas[ref];
if (!schemaPromise) {
schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
schemaPromise.then(removePromise, removePromise);
}
return schemaPromise.then(function (sch) {
if (!added(ref)) {
return loadMetaSchemaOf(sch).then(function () {
if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
});
}
}).then(function() {
return _compileAsync(schemaObj);
});
function removePromise() {
delete self._loadingSchemas[ref];
}
function added(ref) {
return self._refs[ref] || self._schemas[ref];
}
}
}
}
},{\\"./error_classes\\":13}],13:[function(require,module,exports){
''use strict'';
var resolve = require(''./resolve'');
module.exports = {
Validation: errorSubclass(ValidationError),
MissingRef: errorSubclass(MissingRefError)
};
function ValidationError(errors) {
this.message = ''validation failed'';
this.errors = errors;
this.ajv = this.validation = true;
}
MissingRefError.message = function (baseId, ref) {
return ''can\\\\''t resolve reference '' + ref + '' from id '' + baseId;
};
function MissingRefError(baseId, ref, message) {
this.message = message || MissingRefError.message(baseId, ref);
this.missingRef = resolve.url(baseId, ref);
this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));
}
function errorSubclass(Subclass) {
Subclass.prototype = Object.create(Error.prototype);
Subclass.prototype.constructor = Subclass;
return Subclass;
}
},{\\"./resolve\\":16}],14:[function(require,module,exports){
''use strict'';
var util = require(''./util'');
var DATE = /^\\\\d\\\\d\\\\d\\\\d-(\\\\d\\\\d)-(\\\\d\\\\d)$/;
var DAYS = [0,31,29,31,30,31,30,31,31,30,31,30,31];
var TIME = /^(\\\\d\\\\d):(\\\\d\\\\d):(\\\\d\\\\d)(\\\\.\\\\d+)?(z|[+-]\\\\d\\\\d:\\\\d\\\\d)?$/i;
var HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
var URI = /^(?:[a-z][a-z0-9+\\\\-.]*:)(?:\\\\/?\\\\/(?:(?:[a-z0-9\\\\-._~!$&''()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\\\.[a-z0-9\\\\-._~!$&''()*+,;=:]+)\\\\]|(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)|(?:[a-z0-9\\\\-._~!$&''()*+,;=]|%[0-9a-f]{2})*)(?::\\\\d*)?(?:\\\\/(?:[a-z0-9\\\\-._~!$&''()*+,;=:@]|%[0-9a-f]{2})*)*|\\\\/(?:(?:[a-z0-9\\\\-._~!$&''()*+,;=:@]|%[0-9a-f]{2})+(?:\\\\/(?:[a-z0-9\\\\-._~!$&''()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\\\-._~!$&''()*+,;=:@]|%[0-9a-f]{2})+(?:\\\\/(?:[a-z0-9\\\\-._~!$&''()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\\\?(?:[a-z0-9\\\\-._~!$&''()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\\\-._~!$&''()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var URIREF = /^(?:[a-z][a-z0-9+\\\\-.]*:)?(?:\\\\/?\\\\/(?:(?:[a-z0-9\\\\-._~!$&''()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\\\.[a-z0-9\\\\-._~!$&''()*+,;=:]+)\\\\]|(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)|(?:[a-z0-9\\\\-._~!$&''\\"()*+,;=]|%[0-9a-f]{2})*)(?::\\\\d*)?(?:\\\\/(?:[a-z0-9\\\\-._~!$&''\\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\\\/(?:(?:[a-z0-9\\\\-._~!$&''\\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\\\/(?:[a-z0-9\\\\-._~!$&''\\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\\\-._~!$&''\\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\\\/(?:[a-z0-9\\\\-._~!$&''\\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\\\?(?:[a-z0-9\\\\-._~!$&''\\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\\\-._~!$&''\\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
// uri-template: https://tools.ietf.org/html/rfc6570
var URITEMPLATE = /^(?:(?:[^\\\\x00-\\\\x20\\"''<>%\\\\\\\\^\`{|}]|%[0-9a-f]{2})|\\\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\\\*)?)*\\\\})*$/i;
// For the source: https://gist.github.com/dperini/729294
// For test cases: https://mathiasbynens.be/demo/url-regex
// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
// var URL = /^(?:(?:https?|ftp):\\\\/\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!10(?:\\\\.\\\\d{1,3}){3})(?!127(?:\\\\.\\\\d{1,3}){3})(?!169\\\\.254(?:\\\\.\\\\d{1,3}){2})(?!192\\\\.168(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u{00a1}-\\\\u{ffff}0-9]+-?)*[a-z\\\\u{00a1}-\\\\u{ffff}0-9]+)(?:\\\\.(?:[a-z\\\\u{00a1}-\\\\u{ffff}0-9]+-?)*[a-z\\\\u{00a1}-\\\\u{ffff}0-9]+)*(?:\\\\.(?:[a-z\\\\u{00a1}-\\\\u{ffff}]{2,})))(?::\\\\d{2,5})?(?:\\\\/[^\\\\s]*)?$/iu;
var URL = /^(?:(?:http[s\\\\u017F]?|ftp):\\\\/\\\\/)(?:(?:[\\\\0-\\\\x08\\\\x0E-\\\\x1F!-\\\\x9F\\\\xA1-\\\\u167F\\\\u1681-\\\\u1FFF\\\\u200B-\\\\u2027\\\\u202A-\\\\u202E\\\\u2030-\\\\u205E\\\\u2060-\\\\u2FFF\\\\u3001-\\\\uD7FF\\\\uE000-\\\\uFEFE\\\\uFF00-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+(?::(?:[\\\\0-\\\\x08\\\\x0E-\\\\x1F!-\\\\x9F\\\\xA1-\\\\u167F\\\\u1681-\\\\u1FFF\\\\u200B-\\\\u2027\\\\u202A-\\\\u202E\\\\u2030-\\\\u205E\\\\u2060-\\\\u2FFF\\\\u3001-\\\\uD7FF\\\\uE000-\\\\uFEFE\\\\uFF00-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])*)?@)?(?:(?!10(?:\\\\.[0-9]{1,3}){3})(?!127(?:\\\\.[0-9]{1,3}){3})(?!169\\\\.254(?:\\\\.[0-9]{1,3}){2})(?!192\\\\.168(?:\\\\.[0-9]{1,3}){2})(?!172\\\\.(?:1[6-9]|2[0-9]|3[01])(?:\\\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+-?)*(?:[0-9KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+)(?:\\\\.(?:(?:[0-9KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+-?)*(?:[0-9KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])+)*(?:\\\\.(?:(?:[KSa-z\\\\xA1-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\\\/(?:[\\\\0-\\\\x08\\\\x0E-\\\\x1F!-\\\\x9F\\\\xA1-\\\\u167F\\\\u1681-\\\\u1FFF\\\\u200B-\\\\u2027\\\\u202A-\\\\u202E\\\\u2030-\\\\u205E\\\\u2060-\\\\u2FFF\\\\u3001-\\\\uD7FF\\\\uE000-\\\\uFEFE\\\\uFF00-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])*)?$/i;
var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
var JSON_POINTER = /^(?:\\\\/(?:[^~/]|~0|~1)*)*$|^#(?:\\\\/(?:[a-z0-9_\\\\-.!$&''()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\\\\/(?:[^~/]|~0|~1)*)*)$/;
module.exports = formats;
function formats(mode) {
mode = mode == ''full'' ? ''full'' : ''fast'';
return util.copy(formats[mode]);
}
formats.fast = {
// date: http://tools.ietf.org/html/rfc3339#section-5.6
date: /^\\\\d\\\\d\\\\d\\\\d-[0-1]\\\\d-[0-3]\\\\d$/,
// date-time: http://tools.ietf.org/html/rfc3339#section-5.6
time: /^[0-2]\\\\d:[0-5]\\\\d:[0-5]\\\\d(?:\\\\.\\\\d+)?(?:z|[+-]\\\\d\\\\d:\\\\d\\\\d)?$/i,
''date-time'': /^\\\\d\\\\d\\\\d\\\\d-[0-1]\\\\d-[0-3]\\\\d[t\\\\s][0-2]\\\\d:[0-5]\\\\d:[0-5]\\\\d(?:\\\\.\\\\d+)?(?:z|[+-]\\\\d\\\\d:\\\\d\\\\d)$/i,
// uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
uri: /^(?:[a-z][a-z0-9+-.]*)(?::|\\\\/)\\\\/?[^\\\\s]*$/i,
''uri-reference'': /^(?:(?:[a-z][a-z0-9+-.]*:)?\\\\/\\\\/)?[^\\\\s]*$/i,
''uri-template'': URITEMPLATE,
url: URL,
// email (sources from jsen validator):
// http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
// http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for ''willful violation'')
email: /^[a-z0-9.!#$%&''*+/=?^_\`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
hostname: HOSTNAME,
// optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
ipv4: /^(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)$/,
// optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
ipv6: /^\\\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:)))(?:%.+)?\\\\s*$/i,
regex: regex,
// uuid: http://tools.ietf.org/html/rfc4122
uuid: UUID,
// JSON-pointer: https://tools.ietf.org/html/rfc6901
// uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
''json-pointer'': JSON_POINTER,
// relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
''relative-json-pointer'': RELATIVE_JSON_POINTER
};
formats.full = {
date: date,
time: time,
''date-time'': date_time,
uri: uri,
''uri-reference'': URIREF,
''uri-template'': URITEMPLATE,
url: URL,
email: /^[a-z0-9!#$%&''*+/=?^_\`{|}~-]+(?:\\\\.[a-z0-9!#$%&''''*+/=?^_\`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
hostname: hostname,
ipv4: /^(?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)$/,
ipv6: /^\\\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:)))(?:%.+)?\\\\s*$/i,
regex: regex,
uuid: UUID,
''json-pointer'': JSON_POINTER,
''relative-json-pointer'': RELATIVE_JSON_POINTER
};
function date(str) {
// full-date from http://tools.ietf.org/html/rfc3339#section-5.6
var matches = str.match(DATE);
if (!matches) return false;
var month = +matches[1];
var day = +matches[2];
return month >= 1 && month <= 12 && day >= 1 && day <= DAYS[month];
}
function time(str, full) {
var matches = str.match(TIME);
if (!matches) return false;
var hour = matches[1];
var minute = matches[2];
var second = matches[3];
var timeZone = matches[5];
return hour <= 23 && minute <= 59 && second <= 59 && (!full || timeZone);
}
var DATE_TIME_SEPARATOR = /t|\\\\s/i;
function date_time(str) {
// http://tools.ietf.org/html/rfc3339#section-5.6
var dateTime = str.split(DATE_TIME_SEPARATOR);
return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
}
function hostname(str) {
// https://tools.ietf.org/html/rfc1034#section-3.5
// https://tools.ietf.org/html/rfc1123#section-2
return str.length <= 255 && HOSTNAME.test(str);
}
var NOT_URI_FRAGMENT = /\\\\/|:/;
function uri(str) {
// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \\".\\"
return NOT_URI_FRAGMENT.test(str) && URI.test(str);
}
var Z_ANCHOR = /[^\\\\\\\\]\\\\\\\\Z/;
function regex(str) {
if (Z_ANCHOR.test(str)) return false;
try {
new RegExp(str);
return true;
} catch(e) {
return false;
}
}
},{\\"./util\\":20}],15:[function(require,module,exports){
''use strict'';
var resolve = require(''./resolve'')
, util = require(''./util'')
, errorClasses = require(''./error_classes'')
, stableStringify = require(''json-stable-stringify'');
var validateGenerator = require(''../dotjs/validate'');
/**
* Functions below are used inside compiled validations function
*/
var co = require(''co'');
var ucs2length = util.ucs2length;
var equal = require(''fast-deep-equal'');
// this error is thrown by async schemas to return validation errors via exception
var ValidationError = errorClasses.Validation;
module.exports = compile;
/**
* Compiles schema to validation function
* @this   Ajv
* @param  {Object} schema schema object
* @param  {Object} root object with information about the root schema for this schema
* @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
* @param  {String} baseId base ID for IDs in the schema
* @return {Function} validation function
*/
function compile(schema, root, localRefs, baseId) {
/* jshint validthis: true, evil: true */
/* eslint no-shadow: 0 */
var self = this
, opts = this._opts
, refVal = [ undefined ]
, refs = {}
, patterns = []
, patternsHash = {}
, defaults = []
, defaultsHash = {}
, customRules = [];
root = root || { schema: schema, refVal: refVal, refs: refs };
var c = checkCompiling.call(this, schema, root, baseId);
var compilation = this._compilations[c.index];
if (c.compiling) return (compilation.callValidate = callValidate);
var formats = this._formats;
var RULES = this.RULES;
try {
var v = localCompile(schema, root, localRefs, baseId);
compilation.validate = v;
var cv = compilation.callValidate;
if (cv) {
cv.schema = v.schema;
cv.errors = null;
cv.refs = v.refs;
cv.refVal = v.refVal;
cv.root = v.root;
cv.$async = v.$async;
if (opts.sourceCode) cv.source = v.source;
}
return v;
} finally {
endCompiling.call(this, schema, root, baseId);
}
function callValidate() {
var validate = compilation.validate;
var result = validate.apply(null, arguments);
callValidate.errors = validate.errors;
return result;
}
function localCompile(_schema, _root, localRefs, baseId) {
var isRoot = !_root || (_root && _root.schema == _schema);
if (_root.schema != root.schema)
return compile.call(self, _schema, _root, localRefs, baseId);
var $async = _schema.$async === true;
var sourceCode = validateGenerator({
isTop: true,
schema: _schema,
isRoot: isRoot,
baseId: baseId,
root: _root,
schemaPath: '''',
errSchemaPath: ''#'',
errorPath: ''\\"\\"'',
MissingRefError: errorClasses.MissingRef,
RULES: RULES,
validate: validateGenerator,
util: util,
resolve: resolve,
resolveRef: resolveRef,
usePattern: usePattern,
useDefault: useDefault,
useCustomRule: useCustomRule,
opts: opts,
formats: formats,
self: self
});
sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)
+ vars(defaults, defaultCode) + vars(customRules, customRuleCode)
+ sourceCode;
if (opts.processCode) sourceCode = opts.processCode(sourceCode);
// console.log(''\\\\n\\\\n\\\\n *** \\\\n'', JSON.stringify(sourceCode));
var validate;
try {
var makeValidate = new Function(
''self'',
''RULES'',
''formats'',
''root'',
''refVal'',
''defaults'',
''customRules'',
''co'',
''equal'',
''ucs2length'',
''ValidationError'',
sourceCode
);
validate = makeValidate(
self,
RULES,
formats,
root,
refVal,
defaults,
customRules,
co,
equal,
ucs2length,
ValidationError
);
refVal[0] = validate;
} catch(e) {
console.error(''Error compiling schema, function code:'', sourceCode);
throw e;
}
validate.schema = _schema;
validate.errors = null;
validate.refs = refs;
validate.refVal = refVal;
validate.root = isRoot ? validate : _root;
if ($async) validate.$async = true;
if (opts.sourceCode === true) {
validate.source = {
code: sourceCode,
patterns: patterns,
defaults: defaults
};
}
return validate;
}
function resolveRef(baseId, ref, isRoot) {
ref = resolve.url(baseId, ref);
var refIndex = refs[ref];
var _refVal, refCode;
if (refIndex !== undefined) {
_refVal = refVal[refIndex];
refCode = ''refVal['' + refIndex + '']'';
return resolvedRef(_refVal, refCode);
}
if (!isRoot && root.refs) {
var rootRefId = root.refs[ref];
if (rootRefId !== undefined) {
_refVal = root.refVal[rootRefId];
refCode = addLocalRef(ref, _refVal);
return resolvedRef(_refVal, refCode);
}
}
refCode = addLocalRef(ref);
var v = resolve.call(self, localCompile, root, ref);
if (v === undefined) {
var localSchema = localRefs && localRefs[ref];
if (localSchema) {
v = resolve.inlineRef(localSchema, opts.inlineRefs)
? localSchema
: compile.call(self, localSchema, root, localRefs, baseId);
}
}
if (v === undefined) {
removeLocalRef(ref);
} else {
replaceLocalRef(ref, v);
return resolvedRef(v, refCode);
}
}
function addLocalRef(ref, v) {
var refId = refVal.length;
refVal[refId] = v;
refs[ref] = refId;
return ''refVal'' + refId;
}
function removeLocalRef(ref) {
delete refs[ref];
}
function replaceLocalRef(ref, v) {
var refId = refs[ref];
refVal[refId] = v;
}
function resolvedRef(refVal, code) {
return typeof refVal == ''object'' || typeof refVal == ''boolean''
? { code: code, schema: refVal, inline: true }
: { code: code, $async: refVal && refVal.$async };
}
function usePattern(regexStr) {
var index = patternsHash[regexStr];
if (index === undefined) {
index = patternsHash[regexStr] = patterns.length;
patterns[index] = regexStr;
}
return ''pattern'' + index;
}
function useDefault(value) {
switch (typeof value) {
case ''boolean'':
case ''number'':
return '''' + value;
case ''string'':
return util.toQuotedString(value);
case ''object'':
if (value === null) return ''null'';
var valueStr = stableStringify(value);
var index = defaultsHash[valueStr];
if (index === undefined) {
index = defaultsHash[valueStr] = defaults.length;
defaults[index] = value;
}
return ''default'' + index;
}
}
function useCustomRule(rule, schema, parentSchema, it) {
var validateSchema = rule.definition.validateSchema;
if (validateSchema && self._opts.validateSchema !== false) {
var valid = validateSchema(schema);
if (!valid) {
var message = ''keyword schema is invalid: '' + self.errorsText(validateSchema.errors);
if (self._opts.validateSchema == ''log'') console.error(message);
else throw new Error(message);
}
}
var compile = rule.definition.compile
, inline = rule.definition.inline
, macro = rule.definition.macro;
var validate;
if (compile) {
validate = compile.call(self, schema, parentSchema, it);
} else if (macro) {
validate = macro.call(self, schema, parentSchema, it);
if (opts.validateSchema !== false) self.validateSchema(validate, true);
} else if (inline) {
validate = inline.call(self, it, rule.keyword, schema, parentSchema);
} else {
validate = rule.definition.validate;
if (!validate) return;
}
if (validate === undefined)
throw new Error(''custom keyword \\"'' + rule.keyword + ''\\"failed to compile'');
var index = customRules.length;
customRules[index] = validate;
return {
code: ''customRule'' + index,
validate: validate
};
}
}
/**
* Checks if the schema is currently compiled
* @this   Ajv
* @param  {Object} schema schema to compile
* @param  {Object} root root object
* @param  {String} baseId base schema ID
* @return {Object} object with properties \\"index\\" (compilation index) and \\"compiling\\" (boolean)
*/
function checkCompiling(schema, root, baseId) {
/* jshint validthis: true */
var index = compIndex.call(this, schema, root, baseId);
if (index >= 0) return { index: index, compiling: true };
index = this._compilations.length;
this._compilations[index] = {
schema: schema,
root: root,
baseId: baseId
};
return { index: index, compiling: false };
}
/**
* Removes the schema from the currently compiled list
* @this   Ajv
* @param  {Object} schema schema to compile
* @param  {Object} root root object
* @param  {String} baseId base schema ID
*/
function endCompiling(schema, root, baseId) {
/* jshint validthis: true */
var i = compIndex.call(this, schema, root, baseId);
if (i >= 0) this._compilations.splice(i, 1);
}
/**
* Index of schema compilation in the currently compiled list
* @this   Ajv
* @param  {Object} schema schema to compile
* @param  {Object} root root object
* @param  {String} baseId base schema ID
* @return {Integer} compilation index
*/
function compIndex(schema, root, baseId) {
/* jshint validthis: true */
for (var i=0; i<this._compilations.length; i++) {
var c = this._compilations[i];
if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
}
return -1;
}
function patternCode(i, patterns) {
return ''var pattern'' + i + '' = new RegExp('' + util.toQuotedString(patterns[i]) + '');'';
}
function defaultCode(i) {
return ''var default'' + i + '' = defaults['' + i + ''];'';
}
function refValCode(i, refVal) {
return refVal[i] === undefined ? '''' : ''var refVal'' + i + '' = refVal['' + i + ''];'';
}
function customRuleCode(i) {
return ''var customRule'' + i + '' = customRules['' + i + ''];'';
}
function vars(arr, statement) {
if (!arr.length) return '''';
var code = '''';
for (var i=0; i<arr.length; i++)
code += statement(i, arr);
return code;
}
},{\\"../dotjs/validate\\":43,\\"./error_classes\\":13,\\"./resolve\\":16,\\"./util\\":20,\\"co\\":48,\\"fast-deep-equal\\":49,\\"json-stable-stringify\\":51}],16:[function(require,module,exports){
''use strict'';
var url = require(''url'')
, equal = require(''fast-deep-equal'')
, util = require(''./util'')
, SchemaObject = require(''./schema_obj'')
, traverse = require(''json-schema-traverse'');
module.exports = resolve;
resolve.normalizeId = normalizeId;
resolve.fullPath = getFullPath;
resolve.url = resolveUrl;
resolve.ids = resolveIds;
resolve.inlineRef = inlineRef;
resolve.schema = resolveSchema;
/**
* [resolve and compile the references ($ref)]
* @this   Ajv
* @param  {Function} compile reference to schema compilation funciton (localCompile)
* @param  {Object} root object with information about the root schema for the current schema
* @param  {String} ref reference to resolve
* @return {Object|Function} schema object (if the schema can be inlined) or validation function
*/
function resolve(compile, root, ref) {
/* jshint validthis: true */
var refVal = this._refs[ref];
if (typeof refVal == ''string'') {
if (this._refs[refVal]) refVal = this._refs[refVal];
else return resolve.call(this, compile, root, refVal);
}
refVal = refVal || this._schemas[ref];
if (refVal instanceof SchemaObject) {
return inlineRef(refVal.schema, this._opts.inlineRefs)
? refVal.schema
: refVal.validate || this._compile(refVal);
}
var res = resolveSchema.call(this, root, ref);
var schema, v, baseId;
if (res) {
schema = res.schema;
root = res.root;
baseId = res.baseId;
}
if (schema instanceof SchemaObject) {
v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
} else if (schema !== undefined) {
v = inlineRef(schema, this._opts.inlineRefs)
? schema
: compile.call(this, schema, root, undefined, baseId);
}
return v;
}
/**
* Resolve schema, its root and baseId
* @this Ajv
* @param  {Object} root root object with properties schema, refVal, refs
* @param  {String} ref  reference to resolve
* @return {Object} object with properties schema, root, baseId
*/
function resolveSchema(root, ref) {
/* jshint validthis: true */
var p = url.parse(ref, false, true)
, refPath = _getFullPath(p)
, baseId = getFullPath(this._getId(root.schema));
if (refPath !== baseId) {
var id = normalizeId(refPath);
var refVal = this._refs[id];
if (typeof refVal == ''string'') {
return resolveRecursive.call(this, root, refVal, p);
} else if (refVal instanceof SchemaObject) {
if (!refVal.validate) this._compile(refVal);
root = refVal;
} else {
refVal = this._schemas[id];
if (refVal instanceof SchemaObject) {
if (!refVal.validate) this._compile(refVal);
if (id == normalizeId(ref))
return { schema: refVal, root: root, baseId: baseId };
root = refVal;
} else {
return;
}
}
if (!root.schema) return;
baseId = getFullPath(this._getId(root.schema));
}
return getJsonPointer.call(this, p, baseId, root.schema, root);
}
/* @this Ajv */
function resolveRecursive(root, ref, parsedRef) {
/* jshint validthis: true */
var res = resolveSchema.call(this, root, ref);
if (res) {
var schema = res.schema;
var baseId = res.baseId;
root = res.root;
var id = this._getId(schema);
if (id) baseId = resolveUrl(baseId, id);
return getJsonPointer.call(this, parsedRef, baseId, schema, root);
}
}
var PREVENT_SCOPE_CHANGE = util.toHash([''properties'', ''patternProperties'', ''enum'', ''dependencies'', ''definitions'']);
/* @this Ajv */
function getJsonPointer(parsedRef, baseId, schema, root) {
/* jshint validthis: true */
parsedRef.hash = parsedRef.hash || '''';
if (parsedRef.hash.slice(0,2) != ''#/'') return;
var parts = parsedRef.hash.split(''/'');
for (var i = 1; i < parts.length; i++) {
var part = parts[i];
if (part) {
part = util.unescapeFragment(part);
schema = schema[part];
if (schema === undefined) break;
var id;
if (!PREVENT_SCOPE_CHANGE[part]) {
id = this._getId(schema);
if (id) baseId = resolveUrl(baseId, id);
if (schema.$ref) {
var $ref = resolveUrl(baseId, schema.$ref);
var res = resolveSchema.call(this, root, $ref);
if (res) {
schema = res.schema;
root = res.root;
baseId = res.baseId;
}
}
}
}
}
if (schema !== undefined && schema !== root.schema)
return { schema: schema, root: root, baseId: baseId };
}
var SIMPLE_INLINED = util.toHash([
''type'', ''format'', ''pattern'',
''maxLength'', ''minLength'',
''maxProperties'', ''minProperties'',
''maxItems'', ''minItems'',
''maximum'', ''minimum'',
''uniqueItems'', ''multipleOf'',
''required'', ''enum''
]);
function inlineRef(schema, limit) {
if (limit === false) return false;
if (limit === undefined || limit === true) return checkNoRef(schema);
else if (limit) return countKeys(schema) <= limit;
}
function checkNoRef(schema) {
var item;
if (Array.isArray(schema)) {
for (var i=0; i<schema.length; i++) {
item = schema[i];
if (typeof item == ''object'' && !checkNoRef(item)) return false;
}
} else {
for (var key in schema) {
if (key == ''$ref'') return false;
item = schema[key];
if (typeof item == ''object'' && !checkNoRef(item)) return false;
}
}
return true;
}
function countKeys(schema) {
var count = 0, item;
if (Array.isArray(schema)) {
for (var i=0; i<schema.length; i++) {
item = schema[i];
if (typeof item == ''object'') count += countKeys(item);
if (count == Infinity) return Infinity;
}
} else {
for (var key in schema) {
if (key == ''$ref'') return Infinity;
if (SIMPLE_INLINED[key]) {
count++;
} else {
item = schema[key];
if (typeof item == ''object'') count += countKeys(item) + 1;
if (count == Infinity) return Infinity;
}
}
}
return count;
}
function getFullPath(id, normalize) {
if (normalize !== false) id = normalizeId(id);
var p = url.parse(id, false, true);
return _getFullPath(p);
}
function _getFullPath(p) {
var protocolSeparator = p.protocol || p.href.slice(0,2) == ''//'' ? ''//'' : '''';
return (p.protocol||'''') + protocolSeparator + (p.host||'''') + (p.path||'''')  + ''#'';
}
var TRAILING_SLASH_HASH = /#\\\\/?$/;
function normalizeId(id) {
return id ? id.replace(TRAILING_SLASH_HASH, '''') : '''';
}
function resolveUrl(baseId, id) {
id = normalizeId(id);
return url.resolve(baseId, id);
}
/* @this Ajv */
function resolveIds(schema) {
var schemaId = normalizeId(this._getId(schema));
var baseIds = {'''': schemaId};
var fullPaths = {'''': getFullPath(schemaId, false)};
var localRefs = {};
var self = this;
traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
if (jsonPtr === '''') return;
var id = self._getId(sch);
var baseId = baseIds[parentJsonPtr];
var fullPath = fullPaths[parentJsonPtr] + ''/'' + parentKeyword;
if (keyIndex !== undefined)
fullPath += ''/'' + (typeof keyIndex == ''number'' ? keyIndex : util.escapeFragment(keyIndex));
if (typeof id == ''string'') {
id = baseId = normalizeId(baseId ? url.resolve(baseId, id) : id);
var refVal = self._refs[id];
if (typeof refVal == ''string'') refVal = self._refs[refVal];
if (refVal && refVal.schema) {
if (!equal(sch, refVal.schema))
throw new Error(''id \\"'' + id + ''\\" resolves to more than one schema'');
} else if (id != normalizeId(fullPath)) {
if (id[0] == ''#'') {
if (localRefs[id] && !equal(sch, localRefs[id]))
throw new Error(''id \\"'' + id + ''\\" resolves to more than one schema'');
localRefs[id] = sch;
} else {
self._refs[id] = fullPath;
}
}
}
baseIds[jsonPtr] = baseId;
fullPaths[jsonPtr] = fullPath;
});
return localRefs;
}
},{\\"./schema_obj\\":18,\\"./util\\":20,\\"fast-deep-equal\\":49,\\"json-schema-traverse\\":50,\\"url\\":5}],17:[function(require,module,exports){
''use strict'';
var ruleModules = require(''./_rules'')
, toHash = require(''./util'').toHash;
module.exports = function rules() {
var RULES = [
{ type: ''number'',
rules: [ { ''maximum'': [''exclusiveMaximum''] },
{ ''minimum'': [''exclusiveMinimum''] }, ''multipleOf'', ''format''] },
{ type: ''string'',
rules: [ ''maxLength'', ''minLength'', ''pattern'', ''format'' ] },
{ type: ''array'',
rules: [ ''maxItems'', ''minItems'', ''uniqueItems'', ''contains'', ''items'' ] },
{ type: ''object'',
rules: [ ''maxProperties'', ''minProperties'', ''required'', ''dependencies'', ''propertyNames'',
{ ''properties'': [''additionalProperties'', ''patternProperties''] } ] },
{ rules: [ ''$ref'', ''const'', ''enum'', ''not'', ''anyOf'', ''oneOf'', ''allOf'' ] }
];
var ALL = [ ''type'' ];
var KEYWORDS = [
''additionalItems'', ''$schema'', ''id'', ''title'',
''description'', ''default'', ''definitions''
];
var TYPES = [ ''number'', ''integer'', ''string'', ''array'', ''object'', ''boolean'', ''null'' ];
RULES.all = toHash(ALL);
RULES.types = toHash(TYPES);
RULES.forEach(function (group) {
group.rules = group.rules.map(function (keyword) {
var implKeywords;
if (typeof keyword == ''object'') {
var key = Object.keys(keyword)[0];
implKeywords = keyword[key];
keyword = key;
implKeywords.forEach(function (k) {
ALL.push(k);
RULES.all[k] = true;
});
}
ALL.push(keyword);
var rule = RULES.all[keyword] = {
keyword: keyword,
code: ruleModules[keyword],
implements: implKeywords
};
return rule;
});
if (group.type) RULES.types[group.type] = group;
});
RULES.keywords = toHash(ALL.concat(KEYWORDS));
RULES.custom = {};
return RULES;
};
},{\\"./_rules\\":11,\\"./util\\":20}],18:[function(require,module,exports){
''use strict'';
var util = require(''./util'');
module.exports = SchemaObject;
function SchemaObject(obj) {
util.copy(obj, this);
}
},{\\"./util\\":20}],19:[function(require,module,exports){
''use strict'';
// https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
module.exports = function ucs2length(str) {
var length = 0
, len = str.length
, pos = 0
, value;
while (pos < len) {
length++;
value = str.charCodeAt(pos++);
if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
// high surrogate, and there is a next character
value = str.charCodeAt(pos);
if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
}
}
return length;
};
},{}],20:[function(require,module,exports){
''use strict'';
module.exports = {
copy: copy,
checkDataType: checkDataType,
checkDataTypes: checkDataTypes,
coerceToTypes: coerceToTypes,
toHash: toHash,
getProperty: getProperty,
escapeQuotes: escapeQuotes,
equal: require(''fast-deep-equal''),
ucs2length: require(''./ucs2length''),
varOccurences: varOccurences,
varReplace: varReplace,
cleanUpCode: cleanUpCode,
finalCleanUpCode: finalCleanUpCode,
schemaHasRules: schemaHasRules,
schemaHasRulesExcept: schemaHasRulesExcept,
toQuotedString: toQuotedString,
getPathExpr: getPathExpr,
getPath: getPath,
getData: getData,
unescapeFragment: unescapeFragment,
unescapeJsonPointer: unescapeJsonPointer,
escapeFragment: escapeFragment,
escapeJsonPointer: escapeJsonPointer
};
function copy(o, to) {
to = to || {};
for (var key in o) to[key] = o[key];
return to;
}
function checkDataType(dataType, data, negate) {
var EQUAL = negate ? '' !== '' : '' === ''
, AND = negate ? '' || '' : '' && ''
, OK = negate ? ''!'' : ''''
, NOT = negate ? '''' : ''!'';
switch (dataType) {
case ''null'': return data + EQUAL + ''null'';
case ''array'': return OK + ''Array.isArray('' + data + '')'';
case ''object'': return ''('' + OK + data + AND +
''typeof '' + data + EQUAL + ''\\"object\\"'' + AND +
NOT + ''Array.isArray('' + data + ''))'';
case ''integer'': return ''(typeof '' + data + EQUAL + ''\\"number\\"'' + AND +
NOT + ''('' + data + '' % 1)'' +
AND + data + EQUAL + data + '')'';
default: return ''typeof '' + data + EQUAL + ''\\"'' + dataType + ''\\"'';
}
}
function checkDataTypes(dataTypes, data) {
switch (dataTypes.length) {
case 1: return checkDataType(dataTypes[0], data, true);
default:
var code = '''';
var types = toHash(dataTypes);
if (types.array && types.object) {
code = types.null ? ''('': ''(!'' + data + '' || '';
code += ''typeof '' + data + '' !== \\"object\\")'';
delete types.null;
delete types.array;
delete types.object;
}
if (types.number) delete types.integer;
for (var t in types)
code += (code ? '' && '' : '''' ) + checkDataType(t, data, true);
return code;
}
}
var COERCE_TO_TYPES = toHash([ ''string'', ''number'', ''integer'', ''boolean'', ''null'' ]);
function coerceToTypes(optionCoerceTypes, dataTypes) {
if (Array.isArray(dataTypes)) {
var types = [];
for (var i=0; i<dataTypes.length; i++) {
var t = dataTypes[i];
if (COERCE_TO_TYPES[t]) types[types.length] = t;
else if (optionCoerceTypes === ''array'' && t === ''array'') types[types.length] = t;
}
if (types.length) return types;
} else if (COERCE_TO_TYPES[dataTypes]) {
return [dataTypes];
} else if (optionCoerceTypes === ''array'' && dataTypes === ''array'') {
return [''array''];
}
}
function toHash(arr) {
var hash = {};
for (var i=0; i<arr.length; i++) hash[arr[i]] = true;
return hash;
}
var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
var SINGLE_QUOTE = /''|\\\\\\\\/g;
function getProperty(key) {
return typeof key == ''number''
? ''['' + key + '']''
: IDENTIFIER.test(key)
? ''.'' + key
: \\"[''\\" + escapeQuotes(key) + \\"'']\\";
}
function escapeQuotes(str) {
return str.replace(SINGLE_QUOTE, ''\\\\\\\\$&'')
.replace(/\\\\n/g, ''\\\\\\\\n'')
.replace(/\\\\r/g, ''\\\\\\\\r'')
.replace(/\\\\f/g, ''\\\\\\\\f'')
.replace(/\\\\t/g, ''\\\\\\\\t'');
}
function varOccurences(str, dataVar) {
dataVar += ''[^0-9]'';
var matches = str.match(new RegExp(dataVar, ''g''));
return matches ? matches.length : 0;
}
function varReplace(str, dataVar, expr) {
dataVar += ''([^0-9])'';
expr = expr.replace(/\\\\$/g, ''$$$$'');
return str.replace(new RegExp(dataVar, ''g''), expr + ''$1'');
}
var EMPTY_ELSE = /else\\\\s*{\\\\s*}/g
, EMPTY_IF_NO_ELSE = /if\\\\s*\\\\([^)]+\\\\)\\\\s*\\\\{\\\\s*\\\\}(?!\\\\s*else)/g
, EMPTY_IF_WITH_ELSE = /if\\\\s*\\\\(([^)]+)\\\\)\\\\s*\\\\{\\\\s*\\\\}\\\\s*else(?!\\\\s*if)/g;
function cleanUpCode(out) {
return out.replace(EMPTY_ELSE, '''')
.replace(EMPTY_IF_NO_ELSE, '''')
.replace(EMPTY_IF_WITH_ELSE, ''if (!($1))'');
}
var ERRORS_REGEXP = /[^v.]errors/g
, REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g
, REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g
, RETURN_VALID = ''return errors === 0;''
, RETURN_TRUE = ''validate.errors = null; return true;''
, RETURN_ASYNC = /if \\\\(errors === 0\\\\) return data;\\\\s*else throw new ValidationError\\\\(vErrors\\\\);/
, RETURN_DATA_ASYNC = ''return data;''
, ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g
, REMOVE_ROOTDATA = /if \\\\(rootData === undefined\\\\) rootData = data;/;
function finalCleanUpCode(out, async) {
var matches = out.match(ERRORS_REGEXP);
if (matches && matches.length == 2) {
out = async
? out.replace(REMOVE_ERRORS_ASYNC, '''')
.replace(RETURN_ASYNC, RETURN_DATA_ASYNC)
: out.replace(REMOVE_ERRORS, '''')
.replace(RETURN_VALID, RETURN_TRUE);
}
matches = out.match(ROOTDATA_REGEXP);
if (!matches || matches.length !== 3) return out;
return out.replace(REMOVE_ROOTDATA, '''');
}
function schemaHasRules(schema, rules) {
if (typeof schema == ''boolean'') return !schema;
for (var key in schema) if (rules[key]) return true;
}
function schemaHasRulesExcept(schema, rules, exceptKeyword) {
if (typeof schema == ''boolean'') return !schema && exceptKeyword != ''not'';
for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
}
function toQuotedString(str) {
return ''\\\\'''' + escapeQuotes(str) + ''\\\\'''';
}
function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
var path = jsonPointers // false by default
? ''\\\\''/\\\\'' + '' + expr + (isNumber ? '''' : ''.replace(/~/g, \\\\''~0\\\\'').replace(/\\\\\\\\//g, \\\\''~1\\\\'')'')
: (isNumber ? ''\\\\''[\\\\'' + '' + expr + '' + \\\\'']\\\\'''' : ''\\\\''[\\\\\\\\\\\\''\\\\'' + '' + expr + '' + \\\\''\\\\\\\\\\\\'']\\\\'''');
return joinPaths(currentPath, path);
}
function getPath(currentPath, prop, jsonPointers) {
var path = jsonPointers // false by default
? toQuotedString(''/'' + escapeJsonPointer(prop))
: toQuotedString(getProperty(prop));
return joinPaths(currentPath, path);
}
var JSON_POINTER = /^\\\\/(?:[^~]|~0|~1)*$/;
var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\\\/(?:[^~]|~0|~1)*)?$/;
function getData($data, lvl, paths) {
var up, jsonPointer, data, matches;
if ($data === '''') return ''rootData'';
if ($data[0] == ''/'') {
if (!JSON_POINTER.test($data)) throw new Error(''Invalid JSON-pointer: '' + $data);
jsonPointer = $data;
data = ''rootData'';
} else {
matches = $data.match(RELATIVE_JSON_POINTER);
if (!matches) throw new Error(''Invalid JSON-pointer: '' + $data);
up = +matches[1];
jsonPointer = matches[2];
if (jsonPointer == ''#'') {
if (up >= lvl) throw new Error(''Cannot access property/index '' + up + '' levels up, current level is '' + lvl);
return paths[lvl - up];
}
if (up > lvl) throw new Error(''Cannot access data '' + up + '' levels up, current level is '' + lvl);
data = ''data'' + ((lvl - up) || '''');
if (!jsonPointer) return data;
}
var expr = data;
var segments = jsonPointer.split(''/'');
for (var i=0; i<segments.length; i++) {
var segment = segments[i];
if (segment) {
data += getProperty(unescapeJsonPointer(segment));
expr += '' && '' + data;
}
}
return expr;
}
function joinPaths (a, b) {
if (a == ''\\"\\"'') return b;
return (a + '' + '' + b).replace(/'' \\\\+ ''/g, '''');
}
function unescapeFragment(str) {
return unescapeJsonPointer(decodeURIComponent(str));
}
function escapeFragment(str) {
return encodeURIComponent(escapeJsonPointer(str));
}
function escapeJsonPointer(str) {
return str.replace(/~/g, ''~0'').replace(/\\\\//g, ''~1'');
}
function unescapeJsonPointer(str) {
return str.replace(/~1/g, ''/'').replace(/~0/g, ''~'');
}
},{\\"./ucs2length\\":19,\\"fast-deep-equal\\":49}],21:[function(require,module,exports){
''use strict'';
module.exports = function generate__limit(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $errorKeyword;
var $data = ''data'' + ($dataLvl || '''');
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
var $isMax = $keyword == ''maximum'',
$exclusiveKeyword = $isMax ? ''exclusiveMaximum'' : ''exclusiveMinimum'',
$schemaExcl = it.schema[$exclusiveKeyword],
$isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
$op = $isMax ? ''<'' : ''>'',
$notOp = $isMax ? ''>'' : ''<'',
$errorKeyword = undefined;
if ($isDataExcl) {
var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
$exclusive = ''exclusive'' + $lvl,
$exclType = ''exclType'' + $lvl,
$exclIsNumber = ''exclIsNumber'' + $lvl,
$opExpr = ''op'' + $lvl,
$opStr = ''\\\\'' + '' + $opExpr + '' + \\\\'''';
out += '' var schemaExcl'' + ($lvl) + '' = '' + ($schemaValueExcl) + ''; '';
$schemaValueExcl = ''schemaExcl'' + $lvl;
out += '' var '' + ($exclusive) + ''; var '' + ($exclType) + '' = typeof '' + ($schemaValueExcl) + ''; if ('' + ($exclType) + '' != \\\\''boolean\\\\'' && '' + ($exclType) + '' != \\\\''undefined\\\\'' && '' + ($exclType) + '' != \\\\''number\\\\'') { '';
var $errorKeyword = $exclusiveKeyword;
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''_exclusiveLimit'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: {} '';
if (it.opts.messages !== false) {
out += '' , message: \\\\'''' + ($exclusiveKeyword) + '' should be boolean\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } else if ( '';
if ($isData) {
out += '' ('' + ($schemaValue) + '' !== undefined && typeof '' + ($schemaValue) + '' != \\\\''number\\\\'') || '';
}
out += '' '' + ($exclType) + '' == \\\\''number\\\\'' ? ( ('' + ($exclusive) + '' = '' + ($schemaValue) + '' === undefined || '' + ($schemaValueExcl) + '' '' + ($op) + ''= '' + ($schemaValue) + '') ? '' + ($data) + '' '' + ($notOp) + ''= '' + ($schemaValueExcl) + '' : '' + ($data) + '' '' + ($notOp) + '' '' + ($schemaValue) + '' ) : ( ('' + ($exclusive) + '' = '' + ($schemaValueExcl) + '' === true) ? '' + ($data) + '' '' + ($notOp) + ''= '' + ($schemaValue) + '' : '' + ($data) + '' '' + ($notOp) + '' '' + ($schemaValue) + '' ) || '' + ($data) + '' !== '' + ($data) + '') { var op'' + ($lvl) + '' = '' + ($exclusive) + '' ? \\\\'''' + ($op) + ''\\\\'' : \\\\'''' + ($op) + ''=\\\\'';'';
} else {
var $exclIsNumber = typeof $schemaExcl == ''number'',
$opStr = $op;
if ($exclIsNumber && $isData) {
var $opExpr = ''\\\\'''' + $opStr + ''\\\\'''';
out += '' if ( '';
if ($isData) {
out += '' ('' + ($schemaValue) + '' !== undefined && typeof '' + ($schemaValue) + '' != \\\\''number\\\\'') || '';
}
out += '' ( '' + ($schemaValue) + '' === undefined || '' + ($schemaExcl) + '' '' + ($op) + ''= '' + ($schemaValue) + '' ? '' + ($data) + '' '' + ($notOp) + ''= '' + ($schemaExcl) + '' : '' + ($data) + '' '' + ($notOp) + '' '' + ($schemaValue) + '' ) || '' + ($data) + '' !== '' + ($data) + '') { '';
} else {
if ($exclIsNumber && $schema === undefined) {
$exclusive = true;
$errorKeyword = $exclusiveKeyword;
$errSchemaPath = it.errSchemaPath + ''/'' + $exclusiveKeyword;
$schemaValue = $schemaExcl;
$notOp += ''='';
} else {
if ($exclIsNumber) $schemaValue = Math[$isMax ? ''min'' : ''max'']($schemaExcl, $schema);
if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
$exclusive = true;
$errorKeyword = $exclusiveKeyword;
$errSchemaPath = it.errSchemaPath + ''/'' + $exclusiveKeyword;
$notOp += ''='';
} else {
$exclusive = false;
$opStr += ''='';
}
}
var $opExpr = ''\\\\'''' + $opStr + ''\\\\'''';
out += '' if ( '';
if ($isData) {
out += '' ('' + ($schemaValue) + '' !== undefined && typeof '' + ($schemaValue) + '' != \\\\''number\\\\'') || '';
}
out += '' '' + ($data) + '' '' + ($notOp) + '' '' + ($schemaValue) + '' || '' + ($data) + '' !== '' + ($data) + '') { '';
}
}
$errorKeyword = $errorKeyword || $keyword;
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''_limit'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { comparison: '' + ($opExpr) + '', limit: '' + ($schemaValue) + '', exclusive: '' + ($exclusive) + '' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should be '' + ($opStr) + '' '';
if ($isData) {
out += ''\\\\'' + '' + ($schemaValue);
} else {
out += '''' + ($schemaValue) + ''\\\\'''';
}
}
if (it.opts.verbose) {
out += '' , schema:  '';
if ($isData) {
out += ''validate.schema'' + ($schemaPath);
} else {
out += '''' + ($schema);
}
out += ''         , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } '';
if ($breakOnError) {
out += '' else { '';
}
return out;
}
},{}],22:[function(require,module,exports){
''use strict'';
module.exports = function generate__limitItems(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $errorKeyword;
var $data = ''data'' + ($dataLvl || '''');
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
var $op = $keyword == ''maxItems'' ? ''>'' : ''<'';
out += ''if ( '';
if ($isData) {
out += '' ('' + ($schemaValue) + '' !== undefined && typeof '' + ($schemaValue) + '' != \\\\''number\\\\'') || '';
}
out += '' '' + ($data) + ''.length '' + ($op) + '' '' + ($schemaValue) + '') { '';
var $errorKeyword = $keyword;
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''_limitItems'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { limit: '' + ($schemaValue) + '' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT have '';
if ($keyword == ''maxItems'') {
out += ''more'';
} else {
out += ''less'';
}
out += '' than '';
if ($isData) {
out += ''\\\\'' + '' + ($schemaValue) + '' + \\\\'''';
} else {
out += '''' + ($schema);
}
out += '' items\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema:  '';
if ($isData) {
out += ''validate.schema'' + ($schemaPath);
} else {
out += '''' + ($schema);
}
out += ''         , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += ''} '';
if ($breakOnError) {
out += '' else { '';
}
return out;
}
},{}],23:[function(require,module,exports){
''use strict'';
module.exports = function generate__limitLength(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $errorKeyword;
var $data = ''data'' + ($dataLvl || '''');
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
var $op = $keyword == ''maxLength'' ? ''>'' : ''<'';
out += ''if ( '';
if ($isData) {
out += '' ('' + ($schemaValue) + '' !== undefined && typeof '' + ($schemaValue) + '' != \\\\''number\\\\'') || '';
}
if (it.opts.unicode === false) {
out += '' '' + ($data) + ''.length '';
} else {
out += '' ucs2length('' + ($data) + '') '';
}
out += '' '' + ($op) + '' '' + ($schemaValue) + '') { '';
var $errorKeyword = $keyword;
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''_limitLength'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { limit: '' + ($schemaValue) + '' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT be '';
if ($keyword == ''maxLength'') {
out += ''longer'';
} else {
out += ''shorter'';
}
out += '' than '';
if ($isData) {
out += ''\\\\'' + '' + ($schemaValue) + '' + \\\\'''';
} else {
out += '''' + ($schema);
}
out += '' characters\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema:  '';
if ($isData) {
out += ''validate.schema'' + ($schemaPath);
} else {
out += '''' + ($schema);
}
out += ''         , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += ''} '';
if ($breakOnError) {
out += '' else { '';
}
return out;
}
},{}],24:[function(require,module,exports){
''use strict'';
module.exports = function generate__limitProperties(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $errorKeyword;
var $data = ''data'' + ($dataLvl || '''');
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
var $op = $keyword == ''maxProperties'' ? ''>'' : ''<'';
out += ''if ( '';
if ($isData) {
out += '' ('' + ($schemaValue) + '' !== undefined && typeof '' + ($schemaValue) + '' != \\\\''number\\\\'') || '';
}
out += '' Object.keys('' + ($data) + '').length '' + ($op) + '' '' + ($schemaValue) + '') { '';
var $errorKeyword = $keyword;
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''_limitProperties'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { limit: '' + ($schemaValue) + '' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT have '';
if ($keyword == ''maxProperties'') {
out += ''more'';
} else {
out += ''less'';
}
out += '' than '';
if ($isData) {
out += ''\\\\'' + '' + ($schemaValue) + '' + \\\\'''';
} else {
out += '''' + ($schema);
}
out += '' properties\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema:  '';
if ($isData) {
out += ''validate.schema'' + ($schemaPath);
} else {
out += '''' + ($schema);
}
out += ''         , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += ''} '';
if ($breakOnError) {
out += '' else { '';
}
return out;
}
},{}],25:[function(require,module,exports){
''use strict'';
module.exports = function generate_allOf(it, $keyword, $ruleType) {
var out = '' '';
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $it = it.util.copy(it);
var $closingBraces = '''';
$it.level++;
var $nextValid = ''valid'' + $it.level;
var $currentBaseId = $it.baseId,
$allSchemasEmpty = true;
var arr1 = $schema;
if (arr1) {
var $sch, $i = -1,
l1 = arr1.length - 1;
while ($i < l1) {
$sch = arr1[$i += 1];
if (it.util.schemaHasRules($sch, it.RULES.all)) {
$allSchemasEmpty = false;
$it.schema = $sch;
$it.schemaPath = $schemaPath + ''['' + $i + '']'';
$it.errSchemaPath = $errSchemaPath + ''/'' + $i;
out += ''  '' + (it.validate($it)) + '' '';
$it.baseId = $currentBaseId;
if ($breakOnError) {
out += '' if ('' + ($nextValid) + '') { '';
$closingBraces += ''}'';
}
}
}
}
if ($breakOnError) {
if ($allSchemasEmpty) {
out += '' if (true) { '';
} else {
out += '' '' + ($closingBraces.slice(0, -1)) + '' '';
}
}
out = it.util.cleanUpCode(out);
return out;
}
},{}],26:[function(require,module,exports){
''use strict'';
module.exports = function generate_anyOf(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $errs = ''errs__'' + $lvl;
var $it = it.util.copy(it);
var $closingBraces = '''';
$it.level++;
var $nextValid = ''valid'' + $it.level;
var $noEmptySchema = $schema.every(function($sch) {
return it.util.schemaHasRules($sch, it.RULES.all);
});
if ($noEmptySchema) {
var $currentBaseId = $it.baseId;
out += '' var '' + ($errs) + '' = errors; var '' + ($valid) + '' = false;  '';
var $wasComposite = it.compositeRule;
it.compositeRule = $it.compositeRule = true;
var arr1 = $schema;
if (arr1) {
var $sch, $i = -1,
l1 = arr1.length - 1;
while ($i < l1) {
$sch = arr1[$i += 1];
$it.schema = $sch;
$it.schemaPath = $schemaPath + ''['' + $i + '']'';
$it.errSchemaPath = $errSchemaPath + ''/'' + $i;
out += ''  '' + (it.validate($it)) + '' '';
$it.baseId = $currentBaseId;
out += '' '' + ($valid) + '' = '' + ($valid) + '' || '' + ($nextValid) + ''; if (!'' + ($valid) + '') { '';
$closingBraces += ''}'';
}
}
it.compositeRule = $it.compositeRule = $wasComposite;
out += '' '' + ($closingBraces) + '' if (!'' + ($valid) + '') {   var err =   ''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''anyOf'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: {} '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should match some schema in anyOf\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
out += '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(vErrors); '';
} else {
out += '' validate.errors = vErrors; return false; '';
}
}
out += '' } else {  errors = '' + ($errs) + ''; if (vErrors !== null) { if ('' + ($errs) + '') vErrors.length = '' + ($errs) + ''; else vErrors = null; } '';
if (it.opts.allErrors) {
out += '' } '';
}
out = it.util.cleanUpCode(out);
} else {
if ($breakOnError) {
out += '' if (true) { '';
}
}
return out;
}
},{}],27:[function(require,module,exports){
''use strict'';
module.exports = function generate_const(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
if (!$isData) {
out += '' var schema'' + ($lvl) + '' = validate.schema'' + ($schemaPath) + '';'';
}
out += ''var '' + ($valid) + '' = equal('' + ($data) + '', schema'' + ($lvl) + ''); if (!'' + ($valid) + '') {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''const'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: {} '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should be equal to constant\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' }'';
if ($breakOnError) {
out += '' else { '';
}
return out;
}
},{}],28:[function(require,module,exports){
''use strict'';
module.exports = function generate_contains(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $errs = ''errs__'' + $lvl;
var $it = it.util.copy(it);
var $closingBraces = '''';
$it.level++;
var $nextValid = ''valid'' + $it.level;
var $idx = ''i'' + $lvl,
$dataNxt = $it.dataLevel = it.dataLevel + 1,
$nextData = ''data'' + $dataNxt,
$currentBaseId = it.baseId,
$nonEmptySchema = it.util.schemaHasRules($schema, it.RULES.all);
out += ''var '' + ($errs) + '' = errors;var '' + ($valid) + '';'';
if ($nonEmptySchema) {
var $wasComposite = it.compositeRule;
it.compositeRule = $it.compositeRule = true;
$it.schema = $schema;
$it.schemaPath = $schemaPath;
$it.errSchemaPath = $errSchemaPath;
out += '' var '' + ($nextValid) + '' = false; for (var '' + ($idx) + '' = 0; '' + ($idx) + '' < '' + ($data) + ''.length; '' + ($idx) + ''++) { '';
$it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
var $passData = $data + ''['' + $idx + '']'';
$it.dataPathArr[$dataNxt] = $idx;
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
out += '' '' + (it.util.varReplace($code, $nextData, $passData)) + '' '';
} else {
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '' + ($code) + '' '';
}
out += '' if ('' + ($nextValid) + '') break; }  '';
it.compositeRule = $it.compositeRule = $wasComposite;
out += '' '' + ($closingBraces) + '' if (!'' + ($nextValid) + '') {'';
} else {
out += '' if ('' + ($data) + ''.length == 0) {'';
}
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''contains'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: {} '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should contain a valid item\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } else { '';
if ($nonEmptySchema) {
out += ''  errors = '' + ($errs) + ''; if (vErrors !== null) { if ('' + ($errs) + '') vErrors.length = '' + ($errs) + ''; else vErrors = null; } '';
}
if (it.opts.allErrors) {
out += '' } '';
}
out = it.util.cleanUpCode(out);
return out;
}
},{}],29:[function(require,module,exports){
''use strict'';
module.exports = function generate_custom(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $errorKeyword;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $errs = ''errs__'' + $lvl;
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
var $rule = this,
$definition = ''definition'' + $lvl,
$rDef = $rule.definition,
$closingBraces = '''';
var $compile, $inline, $macro, $ruleValidate, $validateCode;
if ($isData && $rDef.$data) {
$validateCode = ''keywordValidate'' + $lvl;
var $validateSchema = $rDef.validateSchema;
out += '' var '' + ($definition) + '' = RULES.custom[\\\\'''' + ($keyword) + ''\\\\''].definition; var '' + ($validateCode) + '' = '' + ($definition) + ''.validate;'';
} else {
$ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
if (!$ruleValidate) return;
$schemaValue = ''validate.schema'' + $schemaPath;
$validateCode = $ruleValidate.code;
$compile = $rDef.compile;
$inline = $rDef.inline;
$macro = $rDef.macro;
}
var $ruleErrs = $validateCode + ''.errors'',
$i = ''i'' + $lvl,
$ruleErr = ''ruleErr'' + $lvl,
$asyncKeyword = $rDef.async;
if ($asyncKeyword && !it.async) throw new Error(''async keyword in sync schema'');
if (!($inline || $macro)) {
out += '''' + ($ruleErrs) + '' = null;'';
}
out += ''var '' + ($errs) + '' = errors;var '' + ($valid) + '';'';
if ($isData && $rDef.$data) {
$closingBraces += ''}'';
out += '' if ('' + ($schemaValue) + '' === undefined) { '' + ($valid) + '' = true; } else { '';
if ($validateSchema) {
$closingBraces += ''}'';
out += '' '' + ($valid) + '' = '' + ($definition) + ''.validateSchema('' + ($schemaValue) + ''); if ('' + ($valid) + '') { '';
}
}
if ($inline) {
if ($rDef.statements) {
out += '' '' + ($ruleValidate.validate) + '' '';
} else {
out += '' '' + ($valid) + '' = '' + ($ruleValidate.validate) + ''; '';
}
} else if ($macro) {
var $it = it.util.copy(it);
var $closingBraces = '''';
$it.level++;
var $nextValid = ''valid'' + $it.level;
$it.schema = $ruleValidate.validate;
$it.schemaPath = '''';
var $wasComposite = it.compositeRule;
it.compositeRule = $it.compositeRule = true;
var $code = it.validate($it).replace(/validate\\\\.schema/g, $validateCode);
it.compositeRule = $it.compositeRule = $wasComposite;
out += '' '' + ($code);
} else {
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = '''';
out += ''  '' + ($validateCode) + ''.call( '';
if (it.opts.passContext) {
out += ''this'';
} else {
out += ''self'';
}
if ($compile || $rDef.schema === false) {
out += '' , '' + ($data) + '' '';
} else {
out += '' , '' + ($schemaValue) + '' , '' + ($data) + '' , validate.schema'' + (it.schemaPath) + '' '';
}
out += '' , (dataPath || \\\\''\\\\'')'';
if (it.errorPath != ''\\"\\"'') {
out += '' + '' + (it.errorPath);
}
var $parentData = $dataLvl ? ''data'' + (($dataLvl - 1) || '''') : ''parentData'',
$parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : ''parentDataProperty'';
out += '' , '' + ($parentData) + '' , '' + ($parentDataProperty) + '' , rootData )  '';
var def_callRuleValidate = out;
out = $$outStack.pop();
if ($rDef.errors === false) {
out += '' '' + ($valid) + '' = '';
if ($asyncKeyword) {
out += '''' + (it.yieldAwait);
}
out += '''' + (def_callRuleValidate) + ''; '';
} else {
if ($asyncKeyword) {
$ruleErrs = ''customErrors'' + $lvl;
out += '' var '' + ($ruleErrs) + '' = null; try { '' + ($valid) + '' = '' + (it.yieldAwait) + (def_callRuleValidate) + ''; } catch (e) { '' + ($valid) + '' = false; if (e instanceof ValidationError) '' + ($ruleErrs) + '' = e.errors; else throw e; } '';
} else {
out += '' '' + ($ruleErrs) + '' = null; '' + ($valid) + '' = '' + (def_callRuleValidate) + ''; '';
}
}
}
if ($rDef.modifying) {
out += '' if ('' + ($parentData) + '') '' + ($data) + '' = '' + ($parentData) + ''['' + ($parentDataProperty) + ''];'';
}
out += '''' + ($closingBraces);
if ($rDef.valid) {
if ($breakOnError) {
out += '' if (true) { '';
}
} else {
out += '' if ( '';
if ($rDef.valid === undefined) {
out += '' !'';
if ($macro) {
out += '''' + ($nextValid);
} else {
out += '''' + ($valid);
}
} else {
out += '' '' + (!$rDef.valid) + '' '';
}
out += '') { '';
$errorKeyword = $rule.keyword;
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = '''';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''custom'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { keyword: \\\\'''' + ($rule.keyword) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should pass \\"'' + ($rule.keyword) + ''\\" keyword validation\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
var def_customError = out;
out = $$outStack.pop();
if ($inline) {
if ($rDef.errors) {
if ($rDef.errors != ''full'') {
out += ''  for (var '' + ($i) + ''='' + ($errs) + ''; '' + ($i) + ''<errors; '' + ($i) + ''++) { var '' + ($ruleErr) + '' = vErrors['' + ($i) + '']; if ('' + ($ruleErr) + ''.dataPath === undefined) '' + ($ruleErr) + ''.dataPath = (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + ''; if ('' + ($ruleErr) + ''.schemaPath === undefined) { '' + ($ruleErr) + ''.schemaPath = \\"'' + ($errSchemaPath) + ''\\"; } '';
if (it.opts.verbose) {
out += '' '' + ($ruleErr) + ''.schema = '' + ($schemaValue) + ''; '' + ($ruleErr) + ''.data = '' + ($data) + ''; '';
}
out += '' } '';
}
} else {
if ($rDef.errors === false) {
out += '' '' + (def_customError) + '' '';
} else {
out += '' if ('' + ($errs) + '' == errors) { '' + (def_customError) + '' } else {  for (var '' + ($i) + ''='' + ($errs) + ''; '' + ($i) + ''<errors; '' + ($i) + ''++) { var '' + ($ruleErr) + '' = vErrors['' + ($i) + '']; if ('' + ($ruleErr) + ''.dataPath === undefined) '' + ($ruleErr) + ''.dataPath = (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + ''; if ('' + ($ruleErr) + ''.schemaPath === undefined) { '' + ($ruleErr) + ''.schemaPath = \\"'' + ($errSchemaPath) + ''\\"; } '';
if (it.opts.verbose) {
out += '' '' + ($ruleErr) + ''.schema = '' + ($schemaValue) + ''; '' + ($ruleErr) + ''.data = '' + ($data) + ''; '';
}
out += '' } } '';
}
}
} else if ($macro) {
out += ''   var err =   ''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''custom'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { keyword: \\\\'''' + ($rule.keyword) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should pass \\"'' + ($rule.keyword) + ''\\" keyword validation\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
out += '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(vErrors); '';
} else {
out += '' validate.errors = vErrors; return false; '';
}
}
} else {
if ($rDef.errors === false) {
out += '' '' + (def_customError) + '' '';
} else {
out += '' if (Array.isArray('' + ($ruleErrs) + '')) { if (vErrors === null) vErrors = '' + ($ruleErrs) + ''; else vErrors = vErrors.concat('' + ($ruleErrs) + ''); errors = vErrors.length;  for (var '' + ($i) + ''='' + ($errs) + ''; '' + ($i) + ''<errors; '' + ($i) + ''++) { var '' + ($ruleErr) + '' = vErrors['' + ($i) + '']; if ('' + ($ruleErr) + ''.dataPath === undefined) '' + ($ruleErr) + ''.dataPath = (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '';  '' + ($ruleErr) + ''.schemaPath = \\"'' + ($errSchemaPath) + ''\\";  '';
if (it.opts.verbose) {
out += '' '' + ($ruleErr) + ''.schema = '' + ($schemaValue) + ''; '' + ($ruleErr) + ''.data = '' + ($data) + ''; '';
}
out += '' } } else { '' + (def_customError) + '' } '';
}
}
out += '' } '';
if ($breakOnError) {
out += '' else { '';
}
}
return out;
}
},{}],30:[function(require,module,exports){
''use strict'';
module.exports = function generate_dependencies(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $errs = ''errs__'' + $lvl;
var $it = it.util.copy(it);
var $closingBraces = '''';
$it.level++;
var $nextValid = ''valid'' + $it.level;
var $schemaDeps = {},
$propertyDeps = {},
$ownProperties = it.opts.ownProperties;
for ($property in $schema) {
var $sch = $schema[$property];
var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
$deps[$property] = $sch;
}
out += ''var '' + ($errs) + '' = errors;'';
var $currentErrorPath = it.errorPath;
out += ''var missing'' + ($lvl) + '';'';
for (var $property in $propertyDeps) {
$deps = $propertyDeps[$property];
if ($deps.length) {
out += '' if ( '' + ($data) + (it.util.getProperty($property)) + '' !== undefined '';
if ($ownProperties) {
out += '' && Object.prototype.hasOwnProperty.call('' + ($data) + '', \\\\'''' + (it.util.escapeQuotes($property)) + ''\\\\'') '';
}
if ($breakOnError) {
out += '' && ( '';
var arr1 = $deps;
if (arr1) {
var $propertyKey, $i = -1,
l1 = arr1.length - 1;
while ($i < l1) {
$propertyKey = arr1[$i += 1];
if ($i) {
out += '' || '';
}
var $prop = it.util.getProperty($propertyKey),
$useData = $data + $prop;
out += '' ( ( '' + ($useData) + '' === undefined '';
if ($ownProperties) {
out += '' || ! Object.prototype.hasOwnProperty.call('' + ($data) + '', \\\\'''' + (it.util.escapeQuotes($propertyKey)) + ''\\\\'') '';
}
out += '') && (missing'' + ($lvl) + '' = '' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + '') ) '';
}
}
out += '')) {  '';
var $propertyPath = ''missing'' + $lvl,
$missingProperty = ''\\\\'' + '' + $propertyPath + '' + \\\\'''';
if (it.opts._errorDataPathProperty) {
it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + '' + '' + $propertyPath;
}
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''dependencies'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { property: \\\\'''' + (it.util.escapeQuotes($property)) + ''\\\\'', missingProperty: \\\\'''' + ($missingProperty) + ''\\\\'', depsCount: '' + ($deps.length) + '', deps: \\\\'''' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\\", \\"))) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should have '';
if ($deps.length == 1) {
out += ''property '' + (it.util.escapeQuotes($deps[0]));
} else {
out += ''properties '' + (it.util.escapeQuotes($deps.join(\\", \\")));
}
out += '' when property '' + (it.util.escapeQuotes($property)) + '' is present\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
} else {
out += '' ) { '';
var arr2 = $deps;
if (arr2) {
var $propertyKey, i2 = -1,
l2 = arr2.length - 1;
while (i2 < l2) {
$propertyKey = arr2[i2 += 1];
var $prop = it.util.getProperty($propertyKey),
$missingProperty = it.util.escapeQuotes($propertyKey),
$useData = $data + $prop;
if (it.opts._errorDataPathProperty) {
it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
}
out += '' if ( '' + ($useData) + '' === undefined '';
if ($ownProperties) {
out += '' || ! Object.prototype.hasOwnProperty.call('' + ($data) + '', \\\\'''' + (it.util.escapeQuotes($propertyKey)) + ''\\\\'') '';
}
out += '') {  var err =   ''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''dependencies'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { property: \\\\'''' + (it.util.escapeQuotes($property)) + ''\\\\'', missingProperty: \\\\'''' + ($missingProperty) + ''\\\\'', depsCount: '' + ($deps.length) + '', deps: \\\\'''' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\\", \\"))) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should have '';
if ($deps.length == 1) {
out += ''property '' + (it.util.escapeQuotes($deps[0]));
} else {
out += ''properties '' + (it.util.escapeQuotes($deps.join(\\", \\")));
}
out += '' when property '' + (it.util.escapeQuotes($property)) + '' is present\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
out += '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } '';
}
}
}
out += '' }   '';
if ($breakOnError) {
$closingBraces += ''}'';
out += '' else { '';
}
}
}
it.errorPath = $currentErrorPath;
var $currentBaseId = $it.baseId;
for (var $property in $schemaDeps) {
var $sch = $schemaDeps[$property];
if (it.util.schemaHasRules($sch, it.RULES.all)) {
out += '' '' + ($nextValid) + '' = true; if ( '' + ($data) + (it.util.getProperty($property)) + '' !== undefined '';
if ($ownProperties) {
out += '' && Object.prototype.hasOwnProperty.call('' + ($data) + '', \\\\'''' + (it.util.escapeQuotes($property)) + ''\\\\'') '';
}
out += '') { '';
$it.schema = $sch;
$it.schemaPath = $schemaPath + it.util.getProperty($property);
$it.errSchemaPath = $errSchemaPath + ''/'' + it.util.escapeFragment($property);
out += ''  '' + (it.validate($it)) + '' '';
$it.baseId = $currentBaseId;
out += '' }  '';
if ($breakOnError) {
out += '' if ('' + ($nextValid) + '') { '';
$closingBraces += ''}'';
}
}
}
if ($breakOnError) {
out += ''   '' + ($closingBraces) + '' if ('' + ($errs) + '' == errors) {'';
}
out = it.util.cleanUpCode(out);
return out;
}
},{}],31:[function(require,module,exports){
''use strict'';
module.exports = function generate_enum(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
var $i = ''i'' + $lvl,
$vSchema = ''schema'' + $lvl;
if (!$isData) {
out += '' var '' + ($vSchema) + '' = validate.schema'' + ($schemaPath) + '';'';
}
out += ''var '' + ($valid) + '';'';
if ($isData) {
out += '' if (schema'' + ($lvl) + '' === undefined) '' + ($valid) + '' = true; else if (!Array.isArray(schema'' + ($lvl) + '')) '' + ($valid) + '' = false; else {'';
}
out += '''' + ($valid) + '' = false;for (var '' + ($i) + ''=0; '' + ($i) + ''<'' + ($vSchema) + ''.length; '' + ($i) + ''++) if (equal('' + ($data) + '', '' + ($vSchema) + ''['' + ($i) + ''])) { '' + ($valid) + '' = true; break; }'';
if ($isData) {
out += ''  }  '';
}
out += '' if (!'' + ($valid) + '') {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''enum'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { allowedValues: schema'' + ($lvl) + '' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should be equal to one of the allowed values\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' }'';
if ($breakOnError) {
out += '' else { '';
}
return out;
}
},{}],32:[function(require,module,exports){
''use strict'';
module.exports = function generate_format(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
if (it.opts.format === false) {
if ($breakOnError) {
out += '' if (true) { '';
}
return out;
}
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
var $unknownFormats = it.opts.unknownFormats,
$allowUnknown = Array.isArray($unknownFormats);
if ($isData) {
var $format = ''format'' + $lvl,
$isObject = ''isObject'' + $lvl,
$formatType = ''formatType'' + $lvl;
out += '' var '' + ($format) + '' = formats['' + ($schemaValue) + '']; var '' + ($isObject) + '' = typeof '' + ($format) + '' == \\\\''object\\\\'' && !('' + ($format) + '' instanceof RegExp) && '' + ($format) + ''.validate; var '' + ($formatType) + '' = '' + ($isObject) + '' && '' + ($format) + ''.type || \\\\''string\\\\''; if ('' + ($isObject) + '') { '';
if (it.async) {
out += '' var async'' + ($lvl) + '' = '' + ($format) + ''.async; '';
}
out += '' '' + ($format) + '' = '' + ($format) + ''.validate; } if (  '';
if ($isData) {
out += '' ('' + ($schemaValue) + '' !== undefined && typeof '' + ($schemaValue) + '' != \\\\''string\\\\'') || '';
}
out += '' ('';
if ($unknownFormats != ''ignore'') {
out += '' ('' + ($schemaValue) + '' && !'' + ($format) + '' '';
if ($allowUnknown) {
out += '' && self._opts.unknownFormats.indexOf('' + ($schemaValue) + '') == -1 '';
}
out += '') || '';
}
out += '' ('' + ($format) + '' && '' + ($formatType) + '' == \\\\'''' + ($ruleType) + ''\\\\'' && !(typeof '' + ($format) + '' == \\\\''function\\\\'' ? '';
if (it.async) {
out += '' (async'' + ($lvl) + '' ? '' + (it.yieldAwait) + '' '' + ($format) + ''('' + ($data) + '') : '' + ($format) + ''('' + ($data) + '')) '';
} else {
out += '' '' + ($format) + ''('' + ($data) + '') '';
}
out += '' : '' + ($format) + ''.test('' + ($data) + ''))))) {'';
} else {
var $format = it.formats[$schema];
if (!$format) {
if ($unknownFormats == ''ignore'') {
console.warn(''unknown format \\"'' + $schema + ''\\" ignored in schema at path \\"'' + it.errSchemaPath + ''\\"'');
if ($breakOnError) {
out += '' if (true) { '';
}
return out;
} else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
if ($breakOnError) {
out += '' if (true) { '';
}
return out;
} else {
throw new Error(''unknown format \\"'' + $schema + ''\\" is used in schema at path \\"'' + it.errSchemaPath + ''\\"'');
}
}
var $isObject = typeof $format == ''object'' && !($format instanceof RegExp) && $format.validate;
var $formatType = $isObject && $format.type || ''string'';
if ($isObject) {
var $async = $format.async === true;
$format = $format.validate;
}
if ($formatType != $ruleType) {
if ($breakOnError) {
out += '' if (true) { '';
}
return out;
}
if ($async) {
if (!it.async) throw new Error(''async format in sync schema'');
var $formatRef = ''formats'' + it.util.getProperty($schema) + ''.validate'';
out += '' if (!('' + (it.yieldAwait) + '' '' + ($formatRef) + ''('' + ($data) + ''))) { '';
} else {
out += '' if (! '';
var $formatRef = ''formats'' + it.util.getProperty($schema);
if ($isObject) $formatRef += ''.validate'';
if (typeof $format == ''function'') {
out += '' '' + ($formatRef) + ''('' + ($data) + '') '';
} else {
out += '' '' + ($formatRef) + ''.test('' + ($data) + '') '';
}
out += '') { '';
}
}
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''format'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { format:  '';
if ($isData) {
out += '''' + ($schemaValue);
} else {
out += '''' + (it.util.toQuotedString($schema));
}
out += ''  } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should match format \\"'';
if ($isData) {
out += ''\\\\'' + '' + ($schemaValue) + '' + \\\\'''';
} else {
out += '''' + (it.util.escapeQuotes($schema));
}
out += ''\\"\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema:  '';
if ($isData) {
out += ''validate.schema'' + ($schemaPath);
} else {
out += '''' + (it.util.toQuotedString($schema));
}
out += ''         , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } '';
if ($breakOnError) {
out += '' else { '';
}
return out;
}
},{}],33:[function(require,module,exports){
''use strict'';
module.exports = function generate_items(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $errs = ''errs__'' + $lvl;
var $it = it.util.copy(it);
var $closingBraces = '''';
$it.level++;
var $nextValid = ''valid'' + $it.level;
var $idx = ''i'' + $lvl,
$dataNxt = $it.dataLevel = it.dataLevel + 1,
$nextData = ''data'' + $dataNxt,
$currentBaseId = it.baseId;
out += ''var '' + ($errs) + '' = errors;var '' + ($valid) + '';'';
if (Array.isArray($schema)) {
var $additionalItems = it.schema.additionalItems;
if ($additionalItems === false) {
out += '' '' + ($valid) + '' = '' + ($data) + ''.length <= '' + ($schema.length) + ''; '';
var $currErrSchemaPath = $errSchemaPath;
$errSchemaPath = it.errSchemaPath + ''/additionalItems'';
out += ''  if (!'' + ($valid) + '') {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''additionalItems'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { limit: '' + ($schema.length) + '' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT have more than '' + ($schema.length) + '' items\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: false , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } '';
$errSchemaPath = $currErrSchemaPath;
if ($breakOnError) {
$closingBraces += ''}'';
out += '' else { '';
}
}
var arr1 = $schema;
if (arr1) {
var $sch, $i = -1,
l1 = arr1.length - 1;
while ($i < l1) {
$sch = arr1[$i += 1];
if (it.util.schemaHasRules($sch, it.RULES.all)) {
out += '' '' + ($nextValid) + '' = true; if ('' + ($data) + ''.length > '' + ($i) + '') { '';
var $passData = $data + ''['' + $i + '']'';
$it.schema = $sch;
$it.schemaPath = $schemaPath + ''['' + $i + '']'';
$it.errSchemaPath = $errSchemaPath + ''/'' + $i;
$it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
$it.dataPathArr[$dataNxt] = $i;
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
out += '' '' + (it.util.varReplace($code, $nextData, $passData)) + '' '';
} else {
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '' + ($code) + '' '';
}
out += '' }  '';
if ($breakOnError) {
out += '' if ('' + ($nextValid) + '') { '';
$closingBraces += ''}'';
}
}
}
}
if (typeof $additionalItems == ''object'' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {
$it.schema = $additionalItems;
$it.schemaPath = it.schemaPath + ''.additionalItems'';
$it.errSchemaPath = it.errSchemaPath + ''/additionalItems'';
out += '' '' + ($nextValid) + '' = true; if ('' + ($data) + ''.length > '' + ($schema.length) + '') {  for (var '' + ($idx) + '' = '' + ($schema.length) + ''; '' + ($idx) + '' < '' + ($data) + ''.length; '' + ($idx) + ''++) { '';
$it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
var $passData = $data + ''['' + $idx + '']'';
$it.dataPathArr[$dataNxt] = $idx;
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
out += '' '' + (it.util.varReplace($code, $nextData, $passData)) + '' '';
} else {
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '' + ($code) + '' '';
}
if ($breakOnError) {
out += '' if (!'' + ($nextValid) + '') break; '';
}
out += '' } }  '';
if ($breakOnError) {
out += '' if ('' + ($nextValid) + '') { '';
$closingBraces += ''}'';
}
}
} else if (it.util.schemaHasRules($schema, it.RULES.all)) {
$it.schema = $schema;
$it.schemaPath = $schemaPath;
$it.errSchemaPath = $errSchemaPath;
out += ''  for (var '' + ($idx) + '' = '' + (0) + ''; '' + ($idx) + '' < '' + ($data) + ''.length; '' + ($idx) + ''++) { '';
$it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
var $passData = $data + ''['' + $idx + '']'';
$it.dataPathArr[$dataNxt] = $idx;
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
out += '' '' + (it.util.varReplace($code, $nextData, $passData)) + '' '';
} else {
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '' + ($code) + '' '';
}
if ($breakOnError) {
out += '' if (!'' + ($nextValid) + '') break; '';
}
out += '' }'';
}
if ($breakOnError) {
out += '' '' + ($closingBraces) + '' if ('' + ($errs) + '' == errors) {'';
}
out = it.util.cleanUpCode(out);
return out;
}
},{}],34:[function(require,module,exports){
''use strict'';
module.exports = function generate_multipleOf(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
out += ''var division'' + ($lvl) + '';if ('';
if ($isData) {
out += '' '' + ($schemaValue) + '' !== undefined && ( typeof '' + ($schemaValue) + '' != \\\\''number\\\\'' || '';
}
out += '' (division'' + ($lvl) + '' = '' + ($data) + '' / '' + ($schemaValue) + '', '';
if (it.opts.multipleOfPrecision) {
out += '' Math.abs(Math.round(division'' + ($lvl) + '') - division'' + ($lvl) + '') > 1e-'' + (it.opts.multipleOfPrecision) + '' '';
} else {
out += '' division'' + ($lvl) + '' !== parseInt(division'' + ($lvl) + '') '';
}
out += '' ) '';
if ($isData) {
out += ''  )  '';
}
out += '' ) {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''multipleOf'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { multipleOf: '' + ($schemaValue) + '' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should be multiple of '';
if ($isData) {
out += ''\\\\'' + '' + ($schemaValue);
} else {
out += '''' + ($schemaValue) + ''\\\\'''';
}
}
if (it.opts.verbose) {
out += '' , schema:  '';
if ($isData) {
out += ''validate.schema'' + ($schemaPath);
} else {
out += '''' + ($schema);
}
out += ''         , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += ''} '';
if ($breakOnError) {
out += '' else { '';
}
return out;
}
},{}],35:[function(require,module,exports){
''use strict'';
module.exports = function generate_not(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $errs = ''errs__'' + $lvl;
var $it = it.util.copy(it);
$it.level++;
var $nextValid = ''valid'' + $it.level;
if (it.util.schemaHasRules($schema, it.RULES.all)) {
$it.schema = $schema;
$it.schemaPath = $schemaPath;
$it.errSchemaPath = $errSchemaPath;
out += '' var '' + ($errs) + '' = errors;  '';
var $wasComposite = it.compositeRule;
it.compositeRule = $it.compositeRule = true;
$it.createErrors = false;
var $allErrorsOption;
if ($it.opts.allErrors) {
$allErrorsOption = $it.opts.allErrors;
$it.opts.allErrors = false;
}
out += '' '' + (it.validate($it)) + '' '';
$it.createErrors = true;
if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
it.compositeRule = $it.compositeRule = $wasComposite;
out += '' if ('' + ($nextValid) + '') {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''not'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: {} '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT be valid\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } else {  errors = '' + ($errs) + ''; if (vErrors !== null) { if ('' + ($errs) + '') vErrors.length = '' + ($errs) + ''; else vErrors = null; } '';
if (it.opts.allErrors) {
out += '' } '';
}
} else {
out += ''  var err =   ''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''not'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: {} '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT be valid\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
out += '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
if ($breakOnError) {
out += '' if (false) { '';
}
}
return out;
}
},{}],36:[function(require,module,exports){
''use strict'';
module.exports = function generate_oneOf(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $errs = ''errs__'' + $lvl;
var $it = it.util.copy(it);
var $closingBraces = '''';
$it.level++;
var $nextValid = ''valid'' + $it.level;
out += ''var '' + ($errs) + '' = errors;var prevValid'' + ($lvl) + '' = false;var '' + ($valid) + '' = false;'';
var $currentBaseId = $it.baseId;
var $wasComposite = it.compositeRule;
it.compositeRule = $it.compositeRule = true;
var arr1 = $schema;
if (arr1) {
var $sch, $i = -1,
l1 = arr1.length - 1;
while ($i < l1) {
$sch = arr1[$i += 1];
if (it.util.schemaHasRules($sch, it.RULES.all)) {
$it.schema = $sch;
$it.schemaPath = $schemaPath + ''['' + $i + '']'';
$it.errSchemaPath = $errSchemaPath + ''/'' + $i;
out += ''  '' + (it.validate($it)) + '' '';
$it.baseId = $currentBaseId;
} else {
out += '' var '' + ($nextValid) + '' = true; '';
}
if ($i) {
out += '' if ('' + ($nextValid) + '' && prevValid'' + ($lvl) + '') '' + ($valid) + '' = false; else { '';
$closingBraces += ''}'';
}
out += '' if ('' + ($nextValid) + '') '' + ($valid) + '' = prevValid'' + ($lvl) + '' = true;'';
}
}
it.compositeRule = $it.compositeRule = $wasComposite;
out += '''' + ($closingBraces) + ''if (!'' + ($valid) + '') {   var err =   ''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''oneOf'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: {} '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should match exactly one schema in oneOf\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
out += '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(vErrors); '';
} else {
out += '' validate.errors = vErrors; return false; '';
}
}
out += ''} else {  errors = '' + ($errs) + ''; if (vErrors !== null) { if ('' + ($errs) + '') vErrors.length = '' + ($errs) + ''; else vErrors = null; }'';
if (it.opts.allErrors) {
out += '' } '';
}
return out;
}
},{}],37:[function(require,module,exports){
''use strict'';
module.exports = function generate_pattern(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
var $regexp = $isData ? ''(new RegExp('' + $schemaValue + ''))'' : it.usePattern($schema);
out += ''if ( '';
if ($isData) {
out += '' ('' + ($schemaValue) + '' !== undefined && typeof '' + ($schemaValue) + '' != \\\\''string\\\\'') || '';
}
out += '' !'' + ($regexp) + ''.test('' + ($data) + '') ) {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''pattern'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { pattern:  '';
if ($isData) {
out += '''' + ($schemaValue);
} else {
out += '''' + (it.util.toQuotedString($schema));
}
out += ''  } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should match pattern \\"'';
if ($isData) {
out += ''\\\\'' + '' + ($schemaValue) + '' + \\\\'''';
} else {
out += '''' + (it.util.escapeQuotes($schema));
}
out += ''\\"\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema:  '';
if ($isData) {
out += ''validate.schema'' + ($schemaPath);
} else {
out += '''' + (it.util.toQuotedString($schema));
}
out += ''         , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += ''} '';
if ($breakOnError) {
out += '' else { '';
}
return out;
}
},{}],38:[function(require,module,exports){
''use strict'';
module.exports = function generate_properties(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $errs = ''errs__'' + $lvl;
var $it = it.util.copy(it);
var $closingBraces = '''';
$it.level++;
var $nextValid = ''valid'' + $it.level;
var $key = ''key'' + $lvl,
$idx = ''idx'' + $lvl,
$dataNxt = $it.dataLevel = it.dataLevel + 1,
$nextData = ''data'' + $dataNxt,
$dataProperties = ''dataProperties'' + $lvl;
var $schemaKeys = Object.keys($schema || {}),
$pProperties = it.schema.patternProperties || {},
$pPropertyKeys = Object.keys($pProperties),
$aProperties = it.schema.additionalProperties,
$someProperties = $schemaKeys.length || $pPropertyKeys.length,
$noAdditional = $aProperties === false,
$additionalIsSchema = typeof $aProperties == ''object'' && Object.keys($aProperties).length,
$removeAdditional = it.opts.removeAdditional,
$checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
$ownProperties = it.opts.ownProperties,
$currentBaseId = it.baseId;
var $required = it.schema.required;
if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);
if (it.opts.patternGroups) {
var $pgProperties = it.schema.patternGroups || {},
$pgPropertyKeys = Object.keys($pgProperties);
}
out += ''var '' + ($errs) + '' = errors;var '' + ($nextValid) + '' = true;'';
if ($ownProperties) {
out += '' var '' + ($dataProperties) + '' = undefined;'';
}
if ($checkAdditional) {
if ($ownProperties) {
out += '' '' + ($dataProperties) + '' = '' + ($dataProperties) + '' || Object.keys('' + ($data) + ''); for (var '' + ($idx) + ''=0; '' + ($idx) + ''<'' + ($dataProperties) + ''.length; '' + ($idx) + ''++) { var '' + ($key) + '' = '' + ($dataProperties) + ''['' + ($idx) + '']; '';
} else {
out += '' for (var '' + ($key) + '' in '' + ($data) + '') { '';
}
if ($someProperties) {
out += '' var isAdditional'' + ($lvl) + '' = !(false '';
if ($schemaKeys.length) {
if ($schemaKeys.length > 5) {
out += '' || validate.schema'' + ($schemaPath) + ''['' + ($key) + ''] '';
} else {
var arr1 = $schemaKeys;
if (arr1) {
var $propertyKey, i1 = -1,
l1 = arr1.length - 1;
while (i1 < l1) {
$propertyKey = arr1[i1 += 1];
out += '' || '' + ($key) + '' == '' + (it.util.toQuotedString($propertyKey)) + '' '';
}
}
}
}
if ($pPropertyKeys.length) {
var arr2 = $pPropertyKeys;
if (arr2) {
var $pProperty, $i = -1,
l2 = arr2.length - 1;
while ($i < l2) {
$pProperty = arr2[$i += 1];
out += '' || '' + (it.usePattern($pProperty)) + ''.test('' + ($key) + '') '';
}
}
}
if (it.opts.patternGroups && $pgPropertyKeys.length) {
var arr3 = $pgPropertyKeys;
if (arr3) {
var $pgProperty, $i = -1,
l3 = arr3.length - 1;
while ($i < l3) {
$pgProperty = arr3[$i += 1];
out += '' || '' + (it.usePattern($pgProperty)) + ''.test('' + ($key) + '') '';
}
}
}
out += '' ); if (isAdditional'' + ($lvl) + '') { '';
}
if ($removeAdditional == ''all'') {
out += '' delete '' + ($data) + ''['' + ($key) + '']; '';
} else {
var $currentErrorPath = it.errorPath;
var $additionalProperty = ''\\\\'' + '' + $key + '' + \\\\'''';
if (it.opts._errorDataPathProperty) {
it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
}
if ($noAdditional) {
if ($removeAdditional) {
out += '' delete '' + ($data) + ''['' + ($key) + '']; '';
} else {
out += '' '' + ($nextValid) + '' = false; '';
var $currErrSchemaPath = $errSchemaPath;
$errSchemaPath = it.errSchemaPath + ''/additionalProperties'';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''additionalProperties'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { additionalProperty: \\\\'''' + ($additionalProperty) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT have additional properties\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: false , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
$errSchemaPath = $currErrSchemaPath;
if ($breakOnError) {
out += '' break; '';
}
}
} else if ($additionalIsSchema) {
if ($removeAdditional == ''failing'') {
out += '' var '' + ($errs) + '' = errors;  '';
var $wasComposite = it.compositeRule;
it.compositeRule = $it.compositeRule = true;
$it.schema = $aProperties;
$it.schemaPath = it.schemaPath + ''.additionalProperties'';
$it.errSchemaPath = it.errSchemaPath + ''/additionalProperties'';
$it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
var $passData = $data + ''['' + $key + '']'';
$it.dataPathArr[$dataNxt] = $key;
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
out += '' '' + (it.util.varReplace($code, $nextData, $passData)) + '' '';
} else {
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '' + ($code) + '' '';
}
out += '' if (!'' + ($nextValid) + '') { errors = '' + ($errs) + ''; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete '' + ($data) + ''['' + ($key) + '']; }  '';
it.compositeRule = $it.compositeRule = $wasComposite;
} else {
$it.schema = $aProperties;
$it.schemaPath = it.schemaPath + ''.additionalProperties'';
$it.errSchemaPath = it.errSchemaPath + ''/additionalProperties'';
$it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
var $passData = $data + ''['' + $key + '']'';
$it.dataPathArr[$dataNxt] = $key;
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
out += '' '' + (it.util.varReplace($code, $nextData, $passData)) + '' '';
} else {
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '' + ($code) + '' '';
}
if ($breakOnError) {
out += '' if (!'' + ($nextValid) + '') break; '';
}
}
}
it.errorPath = $currentErrorPath;
}
if ($someProperties) {
out += '' } '';
}
out += '' }  '';
if ($breakOnError) {
out += '' if ('' + ($nextValid) + '') { '';
$closingBraces += ''}'';
}
}
var $useDefaults = it.opts.useDefaults && !it.compositeRule;
if ($schemaKeys.length) {
var arr4 = $schemaKeys;
if (arr4) {
var $propertyKey, i4 = -1,
l4 = arr4.length - 1;
while (i4 < l4) {
$propertyKey = arr4[i4 += 1];
var $sch = $schema[$propertyKey];
if (it.util.schemaHasRules($sch, it.RULES.all)) {
var $prop = it.util.getProperty($propertyKey),
$passData = $data + $prop,
$hasDefault = $useDefaults && $sch.default !== undefined;
$it.schema = $sch;
$it.schemaPath = $schemaPath + $prop;
$it.errSchemaPath = $errSchemaPath + ''/'' + it.util.escapeFragment($propertyKey);
$it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
$it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
$code = it.util.varReplace($code, $nextData, $passData);
var $useData = $passData;
} else {
var $useData = $nextData;
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '';
}
if ($hasDefault) {
out += '' '' + ($code) + '' '';
} else {
if ($requiredHash && $requiredHash[$propertyKey]) {
out += '' if ( '' + ($useData) + '' === undefined '';
if ($ownProperties) {
out += '' || ! Object.prototype.hasOwnProperty.call('' + ($data) + '', \\\\'''' + (it.util.escapeQuotes($propertyKey)) + ''\\\\'') '';
}
out += '') { '' + ($nextValid) + '' = false; '';
var $currentErrorPath = it.errorPath,
$currErrSchemaPath = $errSchemaPath,
$missingProperty = it.util.escapeQuotes($propertyKey);
if (it.opts._errorDataPathProperty) {
it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
}
$errSchemaPath = it.errSchemaPath + ''/required'';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''required'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { missingProperty: \\\\'''' + ($missingProperty) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\'''';
if (it.opts._errorDataPathProperty) {
out += ''is a required property'';
} else {
out += ''should have required property \\\\\\\\\\\\'''' + ($missingProperty) + ''\\\\\\\\\\\\'''';
}
out += ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
$errSchemaPath = $currErrSchemaPath;
it.errorPath = $currentErrorPath;
out += '' } else { '';
} else {
if ($breakOnError) {
out += '' if ( '' + ($useData) + '' === undefined '';
if ($ownProperties) {
out += '' || ! Object.prototype.hasOwnProperty.call('' + ($data) + '', \\\\'''' + (it.util.escapeQuotes($propertyKey)) + ''\\\\'') '';
}
out += '') { '' + ($nextValid) + '' = true; } else { '';
} else {
out += '' if ('' + ($useData) + '' !== undefined '';
if ($ownProperties) {
out += '' &&   Object.prototype.hasOwnProperty.call('' + ($data) + '', \\\\'''' + (it.util.escapeQuotes($propertyKey)) + ''\\\\'') '';
}
out += '' ) { '';
}
}
out += '' '' + ($code) + '' } '';
}
}
if ($breakOnError) {
out += '' if ('' + ($nextValid) + '') { '';
$closingBraces += ''}'';
}
}
}
}
if ($pPropertyKeys.length) {
var arr5 = $pPropertyKeys;
if (arr5) {
var $pProperty, i5 = -1,
l5 = arr5.length - 1;
while (i5 < l5) {
$pProperty = arr5[i5 += 1];
var $sch = $pProperties[$pProperty];
if (it.util.schemaHasRules($sch, it.RULES.all)) {
$it.schema = $sch;
$it.schemaPath = it.schemaPath + ''.patternProperties'' + it.util.getProperty($pProperty);
$it.errSchemaPath = it.errSchemaPath + ''/patternProperties/'' + it.util.escapeFragment($pProperty);
if ($ownProperties) {
out += '' '' + ($dataProperties) + '' = '' + ($dataProperties) + '' || Object.keys('' + ($data) + ''); for (var '' + ($idx) + ''=0; '' + ($idx) + ''<'' + ($dataProperties) + ''.length; '' + ($idx) + ''++) { var '' + ($key) + '' = '' + ($dataProperties) + ''['' + ($idx) + '']; '';
} else {
out += '' for (var '' + ($key) + '' in '' + ($data) + '') { '';
}
out += '' if ('' + (it.usePattern($pProperty)) + ''.test('' + ($key) + '')) { '';
$it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
var $passData = $data + ''['' + $key + '']'';
$it.dataPathArr[$dataNxt] = $key;
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
out += '' '' + (it.util.varReplace($code, $nextData, $passData)) + '' '';
} else {
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '' + ($code) + '' '';
}
if ($breakOnError) {
out += '' if (!'' + ($nextValid) + '') break; '';
}
out += '' } '';
if ($breakOnError) {
out += '' else '' + ($nextValid) + '' = true; '';
}
out += '' }  '';
if ($breakOnError) {
out += '' if ('' + ($nextValid) + '') { '';
$closingBraces += ''}'';
}
}
}
}
}
if (it.opts.patternGroups && $pgPropertyKeys.length) {
var arr6 = $pgPropertyKeys;
if (arr6) {
var $pgProperty, i6 = -1,
l6 = arr6.length - 1;
while (i6 < l6) {
$pgProperty = arr6[i6 += 1];
var $pgSchema = $pgProperties[$pgProperty],
$sch = $pgSchema.schema;
if (it.util.schemaHasRules($sch, it.RULES.all)) {
$it.schema = $sch;
$it.schemaPath = it.schemaPath + ''.patternGroups'' + it.util.getProperty($pgProperty) + ''.schema'';
$it.errSchemaPath = it.errSchemaPath + ''/patternGroups/'' + it.util.escapeFragment($pgProperty) + ''/schema'';
out += '' var pgPropCount'' + ($lvl) + '' = 0;  '';
if ($ownProperties) {
out += '' '' + ($dataProperties) + '' = '' + ($dataProperties) + '' || Object.keys('' + ($data) + ''); for (var '' + ($idx) + ''=0; '' + ($idx) + ''<'' + ($dataProperties) + ''.length; '' + ($idx) + ''++) { var '' + ($key) + '' = '' + ($dataProperties) + ''['' + ($idx) + '']; '';
} else {
out += '' for (var '' + ($key) + '' in '' + ($data) + '') { '';
}
out += '' if ('' + (it.usePattern($pgProperty)) + ''.test('' + ($key) + '')) { pgPropCount'' + ($lvl) + ''++; '';
$it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
var $passData = $data + ''['' + $key + '']'';
$it.dataPathArr[$dataNxt] = $key;
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
out += '' '' + (it.util.varReplace($code, $nextData, $passData)) + '' '';
} else {
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '' + ($code) + '' '';
}
if ($breakOnError) {
out += '' if (!'' + ($nextValid) + '') break; '';
}
out += '' } '';
if ($breakOnError) {
out += '' else '' + ($nextValid) + '' = true; '';
}
out += '' }  '';
if ($breakOnError) {
out += '' if ('' + ($nextValid) + '') { '';
$closingBraces += ''}'';
}
var $pgMin = $pgSchema.minimum,
$pgMax = $pgSchema.maximum;
if ($pgMin !== undefined || $pgMax !== undefined) {
out += '' var '' + ($valid) + '' = true; '';
var $currErrSchemaPath = $errSchemaPath;
if ($pgMin !== undefined) {
var $limit = $pgMin,
$reason = ''minimum'',
$moreOrLess = ''less'';
out += '' '' + ($valid) + '' = pgPropCount'' + ($lvl) + '' >= '' + ($pgMin) + ''; '';
$errSchemaPath = it.errSchemaPath + ''/patternGroups/minimum'';
out += ''  if (!'' + ($valid) + '') {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''patternGroups'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { reason: \\\\'''' + ($reason) + ''\\\\'', limit: '' + ($limit) + '', pattern: \\\\'''' + (it.util.escapeQuotes($pgProperty)) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT have '' + ($moreOrLess) + '' than '' + ($limit) + '' properties matching pattern \\"'' + (it.util.escapeQuotes($pgProperty)) + ''\\"\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } '';
if ($pgMax !== undefined) {
out += '' else '';
}
}
if ($pgMax !== undefined) {
var $limit = $pgMax,
$reason = ''maximum'',
$moreOrLess = ''more'';
out += '' '' + ($valid) + '' = pgPropCount'' + ($lvl) + '' <= '' + ($pgMax) + ''; '';
$errSchemaPath = it.errSchemaPath + ''/patternGroups/maximum'';
out += ''  if (!'' + ($valid) + '') {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''patternGroups'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { reason: \\\\'''' + ($reason) + ''\\\\'', limit: '' + ($limit) + '', pattern: \\\\'''' + (it.util.escapeQuotes($pgProperty)) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT have '' + ($moreOrLess) + '' than '' + ($limit) + '' properties matching pattern \\"'' + (it.util.escapeQuotes($pgProperty)) + ''\\"\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } '';
}
$errSchemaPath = $currErrSchemaPath;
if ($breakOnError) {
out += '' if ('' + ($valid) + '') { '';
$closingBraces += ''}'';
}
}
}
}
}
}
if ($breakOnError) {
out += '' '' + ($closingBraces) + '' if ('' + ($errs) + '' == errors) {'';
}
out = it.util.cleanUpCode(out);
return out;
}
},{}],39:[function(require,module,exports){
''use strict'';
module.exports = function generate_propertyNames(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $errs = ''errs__'' + $lvl;
var $it = it.util.copy(it);
var $closingBraces = '''';
$it.level++;
var $nextValid = ''valid'' + $it.level;
if (it.util.schemaHasRules($schema, it.RULES.all)) {
$it.schema = $schema;
$it.schemaPath = $schemaPath;
$it.errSchemaPath = $errSchemaPath;
var $key = ''key'' + $lvl,
$idx = ''idx'' + $lvl,
$i = ''i'' + $lvl,
$invalidName = ''\\\\'' + '' + $key + '' + \\\\'''',
$dataNxt = $it.dataLevel = it.dataLevel + 1,
$nextData = ''data'' + $dataNxt,
$dataProperties = ''dataProperties'' + $lvl,
$ownProperties = it.opts.ownProperties,
$currentBaseId = it.baseId;
out += '' var '' + ($errs) + '' = errors; '';
if ($ownProperties) {
out += '' var '' + ($dataProperties) + '' = undefined; '';
}
if ($ownProperties) {
out += '' '' + ($dataProperties) + '' = '' + ($dataProperties) + '' || Object.keys('' + ($data) + ''); for (var '' + ($idx) + ''=0; '' + ($idx) + ''<'' + ($dataProperties) + ''.length; '' + ($idx) + ''++) { var '' + ($key) + '' = '' + ($dataProperties) + ''['' + ($idx) + '']; '';
} else {
out += '' for (var '' + ($key) + '' in '' + ($data) + '') { '';
}
out += '' var startErrs'' + ($lvl) + '' = errors; '';
var $passData = $key;
var $wasComposite = it.compositeRule;
it.compositeRule = $it.compositeRule = true;
var $code = it.validate($it);
$it.baseId = $currentBaseId;
if (it.util.varOccurences($code, $nextData) < 2) {
out += '' '' + (it.util.varReplace($code, $nextData, $passData)) + '' '';
} else {
out += '' var '' + ($nextData) + '' = '' + ($passData) + ''; '' + ($code) + '' '';
}
it.compositeRule = $it.compositeRule = $wasComposite;
out += '' if (!'' + ($nextValid) + '') { for (var '' + ($i) + ''=startErrs'' + ($lvl) + ''; '' + ($i) + ''<errors; '' + ($i) + ''++) { vErrors['' + ($i) + ''].propertyName = '' + ($key) + ''; }   var err =   ''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''propertyNames'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { propertyName: \\\\'''' + ($invalidName) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''property name \\\\\\\\\\\\'''' + ($invalidName) + ''\\\\\\\\\\\\'' is invalid\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
out += '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(vErrors); '';
} else {
out += '' validate.errors = vErrors; return false; '';
}
}
if ($breakOnError) {
out += '' break; '';
}
out += '' } }'';
}
if ($breakOnError) {
out += '' '' + ($closingBraces) + '' if ('' + ($errs) + '' == errors) {'';
}
out = it.util.cleanUpCode(out);
return out;
}
},{}],40:[function(require,module,exports){
''use strict'';
module.exports = function generate_ref(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $async, $refCode;
if ($schema == ''#'' || $schema == ''#/'') {
if (it.isRoot) {
$async = it.async;
$refCode = ''validate'';
} else {
$async = it.root.schema.$async === true;
$refCode = ''root.refVal[0]'';
}
} else {
var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
if ($refVal === undefined) {
var $message = it.MissingRefError.message(it.baseId, $schema);
if (it.opts.missingRefs == ''fail'') {
console.error($message);
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''$ref'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { ref: \\\\'''' + (it.util.escapeQuotes($schema)) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''can\\\\\\\\\\\\''t resolve reference '' + (it.util.escapeQuotes($schema)) + ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: '' + (it.util.toQuotedString($schema)) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
if ($breakOnError) {
out += '' if (false) { '';
}
} else if (it.opts.missingRefs == ''ignore'') {
console.warn($message);
if ($breakOnError) {
out += '' if (true) { '';
}
} else {
throw new it.MissingRefError(it.baseId, $schema, $message);
}
} else if ($refVal.inline) {
var $it = it.util.copy(it);
$it.level++;
var $nextValid = ''valid'' + $it.level;
$it.schema = $refVal.schema;
$it.schemaPath = '''';
$it.errSchemaPath = $schema;
var $code = it.validate($it).replace(/validate\\\\.schema/g, $refVal.code);
out += '' '' + ($code) + '' '';
if ($breakOnError) {
out += '' if ('' + ($nextValid) + '') { '';
}
} else {
$async = $refVal.$async === true;
$refCode = $refVal.code;
}
}
if ($refCode) {
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = '''';
if (it.opts.passContext) {
out += '' '' + ($refCode) + ''.call(this, '';
} else {
out += '' '' + ($refCode) + ''( '';
}
out += '' '' + ($data) + '', (dataPath || \\\\''\\\\'')'';
if (it.errorPath != ''\\"\\"'') {
out += '' + '' + (it.errorPath);
}
var $parentData = $dataLvl ? ''data'' + (($dataLvl - 1) || '''') : ''parentData'',
$parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : ''parentDataProperty'';
out += '' , '' + ($parentData) + '' , '' + ($parentDataProperty) + '', rootData)  '';
var __callValidate = out;
out = $$outStack.pop();
if ($async) {
if (!it.async) throw new Error(''async schema referenced by sync schema'');
if ($breakOnError) {
out += '' var '' + ($valid) + ''; '';
}
out += '' try { '' + (it.yieldAwait) + '' '' + (__callValidate) + ''; '';
if ($breakOnError) {
out += '' '' + ($valid) + '' = true; '';
}
out += '' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; '';
if ($breakOnError) {
out += '' '' + ($valid) + '' = false; '';
}
out += '' } '';
if ($breakOnError) {
out += '' if ('' + ($valid) + '') { '';
}
} else {
out += '' if (!'' + (__callValidate) + '') { if (vErrors === null) vErrors = '' + ($refCode) + ''.errors; else vErrors = vErrors.concat('' + ($refCode) + ''.errors); errors = vErrors.length; } '';
if ($breakOnError) {
out += '' else { '';
}
}
}
return out;
}
},{}],41:[function(require,module,exports){
''use strict'';
module.exports = function generate_required(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
var $vSchema = ''schema'' + $lvl;
if (!$isData) {
if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
var $required = [];
var arr1 = $schema;
if (arr1) {
var $property, i1 = -1,
l1 = arr1.length - 1;
while (i1 < l1) {
$property = arr1[i1 += 1];
var $propertySch = it.schema.properties[$property];
if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
$required[$required.length] = $property;
}
}
}
} else {
var $required = $schema;
}
}
if ($isData || $required.length) {
var $currentErrorPath = it.errorPath,
$loopRequired = $isData || $required.length >= it.opts.loopRequired,
$ownProperties = it.opts.ownProperties;
if ($breakOnError) {
out += '' var missing'' + ($lvl) + ''; '';
if ($loopRequired) {
if (!$isData) {
out += '' var '' + ($vSchema) + '' = validate.schema'' + ($schemaPath) + ''; '';
}
var $i = ''i'' + $lvl,
$propertyPath = ''schema'' + $lvl + ''['' + $i + '']'',
$missingProperty = ''\\\\'' + '' + $propertyPath + '' + \\\\'''';
if (it.opts._errorDataPathProperty) {
it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
}
out += '' var '' + ($valid) + '' = true; '';
if ($isData) {
out += '' if (schema'' + ($lvl) + '' === undefined) '' + ($valid) + '' = true; else if (!Array.isArray(schema'' + ($lvl) + '')) '' + ($valid) + '' = false; else {'';
}
out += '' for (var '' + ($i) + '' = 0; '' + ($i) + '' < '' + ($vSchema) + ''.length; '' + ($i) + ''++) { '' + ($valid) + '' = '' + ($data) + ''['' + ($vSchema) + ''['' + ($i) + '']] !== undefined '';
if ($ownProperties) {
out += '' &&   Object.prototype.hasOwnProperty.call('' + ($data) + '', '' + ($vSchema) + ''['' + ($i) + '']) '';
}
out += ''; if (!'' + ($valid) + '') break; } '';
if ($isData) {
out += ''  }  '';
}
out += ''  if (!'' + ($valid) + '') {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''required'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { missingProperty: \\\\'''' + ($missingProperty) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\'''';
if (it.opts._errorDataPathProperty) {
out += ''is a required property'';
} else {
out += ''should have required property \\\\\\\\\\\\'''' + ($missingProperty) + ''\\\\\\\\\\\\'''';
}
out += ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } else { '';
} else {
out += '' if ( '';
var arr2 = $required;
if (arr2) {
var $propertyKey, $i = -1,
l2 = arr2.length - 1;
while ($i < l2) {
$propertyKey = arr2[$i += 1];
if ($i) {
out += '' || '';
}
var $prop = it.util.getProperty($propertyKey),
$useData = $data + $prop;
out += '' ( ( '' + ($useData) + '' === undefined '';
if ($ownProperties) {
out += '' || ! Object.prototype.hasOwnProperty.call('' + ($data) + '', \\\\'''' + (it.util.escapeQuotes($propertyKey)) + ''\\\\'') '';
}
out += '') && (missing'' + ($lvl) + '' = '' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + '') ) '';
}
}
out += '') {  '';
var $propertyPath = ''missing'' + $lvl,
$missingProperty = ''\\\\'' + '' + $propertyPath + '' + \\\\'''';
if (it.opts._errorDataPathProperty) {
it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + '' + '' + $propertyPath;
}
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''required'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { missingProperty: \\\\'''' + ($missingProperty) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\'''';
if (it.opts._errorDataPathProperty) {
out += ''is a required property'';
} else {
out += ''should have required property \\\\\\\\\\\\'''' + ($missingProperty) + ''\\\\\\\\\\\\'''';
}
out += ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } else { '';
}
} else {
if ($loopRequired) {
if (!$isData) {
out += '' var '' + ($vSchema) + '' = validate.schema'' + ($schemaPath) + ''; '';
}
var $i = ''i'' + $lvl,
$propertyPath = ''schema'' + $lvl + ''['' + $i + '']'',
$missingProperty = ''\\\\'' + '' + $propertyPath + '' + \\\\'''';
if (it.opts._errorDataPathProperty) {
it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
}
if ($isData) {
out += '' if ('' + ($vSchema) + '' && !Array.isArray('' + ($vSchema) + '')) {  var err =   ''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''required'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { missingProperty: \\\\'''' + ($missingProperty) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\'''';
if (it.opts._errorDataPathProperty) {
out += ''is a required property'';
} else {
out += ''should have required property \\\\\\\\\\\\'''' + ($missingProperty) + ''\\\\\\\\\\\\'''';
}
out += ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
out += '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if ('' + ($vSchema) + '' !== undefined) { '';
}
out += '' for (var '' + ($i) + '' = 0; '' + ($i) + '' < '' + ($vSchema) + ''.length; '' + ($i) + ''++) { if ('' + ($data) + ''['' + ($vSchema) + ''['' + ($i) + '']] === undefined '';
if ($ownProperties) {
out += '' || ! Object.prototype.hasOwnProperty.call('' + ($data) + '', '' + ($vSchema) + ''['' + ($i) + '']) '';
}
out += '') {  var err =   ''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''required'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { missingProperty: \\\\'''' + ($missingProperty) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\'''';
if (it.opts._errorDataPathProperty) {
out += ''is a required property'';
} else {
out += ''should have required property \\\\\\\\\\\\'''' + ($missingProperty) + ''\\\\\\\\\\\\'''';
}
out += ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
out += '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } '';
if ($isData) {
out += ''  }  '';
}
} else {
var arr3 = $required;
if (arr3) {
var $propertyKey, i3 = -1,
l3 = arr3.length - 1;
while (i3 < l3) {
$propertyKey = arr3[i3 += 1];
var $prop = it.util.getProperty($propertyKey),
$missingProperty = it.util.escapeQuotes($propertyKey),
$useData = $data + $prop;
if (it.opts._errorDataPathProperty) {
it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
}
out += '' if ( '' + ($useData) + '' === undefined '';
if ($ownProperties) {
out += '' || ! Object.prototype.hasOwnProperty.call('' + ($data) + '', \\\\'''' + (it.util.escapeQuotes($propertyKey)) + ''\\\\'') '';
}
out += '') {  var err =   ''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''required'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { missingProperty: \\\\'''' + ($missingProperty) + ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\'''';
if (it.opts._errorDataPathProperty) {
out += ''is a required property'';
} else {
out += ''should have required property \\\\\\\\\\\\'''' + ($missingProperty) + ''\\\\\\\\\\\\'''';
}
out += ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
out += '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } '';
}
}
}
}
it.errorPath = $currentErrorPath;
} else if ($breakOnError) {
out += '' if (true) {'';
}
return out;
}
},{}],42:[function(require,module,exports){
''use strict'';
module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
var out = '' '';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
var $isData = it.opts.$data && $schema && $schema.$data,
$schemaValue;
if ($isData) {
out += '' var schema'' + ($lvl) + '' = '' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + ''; '';
$schemaValue = ''schema'' + $lvl;
} else {
$schemaValue = $schema;
}
if (($schema || $isData) && it.opts.uniqueItems !== false) {
if ($isData) {
out += '' var '' + ($valid) + ''; if ('' + ($schemaValue) + '' === false || '' + ($schemaValue) + '' === undefined) '' + ($valid) + '' = true; else if (typeof '' + ($schemaValue) + '' != \\\\''boolean\\\\'') '' + ($valid) + '' = false; else { '';
}
out += '' var '' + ($valid) + '' = true; if ('' + ($data) + ''.length > 1) { var i = '' + ($data) + ''.length, j; outer: for (;i--;) { for (j = i; j--;) { if (equal('' + ($data) + ''[i], '' + ($data) + ''[j])) { '' + ($valid) + '' = false; break outer; } } } } '';
if ($isData) {
out += ''  }  '';
}
out += '' if (!'' + ($valid) + '') {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + (''uniqueItems'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { i: i, j: j } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should NOT have duplicate items (items ## \\\\'' + j + \\\\'' and \\\\'' + i + \\\\'' are identical)\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema:  '';
if ($isData) {
out += ''validate.schema'' + ($schemaPath);
} else {
out += '''' + ($schema);
}
out += ''         , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } '';
if ($breakOnError) {
out += '' else { '';
}
} else {
if ($breakOnError) {
out += '' if (true) { '';
}
}
return out;
}
},{}],43:[function(require,module,exports){
''use strict'';
module.exports = function generate_validate(it, $keyword, $ruleType) {
var out = '''';
var $async = it.schema.$async === true,
$refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, ''$ref''),
$id = it.self._getId(it.schema);
if (it.isTop) {
if ($async) {
it.async = true;
var $es7 = it.opts.async == ''es7'';
it.yieldAwait = $es7 ? ''await'' : ''yield'';
}
out += '' var validate = '';
if ($async) {
if ($es7) {
out += '' (async function '';
} else {
if (it.opts.async != ''*'') {
out += ''co.wrap'';
}
out += ''(function* '';
}
} else {
out += '' (function '';
}
out += '' (data, dataPath, parentData, parentDataProperty, rootData) { \\\\''use strict\\\\''; '';
if ($id && (it.opts.sourceCode || it.opts.processCode)) {
out += '' '' + (''/\\\\*# sourceURL='' + $id + '' */'') + '' '';
}
}
if (typeof it.schema == ''boolean'' || !($refKeywords || it.schema.$ref)) {
var $keyword = ''false schema'';
var $lvl = it.level;
var $dataLvl = it.dataLevel;
var $schema = it.schema[$keyword];
var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
var $errSchemaPath = it.errSchemaPath + ''/'' + $keyword;
var $breakOnError = !it.opts.allErrors;
var $errorKeyword;
var $data = ''data'' + ($dataLvl || '''');
var $valid = ''valid'' + $lvl;
if (it.schema === false) {
if (it.isTop) {
$breakOnError = true;
} else {
out += '' var '' + ($valid) + '' = false; '';
}
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''false schema'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: {} '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''boolean schema is false\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: false , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
} else {
if (it.isTop) {
if ($async) {
out += '' return data; '';
} else {
out += '' validate.errors = null; return true; '';
}
} else {
out += '' var '' + ($valid) + '' = true; '';
}
}
if (it.isTop) {
out += '' }); return validate; '';
}
return out;
}
if (it.isTop) {
var $top = it.isTop,
$lvl = it.level = 0,
$dataLvl = it.dataLevel = 0,
$data = ''data'';
it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
it.baseId = it.baseId || it.rootId;
delete it.isTop;
it.dataPathArr = [undefined];
out += '' var vErrors = null; '';
out += '' var errors = 0;     '';
out += '' if (rootData === undefined) rootData = data; '';
} else {
var $lvl = it.level,
$dataLvl = it.dataLevel,
$data = ''data'' + ($dataLvl || '''');
if ($id) it.baseId = it.resolve.url(it.baseId, $id);
if ($async && !it.async) throw new Error(''async schema in sync schema'');
out += '' var errs_'' + ($lvl) + '' = errors;'';
}
var $valid = ''valid'' + $lvl,
$breakOnError = !it.opts.allErrors,
$closingBraces1 = '''',
$closingBraces2 = '''';
var $errorKeyword;
var $typeSchema = it.schema.type,
$typeIsArray = Array.isArray($typeSchema);
if ($typeIsArray && $typeSchema.length == 1) {
$typeSchema = $typeSchema[0];
$typeIsArray = false;
}
if (it.schema.$ref && $refKeywords) {
if (it.opts.extendRefs == ''fail'') {
throw new Error(''$ref: validation keywords used in schema at path \\"'' + it.errSchemaPath + ''\\" (see option extendRefs)'');
} else if (it.opts.extendRefs !== true) {
$refKeywords = false;
console.warn(''$ref: keywords ignored in schema at path \\"'' + it.errSchemaPath + ''\\"'');
}
}
if ($typeSchema) {
if (it.opts.coerceTypes) {
var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
}
var $rulesGroup = it.RULES.types[$typeSchema];
if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
var $schemaPath = it.schemaPath + ''.type'',
$errSchemaPath = it.errSchemaPath + ''/type'';
var $schemaPath = it.schemaPath + ''.type'',
$errSchemaPath = it.errSchemaPath + ''/type'',
$method = $typeIsArray ? ''checkDataTypes'' : ''checkDataType'';
out += '' if ('' + (it.util[$method]($typeSchema, $data, true)) + '') { '';
if ($coerceToTypes) {
var $dataType = ''dataType'' + $lvl,
$coerced = ''coerced'' + $lvl;
out += '' var '' + ($dataType) + '' = typeof '' + ($data) + ''; '';
if (it.opts.coerceTypes == ''array'') {
out += '' if ('' + ($dataType) + '' == \\\\''object\\\\'' && Array.isArray('' + ($data) + '')) '' + ($dataType) + '' = \\\\''array\\\\''; '';
}
out += '' var '' + ($coerced) + '' = undefined; '';
var $bracesCoercion = '''';
var arr1 = $coerceToTypes;
if (arr1) {
var $type, $i = -1,
l1 = arr1.length - 1;
while ($i < l1) {
$type = arr1[$i += 1];
if ($i) {
out += '' if ('' + ($coerced) + '' === undefined) { '';
$bracesCoercion += ''}'';
}
if (it.opts.coerceTypes == ''array'' && $type != ''array'') {
out += '' if ('' + ($dataType) + '' == \\\\''array\\\\'' && '' + ($data) + ''.length == 1) { '' + ($coerced) + '' = '' + ($data) + '' = '' + ($data) + ''[0]; '' + ($dataType) + '' = typeof '' + ($data) + '';  } '';
}
if ($type == ''string'') {
out += '' if ('' + ($dataType) + '' == \\\\''number\\\\'' || '' + ($dataType) + '' == \\\\''boolean\\\\'') '' + ($coerced) + '' = \\\\''\\\\'' + '' + ($data) + ''; else if ('' + ($data) + '' === null) '' + ($coerced) + '' = \\\\''\\\\''; '';
} else if ($type == ''number'' || $type == ''integer'') {
out += '' if ('' + ($dataType) + '' == \\\\''boolean\\\\'' || '' + ($data) + '' === null || ('' + ($dataType) + '' == \\\\''string\\\\'' && '' + ($data) + '' && '' + ($data) + '' == +'' + ($data) + '' '';
if ($type == ''integer'') {
out += '' && !('' + ($data) + '' % 1)'';
}
out += '')) '' + ($coerced) + '' = +'' + ($data) + ''; '';
} else if ($type == ''boolean'') {
out += '' if ('' + ($data) + '' === \\\\''false\\\\'' || '' + ($data) + '' === 0 || '' + ($data) + '' === null) '' + ($coerced) + '' = false; else if ('' + ($data) + '' === \\\\''true\\\\'' || '' + ($data) + '' === 1) '' + ($coerced) + '' = true; '';
} else if ($type == ''null'') {
out += '' if ('' + ($data) + '' === \\\\''\\\\'' || '' + ($data) + '' === 0 || '' + ($data) + '' === false) '' + ($coerced) + '' = null; '';
} else if (it.opts.coerceTypes == ''array'' && $type == ''array'') {
out += '' if ('' + ($dataType) + '' == \\\\''string\\\\'' || '' + ($dataType) + '' == \\\\''number\\\\'' || '' + ($dataType) + '' == \\\\''boolean\\\\'' || '' + ($data) + '' == null) '' + ($coerced) + '' = ['' + ($data) + '']; '';
}
}
}
out += '' '' + ($bracesCoercion) + '' if ('' + ($coerced) + '' === undefined) {   '';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''type'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { type: \\\\'''';
if ($typeIsArray) {
out += '''' + ($typeSchema.join(\\",\\"));
} else {
out += '''' + ($typeSchema);
}
out += ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should be '';
if ($typeIsArray) {
out += '''' + ($typeSchema.join(\\",\\"));
} else {
out += '''' + ($typeSchema);
}
out += ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } else {  '';
var $parentData = $dataLvl ? ''data'' + (($dataLvl - 1) || '''') : ''parentData'',
$parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : ''parentDataProperty'';
out += '' '' + ($data) + '' = '' + ($coerced) + ''; '';
if (!$dataLvl) {
out += ''if ('' + ($parentData) + '' !== undefined)'';
}
out += '' '' + ($parentData) + ''['' + ($parentDataProperty) + ''] = '' + ($coerced) + ''; } '';
} else {
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''type'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { type: \\\\'''';
if ($typeIsArray) {
out += '''' + ($typeSchema.join(\\",\\"));
} else {
out += '''' + ($typeSchema);
}
out += ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should be '';
if ($typeIsArray) {
out += '''' + ($typeSchema.join(\\",\\"));
} else {
out += '''' + ($typeSchema);
}
out += ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
}
out += '' } '';
}
}
if (it.schema.$ref && !$refKeywords) {
out += '' '' + (it.RULES.all.$ref.code(it, ''$ref'')) + '' '';
if ($breakOnError) {
out += '' } if (errors === '';
if ($top) {
out += ''0'';
} else {
out += ''errs_'' + ($lvl);
}
out += '') { '';
$closingBraces2 += ''}'';
}
} else {
if (it.opts.v5 && it.schema.patternGroups) {
console.warn(''keyword \\"patternGroups\\" is deprecated and disabled. Use option patternGroups: true to enable.'');
}
var arr2 = it.RULES;
if (arr2) {
var $rulesGroup, i2 = -1,
l2 = arr2.length - 1;
while (i2 < l2) {
$rulesGroup = arr2[i2 += 1];
if ($shouldUseGroup($rulesGroup)) {
if ($rulesGroup.type) {
out += '' if ('' + (it.util.checkDataType($rulesGroup.type, $data)) + '') { '';
}
if (it.opts.useDefaults && !it.compositeRule) {
if ($rulesGroup.type == ''object'' && it.schema.properties) {
var $schema = it.schema.properties,
$schemaKeys = Object.keys($schema);
var arr3 = $schemaKeys;
if (arr3) {
var $propertyKey, i3 = -1,
l3 = arr3.length - 1;
while (i3 < l3) {
$propertyKey = arr3[i3 += 1];
var $sch = $schema[$propertyKey];
if ($sch.default !== undefined) {
var $passData = $data + it.util.getProperty($propertyKey);
out += ''  if ('' + ($passData) + '' === undefined) '' + ($passData) + '' = '';
if (it.opts.useDefaults == ''shared'') {
out += '' '' + (it.useDefault($sch.default)) + '' '';
} else {
out += '' '' + (JSON.stringify($sch.default)) + '' '';
}
out += ''; '';
}
}
}
} else if ($rulesGroup.type == ''array'' && Array.isArray(it.schema.items)) {
var arr4 = it.schema.items;
if (arr4) {
var $sch, $i = -1,
l4 = arr4.length - 1;
while ($i < l4) {
$sch = arr4[$i += 1];
if ($sch.default !== undefined) {
var $passData = $data + ''['' + $i + '']'';
out += ''  if ('' + ($passData) + '' === undefined) '' + ($passData) + '' = '';
if (it.opts.useDefaults == ''shared'') {
out += '' '' + (it.useDefault($sch.default)) + '' '';
} else {
out += '' '' + (JSON.stringify($sch.default)) + '' '';
}
out += ''; '';
}
}
}
}
}
var arr5 = $rulesGroup.rules;
if (arr5) {
var $rule, i5 = -1,
l5 = arr5.length - 1;
while (i5 < l5) {
$rule = arr5[i5 += 1];
if ($shouldUseRule($rule)) {
var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
if ($code) {
out += '' '' + ($code) + '' '';
if ($breakOnError) {
$closingBraces1 += ''}'';
}
}
}
}
}
if ($breakOnError) {
out += '' '' + ($closingBraces1) + '' '';
$closingBraces1 = '''';
}
if ($rulesGroup.type) {
out += '' } '';
if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
out += '' else { '';
var $schemaPath = it.schemaPath + ''.type'',
$errSchemaPath = it.errSchemaPath + ''/type'';
var $$outStack = $$outStack || [];
$$outStack.push(out);
out = ''''; /* istanbul ignore else */
if (it.createErrors !== false) {
out += '' { keyword: \\\\'''' + ($errorKeyword || ''type'') + ''\\\\'' , dataPath: (dataPath || \\\\''\\\\'') + '' + (it.errorPath) + '' , schemaPath: '' + (it.util.toQuotedString($errSchemaPath)) + '' , params: { type: \\\\'''';
if ($typeIsArray) {
out += '''' + ($typeSchema.join(\\",\\"));
} else {
out += '''' + ($typeSchema);
}
out += ''\\\\'' } '';
if (it.opts.messages !== false) {
out += '' , message: \\\\''should be '';
if ($typeIsArray) {
out += '''' + ($typeSchema.join(\\",\\"));
} else {
out += '''' + ($typeSchema);
}
out += ''\\\\'' '';
}
if (it.opts.verbose) {
out += '' , schema: validate.schema'' + ($schemaPath) + '' , parentSchema: validate.schema'' + (it.schemaPath) + '' , data: '' + ($data) + '' '';
}
out += '' } '';
} else {
out += '' {} '';
}
var __err = out;
out = $$outStack.pop();
if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */
if (it.async) {
out += '' throw new ValidationError(['' + (__err) + '']); '';
} else {
out += '' validate.errors = ['' + (__err) + '']; return false; '';
}
} else {
out += '' var err = '' + (__err) + '';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; '';
}
out += '' } '';
}
}
if ($breakOnError) {
out += '' if (errors === '';
if ($top) {
out += ''0'';
} else {
out += ''errs_'' + ($lvl);
}
out += '') { '';
$closingBraces2 += ''}'';
}
}
}
}
}
if ($breakOnError) {
out += '' '' + ($closingBraces2) + '' '';
}
if ($top) {
if ($async) {
out += '' if (errors === 0) return data;           '';
out += '' else throw new ValidationError(vErrors); '';
} else {
out += '' validate.errors = vErrors; '';
out += '' return errors === 0;       '';
}
out += '' }); return validate;'';
} else {
out += '' var '' + ($valid) + '' = errors === errs_'' + ($lvl) + '';'';
}
out = it.util.cleanUpCode(out);
if ($top) {
out = it.util.finalCleanUpCode(out, $async);
}
function $shouldUseGroup($rulesGroup) {
var rules = $rulesGroup.rules;
for (var i = 0; i < rules.length; i++)
if ($shouldUseRule(rules[i])) return true;
}
function $shouldUseRule($rule) {
return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImlementsSomeKeyword($rule));
}
function $ruleImlementsSomeKeyword($rule) {
var impl = $rule.implements;
for (var i = 0; i < impl.length; i++)
if (it.schema[impl[i]] !== undefined) return true;
}
return out;
}
},{}],44:[function(require,module,exports){
''use strict'';
var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
var customRuleCode = require(''./dotjs/custom'');
module.exports = {
add: addKeyword,
get: getKeyword,
remove: removeKeyword
};
/**
* Define custom keyword
* @this  Ajv
* @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
* @param {Object} definition keyword definition object with properties \`type\` (type(s) which the keyword applies to), \`validate\` or \`compile\`.
*/
function addKeyword(keyword, definition) {
/* jshint validthis: true */
/* eslint no-shadow: 0 */
var RULES = this.RULES;
if (RULES.keywords[keyword])
throw new Error(''Keyword '' + keyword + '' is already defined'');
if (!IDENTIFIER.test(keyword))
throw new Error(''Keyword '' + keyword + '' is not a valid identifier'');
if (definition) {
if (definition.macro && definition.valid !== undefined)
throw new Error(''\\"valid\\" option cannot be used with macro keywords'');
var dataType = definition.type;
if (Array.isArray(dataType)) {
var i, len = dataType.length;
for (i=0; i<len; i++) checkDataType(dataType[i]);
for (i=0; i<len; i++) _addRule(keyword, dataType[i], definition);
} else {
if (dataType) checkDataType(dataType);
_addRule(keyword, dataType, definition);
}
var $data = definition.$data === true && this._opts.$data;
if ($data && !definition.validate)
throw new Error(''$data support: \\"validate\\" function is not defined'');
var metaSchema = definition.metaSchema;
if (metaSchema) {
if ($data) {
metaSchema = {
anyOf: [
metaSchema,
{ ''$ref'': ''https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#'' }
]
};
}
definition.validateSchema = this.compile(metaSchema, true);
}
}
RULES.keywords[keyword] = RULES.all[keyword] = true;
function _addRule(keyword, dataType, definition) {
var ruleGroup;
for (var i=0; i<RULES.length; i++) {
var rg = RULES[i];
if (rg.type == dataType) {
ruleGroup = rg;
break;
}
}
if (!ruleGroup) {
ruleGroup = { type: dataType, rules: [] };
RULES.push(ruleGroup);
}
var rule = {
keyword: keyword,
definition: definition,
custom: true,
code: customRuleCode,
implements: definition.implements
};
ruleGroup.rules.push(rule);
RULES.custom[keyword] = rule;
}
function checkDataType(dataType) {
if (!RULES.types[dataType]) throw new Error(''Unknown type '' + dataType);
}
}
/**
* Get keyword
* @this  Ajv
* @param {String} keyword pre-defined or custom keyword.
* @return {Object|Boolean} custom keyword definition, \`true\` if it is a predefined keyword, \`false\` otherwise.
*/
function getKeyword(keyword) {
/* jshint validthis: true */
var rule = this.RULES.custom[keyword];
return rule ? rule.definition : this.RULES.keywords[keyword] || false;
}
/**
* Remove keyword
* @this  Ajv
* @param {String} keyword pre-defined or custom keyword.
*/
function removeKeyword(keyword) {
/* jshint validthis: true */
var RULES = this.RULES;
delete RULES.keywords[keyword];
delete RULES.all[keyword];
delete RULES.custom[keyword];
for (var i=0; i<RULES.length; i++) {
var rules = RULES[i].rules;
for (var j=0; j<rules.length; j++) {
if (rules[j].keyword == keyword) {
rules.splice(j, 1);
break;
}
}
}
}
},{\\"./dotjs/custom\\":29}],45:[function(require,module,exports){
''use strict'';
var META_SCHEMA_ID = ''http://json-schema.org/draft-06/schema'';
module.exports = function (ajv) {
var defaultMeta = ajv._opts.defaultMeta;
var metaSchemaRef = typeof defaultMeta == ''string''
? { $ref: defaultMeta }
: ajv.getSchema(META_SCHEMA_ID)
? { $ref: META_SCHEMA_ID }
: {};
ajv.addKeyword(''patternGroups'', {
// implemented in properties.jst
metaSchema: {
type: ''object'',
additionalProperties: {
type: ''object'',
required: [ ''schema'' ],
properties: {
maximum: {
type: ''integer'',
minimum: 0
},
minimum: {
type: ''integer'',
minimum: 0
},
schema: metaSchemaRef
},
additionalProperties: false
}
}
});
ajv.RULES.all.properties.implements.push(''patternGroups'');
};
},{}],46:[function(require,module,exports){
module.exports={
\\"$schema\\": \\"http://json-schema.org/draft-06/schema#\\",
\\"$id\\": \\"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#\\",
\\"description\\": \\"Meta-schema for $data reference (JSON-schema extension proposal)\\",
\\"type\\": \\"object\\",
\\"required\\": [ \\"$data\\" ],
\\"properties\\": {
\\"$data\\": {
\\"type\\": \\"string\\",
\\"anyOf\\": [
{ \\"format\\": \\"relative-json-pointer\\" },
{ \\"format\\": \\"json-pointer\\" }
]
}
},
\\"additionalProperties\\": false
}
},{}],47:[function(require,module,exports){
module.exports={
\\"$schema\\": \\"http://json-schema.org/draft-06/schema#\\",
\\"$id\\": \\"http://json-schema.org/draft-06/schema#\\",
\\"title\\": \\"Core schema meta-schema\\",
\\"definitions\\": {
\\"schemaArray\\": {
\\"type\\": \\"array\\",
\\"minItems\\": 1,
\\"items\\": { \\"$ref\\": \\"#\\" }
},
\\"nonNegativeInteger\\": {
\\"type\\": \\"integer\\",
\\"minimum\\": 0
},
\\"nonNegativeIntegerDefault0\\": {
\\"allOf\\": [
{ \\"$ref\\": \\"#/definitions/nonNegativeInteger\\" },
{ \\"default\\": 0 }
]
},
\\"simpleTypes\\": {
\\"enum\\": [
\\"array\\",
\\"boolean\\",
\\"integer\\",
\\"null\\",
\\"number\\",
\\"object\\",
\\"string\\"
]
},
\\"stringArray\\": {
\\"type\\": \\"array\\",
\\"items\\": { \\"type\\": \\"string\\" },
\\"uniqueItems\\": true,
\\"default\\": []
}
},
\\"type\\": [\\"object\\", \\"boolean\\"],
\\"properties\\": {
\\"$id\\": {
\\"type\\": \\"string\\",
\\"format\\": \\"uri-reference\\"
},
\\"$schema\\": {
\\"type\\": \\"string\\",
\\"format\\": \\"uri\\"
},
\\"$ref\\": {
\\"type\\": \\"string\\",
\\"format\\": \\"uri-reference\\"
},
\\"title\\": {
\\"type\\": \\"string\\"
},
\\"description\\": {
\\"type\\": \\"string\\"
},
\\"default\\": {},
\\"multipleOf\\": {
\\"type\\": \\"number\\",
\\"exclusiveMinimum\\": 0
},
\\"maximum\\": {
\\"type\\": \\"number\\"
},
\\"exclusiveMaximum\\": {
\\"type\\": \\"number\\"
},
\\"minimum\\": {
\\"type\\": \\"number\\"
},
\\"exclusiveMinimum\\": {
\\"type\\": \\"number\\"
},
\\"maxLength\\": { \\"$ref\\": \\"#/definitions/nonNegativeInteger\\" },
\\"minLength\\": { \\"$ref\\": \\"#/definitions/nonNegativeIntegerDefault0\\" },
\\"pattern\\": {
\\"type\\": \\"string\\",
\\"format\\": \\"regex\\"
},
\\"additionalItems\\": { \\"$ref\\": \\"#\\" },
\\"items\\": {
\\"anyOf\\": [
{ \\"$ref\\": \\"#\\" },
{ \\"$ref\\": \\"#/definitions/schemaArray\\" }
],
\\"default\\": {}
},
\\"maxItems\\": { \\"$ref\\": \\"#/definitions/nonNegativeInteger\\" },
\\"minItems\\": { \\"$ref\\": \\"#/definitions/nonNegativeIntegerDefault0\\" },
\\"uniqueItems\\": {
\\"type\\": \\"boolean\\",
\\"default\\": false
},
\\"contains\\": { \\"$ref\\": \\"#\\" },
\\"maxProperties\\": { \\"$ref\\": \\"#/definitions/nonNegativeInteger\\" },
\\"minProperties\\": { \\"$ref\\": \\"#/definitions/nonNegativeIntegerDefault0\\" },
\\"required\\": { \\"$ref\\": \\"#/definitions/stringArray\\" },
\\"additionalProperties\\": { \\"$ref\\": \\"#\\" },
\\"definitions\\": {
\\"type\\": \\"object\\",
\\"additionalProperties\\": { \\"$ref\\": \\"#\\" },
\\"default\\": {}
},
\\"properties\\": {
\\"type\\": \\"object\\",
\\"additionalProperties\\": { \\"$ref\\": \\"#\\" },
\\"default\\": {}
},
\\"patternProperties\\": {
\\"type\\": \\"object\\",
\\"additionalProperties\\": { \\"$ref\\": \\"#\\" },
\\"default\\": {}
},
\\"dependencies\\": {
\\"type\\": \\"object\\",
\\"additionalProperties\\": {
\\"anyOf\\": [
{ \\"$ref\\": \\"#\\" },
{ \\"$ref\\": \\"#/definitions/stringArray\\" }
]
}
},
\\"propertyNames\\": { \\"$ref\\": \\"#\\" },
\\"const\\": {},
\\"enum\\": {
\\"type\\": \\"array\\",
\\"minItems\\": 1,
\\"uniqueItems\\": true
},
\\"type\\": {
\\"anyOf\\": [
{ \\"$ref\\": \\"#/definitions/simpleTypes\\" },
{
\\"type\\": \\"array\\",
\\"items\\": { \\"$ref\\": \\"#/definitions/simpleTypes\\" },
\\"minItems\\": 1,
\\"uniqueItems\\": true
}
]
},
\\"format\\": { \\"type\\": \\"string\\" },
\\"allOf\\": { \\"$ref\\": \\"#/definitions/schemaArray\\" },
\\"anyOf\\": { \\"$ref\\": \\"#/definitions/schemaArray\\" },
\\"oneOf\\": { \\"$ref\\": \\"#/definitions/schemaArray\\" },
\\"not\\": { \\"$ref\\": \\"#\\" }
},
\\"default\\": {}
}
},{}],48:[function(require,module,exports){
/**
* slice() reference.
*/
var slice = Array.prototype.slice;
/**
* Expose \`co\`.
*/
module.exports = co[''default''] = co.co = co;
/**
* Wrap the given generator \`fn\` into a
* function that returns a promise.
* This is a separate function so that
* every \`co()\` call doesn''t create a new,
* unnecessary closure.
*
* @param {GeneratorFunction} fn
* @return {Function}
* @api public
*/
co.wrap = function (fn) {
createPromise.__generatorFunction__ = fn;
return createPromise;
function createPromise() {
return co.call(this, fn.apply(this, arguments));
}
};
/**
* Execute the generator function or a generator
* and return a promise.
*
* @param {Function} fn
* @return {Promise}
* @api public
*/
function co(gen) {
var ctx = this;
var args = slice.call(arguments, 1)
// we wrap everything in a promise to avoid promise chaining,
// which leads to memory leak errors.
// see https://github.com/tj/co/issues/180
return new Promise(function(resolve, reject) {
if (typeof gen === ''function'') gen = gen.apply(ctx, args);
if (!gen || typeof gen.next !== ''function'') return resolve(gen);
onFulfilled();
/**
* @param {Mixed} res
* @return {Promise}
* @api private
*/
function onFulfilled(res) {
var ret;
try {
ret = gen.next(res);
} catch (e) {
return reject(e);
}
next(ret);
}
/**
* @param {Error} err
* @return {Promise}
* @api private
*/
function onRejected(err) {
var ret;
try {
ret = gen.throw(err);
} catch (e) {
return reject(e);
}
next(ret);
}
/**
* Get the next value in the generator,
* return a promise.
*
* @param {Object} ret
* @return {Promise}
* @api private
*/
function next(ret) {
if (ret.done) return resolve(ret.value);
var value = toPromise.call(ctx, ret.value);
if (value && isPromise(value)) return value.then(onFulfilled, onRejected);
return onRejected(new TypeError(''You may only yield a function, promise, generator, array, or object, ''
+ ''but the following object was passed: \\"'' + String(ret.value) + ''\\"''));
}
});
}
/**
* Convert a \`yield\`ed value into a promise.
*
* @param {Mixed} obj
* @return {Promise}
* @api private
*/
function toPromise(obj) {
if (!obj) return obj;
if (isPromise(obj)) return obj;
if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);
if (''function'' == typeof obj) return thunkToPromise.call(this, obj);
if (Array.isArray(obj)) return arrayToPromise.call(this, obj);
if (isObject(obj)) return objectToPromise.call(this, obj);
return obj;
}
/**
* Convert a thunk to a promise.
*
* @param {Function}
* @return {Promise}
* @api private
*/
function thunkToPromise(fn) {
var ctx = this;
return new Promise(function (resolve, reject) {
fn.call(ctx, function (err, res) {
if (err) return reject(err);
if (arguments.length > 2) res = slice.call(arguments, 1);
resolve(res);
});
});
}
/**
* Convert an array of \\"yieldables\\" to a promise.
* Uses \`Promise.all()\` internally.
*
* @param {Array} obj
* @return {Promise}
* @api private
*/
function arrayToPromise(obj) {
return Promise.all(obj.map(toPromise, this));
}
/**
* Convert an object of \\"yieldables\\" to a promise.
* Uses \`Promise.all()\` internally.
*
* @param {Object} obj
* @return {Promise}
* @api private
*/
function objectToPromise(obj){
var results = new obj.constructor();
var keys = Object.keys(obj);
var promises = [];
for (var i = 0; i < keys.length; i++) {
var key = keys[i];
var promise = toPromise.call(this, obj[key]);
if (promise && isPromise(promise)) defer(promise, key);
else results[key] = obj[key];
}
return Promise.all(promises).then(function () {
return results;
});
function defer(promise, key) {
// predefine the key in the result
results[key] = undefined;
promises.push(promise.then(function (res) {
results[key] = res;
}));
}
}
/**
* Check if \`obj\` is a promise.
*
* @param {Object} obj
* @return {Boolean}
* @api private
*/
function isPromise(obj) {
return ''function'' == typeof obj.then;
}
/**
* Check if \`obj\` is a generator.
*
* @param {Mixed} obj
* @return {Boolean}
* @api private
*/
function isGenerator(obj) {
return ''function'' == typeof obj.next && ''function'' == typeof obj.throw;
}
/**
* Check if \`obj\` is a generator function.
*
* @param {Mixed} obj
* @return {Boolean}
* @api private
*/
function isGeneratorFunction(obj) {
var constructor = obj.constructor;
if (!constructor) return false;
if (''GeneratorFunction'' === constructor.name || ''GeneratorFunction'' === constructor.displayName) return true;
return isGenerator(constructor.prototype);
}
/**
* Check for plain object.
*
* @param {Mixed} val
* @return {Boolean}
* @api private
*/
function isObject(val) {
return Object == val.constructor;
}
},{}],49:[function(require,module,exports){
''use strict'';
module.exports = function equal(a, b) {
if (a === b) return true;
var arrA = Array.isArray(a)
, arrB = Array.isArray(b)
, i;
if (arrA && arrB) {
if (a.length != b.length) return false;
for (i = 0; i < a.length; i++)
if (!equal(a[i], b[i])) return false;
return true;
}
if (arrA != arrB) return false;
if (a && b && typeof a === ''object'' && typeof b === ''object'') {
var keys = Object.keys(a);
if (keys.length !== Object.keys(b).length) return false;
var dateA = a instanceof Date
, dateB = b instanceof Date;
if (dateA && dateB) return a.getTime() == b.getTime();
if (dateA != dateB) return false;
var regexpA = a instanceof RegExp
, regexpB = b instanceof RegExp;
if (regexpA && regexpB) return a.toString() == b.toString();
if (regexpA != regexpB) return false;
for (i = 0; i < keys.length; i++)
if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
for (i = 0; i < keys.length; i++)
if(!equal(a[keys[i]], b[keys[i]])) return false;
return true;
}
return false;
};
},{}],50:[function(require,module,exports){
''use strict'';
var traverse = module.exports = function (schema, opts, cb) {
if (typeof opts == ''function'') {
cb = opts;
opts = {};
}
_traverse(opts, cb, schema, '''', schema);
};
traverse.keywords = {
additionalItems: true,
items: true,
contains: true,
additionalProperties: true,
propertyNames: true,
not: true
};
traverse.arrayKeywords = {
items: true,
allOf: true,
anyOf: true,
oneOf: true
};
traverse.propsKeywords = {
definitions: true,
properties: true,
patternProperties: true,
dependencies: true
};
traverse.skipKeywords = {
enum: true,
const: true,
required: true,
maximum: true,
minimum: true,
exclusiveMaximum: true,
exclusiveMinimum: true,
multipleOf: true,
maxLength: true,
minLength: true,
pattern: true,
format: true,
maxItems: true,
minItems: true,
uniqueItems: true,
maxProperties: true,
minProperties: true
};
function _traverse(opts, cb, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
if (schema && typeof schema == ''object'' && !Array.isArray(schema)) {
cb(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
for (var key in schema) {
var sch = schema[key];
if (Array.isArray(sch)) {
if (key in traverse.arrayKeywords) {
for (var i=0; i<sch.length; i++)
_traverse(opts, cb, sch[i], jsonPtr + ''/'' + key + ''/'' + i, rootSchema, jsonPtr, key, schema, i);
}
} else if (key in traverse.propsKeywords) {
if (sch && typeof sch == ''object'') {
for (var prop in sch)
_traverse(opts, cb, sch[prop], jsonPtr + ''/'' + key + ''/'' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
}
} else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
_traverse(opts, cb, sch, jsonPtr + ''/'' + key, rootSchema, jsonPtr, key, schema);
}
}
}
}
function escapeJsonPtr(str) {
return str.replace(/~/g, ''~0'').replace(/\\\\//g, ''~1'');
}
},{}],51:[function(require,module,exports){
var json = typeof JSON !== ''undefined'' ? JSON : require(''jsonify'');
module.exports = function (obj, opts) {
if (!opts) opts = {};
if (typeof opts === ''function'') opts = { cmp: opts };
var space = opts.space || '''';
if (typeof space === ''number'') space = Array(space+1).join('' '');
var cycles = (typeof opts.cycles === ''boolean'') ? opts.cycles : false;
var replacer = opts.replacer || function(key, value) { return value; };
var cmp = opts.cmp && (function (f) {
return function (node) {
return function (a, b) {
var aobj = { key: a, value: node[a] };
var bobj = { key: b, value: node[b] };
return f(aobj, bobj);
};
};
})(opts.cmp);
var seen = [];
return (function stringify (parent, key, node, level) {
var indent = space ? (''\\\\n'' + new Array(level + 1).join(space)) : '''';
var colonSeparator = space ? '': '' : '':'';
if (node && node.toJSON && typeof node.toJSON === ''function'') {
node = node.toJSON();
}
node = replacer.call(parent, key, node);
if (node === undefined) {
return;
}
if (typeof node !== ''object'' || node === null) {
return json.stringify(node);
}
if (isArray(node)) {
var out = [];
for (var i = 0; i < node.length; i++) {
var item = stringify(node, i, node[i], level+1) || json.stringify(null);
out.push(indent + space + item);
}
return ''['' + out.join('','') + indent + '']'';
}
else {
if (seen.indexOf(node) !== -1) {
if (cycles) return json.stringify(''__cycle__'');
throw new TypeError(''Converting circular structure to JSON'');
}
else seen.push(node);
var keys = objectKeys(node).sort(cmp && cmp(node));
var out = [];
for (var i = 0; i < keys.length; i++) {
var key = keys[i];
var value = stringify(node, key, node[key], level+1);
if(!value) continue;
var keyValue = json.stringify(key)
+ colonSeparator
+ value;
;
out.push(indent + space + keyValue);
}
seen.splice(seen.indexOf(node), 1);
return ''{'' + out.join('','') + indent + ''}'';
}
})({ '''': obj }, '''', obj, 0);
};
var isArray = Array.isArray || function (x) {
return {}.toString.call(x) === ''[object Array]'';
};
var objectKeys = Object.keys || function (obj) {
var has = Object.prototype.hasOwnProperty || function () { return true };
var keys = [];
for (var key in obj) {
if (has.call(obj, key)) keys.push(key);
}
return keys;
};
},{\\"jsonify\\":52}],52:[function(require,module,exports){
exports.parse = require(''./lib/parse'');
exports.stringify = require(''./lib/stringify'');
},{\\"./lib/parse\\":53,\\"./lib/stringify\\":54}],53:[function(require,module,exports){
var at, // The index of the current character
ch, // The current character
escapee = {
''\\"'':  ''\\"'',
''\\\\\\\\'': ''\\\\\\\\'',
''/'':  ''/'',
b:    ''\\\\b'',
f:    ''\\\\f'',
n:    ''\\\\n'',
r:    ''\\\\r'',
t:    ''\\\\t''
},
text,
error = function (m) {
// Call error when something is wrong.
throw {
name:    ''SyntaxError'',
message: m,
at:      at,
text:    text
};
},
next = function (c) {
// If a c parameter is provided, verify that it matches the current character.
if (c && c !== ch) {
error(\\"Expected ''\\" + c + \\"'' instead of ''\\" + ch + \\"''\\");
}
// Get the next character. When there are no more characters,
// return the empty string.
ch = text.charAt(at);
at += 1;
return ch;
},
number = function () {
// Parse a number value.
var number,
string = '''';
if (ch === ''-'') {
string = ''-'';
next(''-'');
}
while (ch >= ''0'' && ch <= ''9'') {
string += ch;
next();
}
if (ch === ''.'') {
string += ''.'';
while (next() && ch >= ''0'' && ch <= ''9'') {
string += ch;
}
}
if (ch === ''e'' || ch === ''E'') {
string += ch;
next();
if (ch === ''-'' || ch === ''+'') {
string += ch;
next();
}
while (ch >= ''0'' && ch <= ''9'') {
string += ch;
next();
}
}
number = +string;
if (!isFinite(number)) {
error(\\"Bad number\\");
} else {
return number;
}
},
string = function () {
// Parse a string value.
var hex,
i,
string = '''',
uffff;
// When parsing for string values, we must look for \\" and \\\\ characters.
if (ch === ''\\"'') {
while (next()) {
if (ch === ''\\"'') {
next();
return string;
} else if (ch === ''\\\\\\\\'') {
next();
if (ch === ''u'') {
uffff = 0;
for (i = 0; i < 4; i += 1) {
hex = parseInt(next(), 16);
if (!isFinite(hex)) {
break;
}
uffff = uffff * 16 + hex;
}
string += String.fromCharCode(uffff);
} else if (typeof escapee[ch] === ''string'') {
string += escapee[ch];
} else {
break;
}
} else {
string += ch;
}
}
}
error(\\"Bad string\\");
},
white = function () {
// Skip whitespace.
while (ch && ch <= '' '') {
next();
}
},
word = function () {
// true, false, or null.
switch (ch) {
case ''t'':
next(''t'');
next(''r'');
next(''u'');
next(''e'');
return true;
case ''f'':
next(''f'');
next(''a'');
next(''l'');
next(''s'');
next(''e'');
return false;
case ''n'':
next(''n'');
next(''u'');
next(''l'');
next(''l'');
return null;
}
error(\\"Unexpected ''\\" + ch + \\"''\\");
},
value,  // Place holder for the value function.
array = function () {
// Parse an array value.
var array = [];
if (ch === ''['') {
next(''['');
white();
if (ch === '']'') {
next('']'');
return array;   // empty array
}
while (ch) {
array.push(value());
white();
if (ch === '']'') {
next('']'');
return array;
}
next('','');
white();
}
}
error(\\"Bad array\\");
},
object = function () {
// Parse an object value.
var key,
object = {};
if (ch === ''{'') {
next(''{'');
white();
if (ch === ''}'') {
next(''}'');
return object;   // empty object
}
while (ch) {
key = string();
white();
next('':'');
if (Object.hasOwnProperty.call(object, key)) {
error(''Duplicate key \\"'' + key + ''\\"'');
}
object[key] = value();
white();
if (ch === ''}'') {
next(''}'');
return object;
}
next('','');
white();
}
}
error(\\"Bad object\\");
};
value = function () {
// Parse a JSON value. It could be an object, an array, a string, a number,
// or a word.
white();
switch (ch) {
case ''{'':
return object();
case ''['':
return array();
case ''\\"'':
return string();
case ''-'':
return number();
default:
return ch >= ''0'' && ch <= ''9'' ? number() : word();
}
};
// Return the json_parse function. It will have access to all of the above
// functions and variables.
module.exports = function (source, reviver) {
var result;
text = source;
at = 0;
ch = '' '';
result = value();
white();
if (ch) {
error(\\"Syntax error\\");
}
// If there is a reviver function, we recursively walk the new structure,
// passing each name/value pair to the reviver function for possible
// transformation, starting with a temporary root object that holds the result
// in an empty key. If there is not a reviver function, we simply return the
// result.
return typeof reviver === ''function'' ? (function walk(holder, key) {
var k, v, value = holder[key];
if (value && typeof value === ''object'') {
for (k in value) {
if (Object.prototype.hasOwnProperty.call(value, k)) {
v = walk(value, k);
if (v !== undefined) {
value[k] = v;
} else {
delete value[k];
}
}
}
}
return reviver.call(holder, key, value);
}({'''': result}, '''')) : result;
};
},{}],54:[function(require,module,exports){
var cx = /[\\\\u0000\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g,
escapable = /[\\\\\\\\\\\\\\"\\\\x00-\\\\x1f\\\\x7f-\\\\x9f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g,
gap,
indent,
meta = {    // table of character substitutions
''\\\\b'': ''\\\\\\\\b'',
''\\\\t'': ''\\\\\\\\t'',
''\\\\n'': ''\\\\\\\\n'',
''\\\\f'': ''\\\\\\\\f'',
''\\\\r'': ''\\\\\\\\r'',
''\\"'' : ''\\\\\\\\\\"'',
''\\\\\\\\'': ''\\\\\\\\\\\\\\\\''
},
rep;
function quote(string) {
// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.
escapable.lastIndex = 0;
return escapable.test(string) ? ''\\"'' + string.replace(escapable, function (a) {
var c = meta[a];
return typeof c === ''string'' ? c :
''\\\\\\\\u'' + (''0000'' + a.charCodeAt(0).toString(16)).slice(-4);
}) + ''\\"'' : ''\\"'' + string + ''\\"'';
}
function str(key, holder) {
// Produce a string from holder[key].
var i,          // The loop counter.
k,          // The member key.
v,          // The member value.
length,
mind = gap,
partial,
value = holder[key];
// If the value has a toJSON method, call it to obtain a replacement value.
if (value && typeof value === ''object'' &&
typeof value.toJSON === ''function'') {
value = value.toJSON(key);
}
// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.
if (typeof rep === ''function'') {
value = rep.call(holder, key, value);
}
// What happens next depends on the value''s type.
switch (typeof value) {
case ''string'':
return quote(value);
case ''number'':
// JSON numbers must be finite. Encode non-finite numbers as null.
return isFinite(value) ? String(value) : ''null'';
case ''boolean'':
case ''null'':
// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce ''null''. The case is included here in
// the remote chance that this gets fixed someday.
return String(value);
case ''object'':
if (!value) return ''null'';
gap += indent;
partial = [];
// Array.isArray
if (Object.prototype.toString.apply(value) === ''[object Array]'') {
length = value.length;
for (i = 0; i < length; i += 1) {
partial[i] = str(i, value) || ''null'';
}
// Join all of the elements together, separated with commas, and
// wrap them in brackets.
v = partial.length === 0 ? ''[]'' : gap ?
''[\\\\n'' + gap + partial.join('',\\\\n'' + gap) + ''\\\\n'' + mind + '']'' :
''['' + partial.join('','') + '']'';
gap = mind;
return v;
}
// If the replacer is an array, use it to select the members to be
// stringified.
if (rep && typeof rep === ''object'') {
length = rep.length;
for (i = 0; i < length; i += 1) {
k = rep[i];
if (typeof k === ''string'') {
v = str(k, value);
if (v) {
partial.push(quote(k) + (gap ? '': '' : '':'') + v);
}
}
}
}
else {
// Otherwise, iterate through all of the keys in the object.
for (k in value) {
if (Object.prototype.hasOwnProperty.call(value, k)) {
v = str(k, value);
if (v) {
partial.push(quote(k) + (gap ? '': '' : '':'') + v);
}
}
}
}
// Join all of the member texts together, separated with commas,
// and wrap them in braces.
v = partial.length === 0 ? ''{}'' : gap ?
''{\\\\n'' + gap + partial.join('',\\\\n'' + gap) + ''\\\\n'' + mind + ''}'' :
''{'' + partial.join('','') + ''}'';
gap = mind;
return v;
}
}
module.exports = function (value, replacer, space) {
var i;
gap = '''';
indent = '''';
// If the space parameter is a number, make an indent string containing that
// many spaces.
if (typeof space === ''number'') {
for (i = 0; i < space; i += 1) {
indent += '' '';
}
}
// If the space parameter is a string, it will be used as the indent string.
else if (typeof space === ''string'') {
indent = space;
}
// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.
rep = replacer;
if (replacer && typeof replacer !== ''function''
&& (typeof replacer !== ''object'' || typeof replacer.length !== ''number'')) {
throw new Error(''JSON.stringify'');
}
// Make a fake root object containing our value under the key of ''''.
// Return the result of stringifying the value.
return str('''', {'''': value});
};
},{}]},{},[7])(7)
});
/* plv8 bundle ends */
return module;
})();
');
COMMIT;"
`;

exports[`kitchen sink policies 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreatePolicyStmt": Object {
            "cmd_name": "delete",
            "permissive": true,
            "policy_name": "delete_user",
            "qual": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "id",
                        },
                      },
                    ],
                    "location": 80,
                  },
                },
                "location": 83,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "TypeCast": Object {
                    "arg": Object {
                      "FuncCall": Object {
                        "args": Array [
                          Object {
                            "A_Const": Object {
                              "location": 101,
                              "val": Object {
                                "String": Object {
                                  "str": "user.id",
                                },
                              },
                            },
                          },
                        ],
                        "funcname": Array [
                          Object {
                            "String": Object {
                              "str": "current_setting",
                            },
                          },
                        ],
                        "location": 85,
                      },
                    },
                    "location": 111,
                    "typeName": Object {
                      "TypeName": Object {
                        "location": 113,
                        "names": Array [
                          Object {
                            "String": Object {
                              "str": "uuid",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  },
                },
              },
            },
            "roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 54,
                  "rolename": "authenticated",
                  "roletype": 0,
                },
              },
            ],
            "table": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 29,
                "relname": "user",
                "relpersistence": "p",
                "schemaname": "users",
              },
            },
          },
        },
        "stmt_len": 119,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreatePolicyStmt": Object {
            "cmd_name": "delete",
            "permissive": true,
            "policy_name": "delete_user_no_to",
            "qual": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "id",
                        },
                      },
                    ],
                    "location": 191,
                  },
                },
                "location": 194,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "TypeCast": Object {
                    "arg": Object {
                      "FuncCall": Object {
                        "args": Array [
                          Object {
                            "A_Const": Object {
                              "location": 212,
                              "val": Object {
                                "String": Object {
                                  "str": "user.id",
                                },
                              },
                            },
                          },
                        ],
                        "funcname": Array [
                          Object {
                            "String": Object {
                              "str": "current_setting",
                            },
                          },
                        ],
                        "location": 196,
                      },
                    },
                    "location": 222,
                    "typeName": Object {
                      "TypeName": Object {
                        "location": 224,
                        "names": Array [
                          Object {
                            "String": Object {
                              "str": "uuid",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  },
                },
              },
            },
            "roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": -1,
                  "roletype": 3,
                },
              },
            ],
            "table": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 157,
                "relname": "user",
                "relpersistence": "p",
                "schemaname": "users",
              },
            },
          },
        },
        "stmt_len": 110,
        "stmt_location": 120,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreatePolicyStmt": Object {
            "cmd_name": "delete",
            "permissive": true,
            "policy_name": "delete_user_no_to",
            "roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": -1,
                  "roletype": 3,
                },
              },
            ],
            "table": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 268,
                "relname": "user",
                "relpersistence": "p",
                "schemaname": "users",
              },
            },
            "with_check": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "id",
                        },
                      },
                    ],
                    "location": 307,
                  },
                },
                "location": 310,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "TypeCast": Object {
                    "arg": Object {
                      "FuncCall": Object {
                        "args": Array [
                          Object {
                            "A_Const": Object {
                              "location": 328,
                              "val": Object {
                                "String": Object {
                                  "str": "user.id",
                                },
                              },
                            },
                          },
                        ],
                        "funcname": Array [
                          Object {
                            "String": Object {
                              "str": "current_setting",
                            },
                          },
                        ],
                        "location": 312,
                      },
                    },
                    "location": 338,
                    "typeName": Object {
                      "TypeName": Object {
                        "location": 340,
                        "names": Array [
                          Object {
                            "String": Object {
                              "str": "uuid",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 115,
        "stmt_location": 231,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreatePolicyStmt": Object {
            "cmd_name": "delete",
            "permissive": true,
            "policy_name": "delete_user",
            "qual": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "id",
                        },
                      },
                    ],
                    "location": 427,
                  },
                },
                "location": 431,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "TypeCast": Object {
                    "arg": Object {
                      "FuncCall": Object {
                        "args": Array [
                          Object {
                            "A_Const": Object {
                              "location": 450,
                              "val": Object {
                                "String": Object {
                                  "str": "user.id",
                                },
                              },
                            },
                          },
                        ],
                        "funcname": Array [
                          Object {
                            "String": Object {
                              "str": "current_setting",
                            },
                          },
                        ],
                        "location": 434,
                      },
                    },
                    "location": 460,
                    "typeName": Object {
                      "TypeName": Object {
                        "location": 462,
                        "names": Array [
                          Object {
                            "String": Object {
                              "str": "uuid",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  },
                },
              },
            },
            "roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 405,
                  "rolename": "authenticated",
                  "roletype": 0,
                },
              },
            ],
            "table": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 378,
                "relname": "user",
                "relpersistence": "p",
                "schemaname": "users",
              },
            },
          },
        },
        "stmt_len": 121,
        "stmt_location": 347,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreatePolicyStmt": Object {
            "cmd_name": "select",
            "permissive": true,
            "policy_name": "select_user",
            "qual": Object {
              "TypeCast": Object {
                "arg": Object {
                  "A_Const": Object {
                    "location": 540,
                    "val": Object {
                      "String": Object {
                        "str": "t",
                      },
                    },
                  },
                },
                "location": -1,
                "typeName": Object {
                  "TypeName": Object {
                    "location": -1,
                    "names": Array [
                      Object {
                        "String": Object {
                          "str": "pg_catalog",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "bool",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
            },
            "roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 526,
                  "roletype": 3,
                },
              },
            ],
            "table": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 499,
                "relname": "user",
                "relpersistence": "p",
                "schemaname": "users",
              },
            },
          },
        },
        "stmt_len": 76,
        "stmt_location": 469,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreatePolicyStmt": Object {
            "cmd_name": "delete",
            "permissive": true,
            "policy_name": "delete_own",
            "qual": Object {
              "A_Expr": Object {
                "kind": 1,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "group_id",
                        },
                      },
                    ],
                    "location": 621,
                  },
                },
                "location": 630,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "otherschema",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "my_policy_fn",
                        },
                      },
                    ],
                    "location": 637,
                  },
                },
              },
            },
            "roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 607,
                  "roletype": 3,
                },
              },
            ],
            "table": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 576,
                "relname": "mytable",
                "relpersistence": "p",
                "schemaname": "myschema",
              },
            },
          },
        },
        "stmt_len": 119,
        "stmt_location": 546,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreatePolicyStmt": Object {
            "cmd_name": "all",
            "permissive": true,
            "policy_name": "insert_own",
            "roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 723,
                  "roletype": 3,
                },
              },
            ],
            "table": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 695,
                "relname": "mytable",
                "relpersistence": "p",
                "schemaname": "myschema",
              },
            },
            "with_check": Object {
              "A_Expr": Object {
                "kind": 1,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "group_id",
                        },
                      },
                    ],
                    "location": 742,
                  },
                },
                "location": 751,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "otherschema",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "my_policy_fn",
                        },
                      },
                    ],
                    "location": 758,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 120,
        "stmt_location": 666,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreatePolicyStmt": Object {
            "cmd_name": "select",
            "permissive": true,
            "policy_name": "select_any",
            "qual": Object {
              "TypeCast": Object {
                "arg": Object {
                  "A_Const": Object {
                    "location": 861,
                    "val": Object {
                      "String": Object {
                        "str": "t",
                      },
                    },
                  },
                },
                "location": -1,
                "typeName": Object {
                  "TypeName": Object {
                    "location": -1,
                    "names": Array [
                      Object {
                        "String": Object {
                          "str": "pg_catalog",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "bool",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
            },
            "roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 847,
                  "roletype": 3,
                },
              },
            ],
            "table": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 816,
                "relname": "mytable",
                "relpersistence": "p",
                "schemaname": "myschema",
              },
            },
          },
        },
        "stmt_len": 79,
        "stmt_location": 787,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreatePolicyStmt": Object {
            "cmd_name": "update",
            "permissive": true,
            "policy_name": "update_own",
            "qual": Object {
              "A_Expr": Object {
                "kind": 1,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "group_id",
                        },
                      },
                    ],
                    "location": 941,
                  },
                },
                "location": 950,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "FuncCall": Object {
                    "funcname": Array [
                      Object {
                        "String": Object {
                          "str": "otherschema",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "my_policy_fn",
                        },
                      },
                    ],
                    "location": 957,
                  },
                },
              },
            },
            "roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 927,
                  "roletype": 3,
                },
              },
            ],
            "table": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 896,
                "relname": "mytable",
                "relpersistence": "p",
                "schemaname": "myschema",
              },
            },
          },
        },
        "stmt_len": 118,
        "stmt_location": 867,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink policies 2`] = `
"CREATE POLICY delete_user ON users.\\"user\\" FOR DELETE TO authenticated USING ( ((id) = (current_setting('user.id')::uuid)) );
CREATE POLICY delete_user_no_to ON users.\\"user\\" FOR DELETE TO PUBLIC USING ( ((id) = (current_setting('user.id')::uuid)) );
CREATE POLICY delete_user_no_to ON users.\\"user\\" FOR DELETE TO PUBLIC WITH CHECK ( ((id) = (current_setting('user.id')::uuid)) );
CREATE POLICY delete_user ON users.\\"user\\" FOR DELETE TO authenticated USING ( ((id) = (current_setting('user.id')::uuid)) );
CREATE POLICY select_user ON users.\\"user\\" FOR SELECT TO PUBLIC USING ( (TRUE) );
CREATE POLICY delete_own ON myschema.mytable FOR DELETE TO PUBLIC USING ( group_id = ANY (otherschema.my_policy_fn()) );
CREATE POLICY insert_own ON myschema.mytable FOR ALL TO PUBLIC WITH CHECK ( group_id = ANY (otherschema.my_policy_fn()) );
CREATE POLICY select_any ON myschema.mytable FOR SELECT TO PUBLIC USING ( (TRUE) );
CREATE POLICY update_own ON myschema.mytable FOR UPDATE TO PUBLIC USING ( group_id = ANY (otherschema.my_policy_fn()) );"
`;

exports[`kitchen sink roles create 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateRoleStmt": Object {
            "role": "app_anonymous",
            "stmt_type": 0,
          },
        },
        "stmt_len": 25,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateRoleStmt": Object {
            "role": "app_authenticated",
            "stmt_type": 0,
          },
        },
        "stmt_len": 30,
        "stmt_location": 26,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateRoleStmt": Object {
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 1,
                    },
                  },
                  "defaction": 0,
                  "defname": "canlogin",
                  "location": 79,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "A_Const": Object {
                      "location": 94,
                      "val": Object {
                        "String": Object {
                          "str": "xyz",
                        },
                      },
                    },
                  },
                  "defaction": 0,
                  "defname": "password",
                  "location": 85,
                },
              },
            ],
            "role": "app_user",
            "stmt_type": 0,
          },
        },
        "stmt_len": 42,
        "stmt_location": 57,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateRoleStmt": Object {
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 1,
                    },
                  },
                  "defaction": 0,
                  "defname": "canlogin",
                  "location": 126,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "A_Const": Object {
                      "location": 141,
                      "val": Object {
                        "String": Object {
                          "str": "jw8s0F4",
                        },
                      },
                    },
                  },
                  "defaction": 0,
                  "defname": "password",
                  "location": 132,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "2005-01-01",
                    },
                  },
                  "defaction": 0,
                  "defname": "validUntil",
                  "location": 151,
                },
              },
            ],
            "role": "miriam",
            "stmt_type": 0,
          },
        },
        "stmt_len": 75,
        "stmt_location": 100,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateRoleStmt": Object {
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 1,
                    },
                  },
                  "defaction": 0,
                  "defname": "canlogin",
                  "location": 202,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "A_Const": Object {
                      "location": 217,
                      "val": Object {
                        "String": Object {
                          "str": "jw8s0F4",
                        },
                      },
                    },
                  },
                  "defaction": 0,
                  "defname": "password",
                  "location": 208,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 1,
                    },
                  },
                  "defaction": 0,
                  "defname": "createdb",
                  "location": 227,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 1,
                    },
                  },
                  "defaction": 0,
                  "defname": "createrole",
                  "location": 236,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 1,
                    },
                  },
                  "defaction": 0,
                  "defname": "inherit",
                  "location": 247,
                },
              },
            ],
            "role": "admin1",
            "stmt_type": 0,
          },
        },
        "stmt_len": 78,
        "stmt_location": 176,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateRoleStmt": Object {
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 0,
                    },
                  },
                  "defaction": 0,
                  "defname": "canlogin",
                  "location": 281,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 0,
                    },
                  },
                  "defaction": 0,
                  "defname": "createdb",
                  "location": 289,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 0,
                    },
                  },
                  "defaction": 0,
                  "defname": "createrole",
                  "location": 300,
                },
              },
            ],
            "role": "admin2",
            "stmt_type": 0,
          },
        },
        "stmt_len": 57,
        "stmt_location": 255,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateRoleStmt": Object {
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "RoleSpec": Object {
                        "location": 344,
                        "rolename": "app_authenticated",
                        "roletype": 0,
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "adminmembers",
                  "location": 338,
                },
              },
            ],
            "role": "authy",
            "stmt_type": 0,
          },
        },
        "stmt_len": 48,
        "stmt_location": 313,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink roles create 2`] = `
"CREATE ROLE \\"app_anonymous\\";
CREATE ROLE \\"app_authenticated\\";
CREATE ROLE \\"app_user\\" WITH LOGIN PASSWORD 'xyz';
CREATE ROLE \\"miriam\\" WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01';
CREATE ROLE \\"admin1\\" WITH LOGIN PASSWORD 'jw8s0F4' CREATEDB CREATEROLE INHERIT;
CREATE ROLE \\"admin2\\" WITH NOLOGIN NOCREATEDB NOCREATEROLE;
CREATE ROLE \\"authy\\" WITH ADMIN app_authenticated;"
`;

exports[`kitchen sink roles grants 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "GrantRoleStmt": Object {
            "behavior": 0,
            "granted_roles": Array [
              Object {
                "AccessPriv": Object {
                  "priv_name": "app_authenticated",
                },
              },
            ],
            "grantee_roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 81,
                  "rolename": "app_user",
                  "roletype": 0,
                },
              },
            ],
            "is_grant": true,
          },
        },
        "stmt_len": 89,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "GrantRoleStmt": Object {
            "behavior": 0,
            "granted_roles": Array [
              Object {
                "AccessPriv": Object {
                  "priv_name": "app_authenticated",
                },
              },
              Object {
                "AccessPriv": Object {
                  "priv_name": "app_anonymous",
                },
              },
            ],
            "grantee_roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 133,
                  "rolename": "app_user",
                  "roletype": 0,
                },
              },
            ],
            "is_grant": true,
          },
        },
        "stmt_len": 51,
        "stmt_location": 90,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "GrantRoleStmt": Object {
            "behavior": 0,
            "granted_roles": Array [
              Object {
                "AccessPriv": Object {
                  "priv_name": "app_authenticated",
                },
              },
              Object {
                "AccessPriv": Object {
                  "priv_name": "app_anonymous",
                },
              },
            ],
            "grantee_roles": Array [
              Object {
                "RoleSpec": Object {
                  "location": 186,
                  "rolename": "app_user",
                  "roletype": 0,
                },
              },
              Object {
                "RoleSpec": Object {
                  "location": 196,
                  "rolename": "super_app_user",
                  "roletype": 0,
                },
              },
            ],
            "is_grant": true,
          },
        },
        "stmt_len": 68,
        "stmt_location": 142,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink roles grants 2`] = `
"GRANT APP_AUTHENTICATED TO app_user;
GRANT APP_AUTHENTICATED, APP_ANONYMOUS TO app_user;
GRANT APP_AUTHENTICATED, APP_ANONYMOUS TO app_user, super_app_user;"
`;

exports[`kitchen sink rules create 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "RuleStmt": Object {
            "event": 3,
            "instead": true,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 52,
                "relname": "collections",
                "relpersistence": "p",
                "schemaname": "dbs",
              },
            },
            "rulename": "collections_ins_protect",
          },
        },
        "stmt_len": 94,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "RuleStmt": Object {
            "event": 2,
            "instead": true,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 153,
                "relname": "collections",
                "relpersistence": "p",
                "schemaname": "dbs",
              },
            },
            "rulename": "collections_upd_protect",
          },
        },
        "stmt_len": 108,
        "stmt_location": 95,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "RuleStmt": Object {
            "event": 4,
            "instead": true,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 258,
                "relname": "collections",
                "relpersistence": "p",
                "schemaname": "dbs",
              },
            },
            "rulename": "collections_del_protect",
          },
        },
        "stmt_len": 96,
        "stmt_location": 204,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "RuleStmt": Object {
            "actions": Array [
              Object {
                "UpdateStmt": Object {
                  "relation": Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 379,
                      "relname": "shoelace_data",
                      "relpersistence": "p",
                    },
                  },
                  "targetList": Array [
                    Object {
                      "ResTarget": Object {
                        "location": 404,
                        "name": "sl_name",
                        "val": Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "new",
                                },
                              },
                              Object {
                                "String": Object {
                                  "str": "sl_name",
                                },
                              },
                            ],
                            "location": 414,
                          },
                        },
                      },
                    },
                    Object {
                      "ResTarget": Object {
                        "location": 438,
                        "name": "sl_avail",
                        "val": Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "new",
                                },
                              },
                              Object {
                                "String": Object {
                                  "str": "sl_avail",
                                },
                              },
                            ],
                            "location": 449,
                          },
                        },
                      },
                    },
                    Object {
                      "ResTarget": Object {
                        "location": 474,
                        "name": "sl_color",
                        "val": Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "new",
                                },
                              },
                              Object {
                                "String": Object {
                                  "str": "sl_color",
                                },
                              },
                            ],
                            "location": 485,
                          },
                        },
                      },
                    },
                    Object {
                      "ResTarget": Object {
                        "location": 510,
                        "name": "sl_len",
                        "val": Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "new",
                                },
                              },
                              Object {
                                "String": Object {
                                  "str": "sl_len",
                                },
                              },
                            ],
                            "location": 519,
                          },
                        },
                      },
                    },
                    Object {
                      "ResTarget": Object {
                        "location": 542,
                        "name": "sl_unit",
                        "val": Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "String": Object {
                                  "str": "new",
                                },
                              },
                              Object {
                                "String": Object {
                                  "str": "sl_unit",
                                },
                              },
                            ],
                            "location": 552,
                          },
                        },
                      },
                    },
                  ],
                  "whereClause": Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "sl_name",
                              },
                            },
                          ],
                          "location": 575,
                        },
                      },
                      "location": 583,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "old",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "sl_name",
                              },
                            },
                          ],
                          "location": 585,
                        },
                      },
                    },
                  },
                },
              },
            ],
            "event": 2,
            "instead": true,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 344,
                "relname": "shoelace",
                "relpersistence": "p",
              },
            },
            "rulename": "shoelace_upd",
          },
        },
        "stmt_len": 295,
        "stmt_location": 301,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "RuleStmt": Object {
            "actions": Array [
              Object {
                "DeleteStmt": Object {
                  "relation": Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 680,
                      "relname": "shoelace_data",
                      "relpersistence": "p",
                    },
                  },
                  "whereClause": Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "sl_name",
                              },
                            },
                          ],
                          "location": 705,
                        },
                      },
                      "location": 713,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "old",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "sl_name",
                              },
                            },
                          ],
                          "location": 715,
                        },
                      },
                    },
                  },
                },
              },
            ],
            "event": 4,
            "instead": true,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 640,
                "relname": "shoelace",
                "relpersistence": "p",
              },
            },
            "rulename": "shoelace_del",
          },
        },
        "stmt_len": 129,
        "stmt_location": 597,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "RuleStmt": Object {
            "actions": Array [
              Object {
                "SelectStmt": Object {
                  "fromClause": Array [
                    Object {
                      "RangeVar": Object {
                        "inh": true,
                        "location": 813,
                        "relname": "t1",
                        "relpersistence": "p",
                      },
                    },
                  ],
                  "op": 0,
                  "targetList": Array [
                    Object {
                      "ResTarget": Object {
                        "location": 806,
                        "val": Object {
                          "ColumnRef": Object {
                            "fields": Array [
                              Object {
                                "A_Star": Object {},
                              },
                            ],
                            "location": 806,
                          },
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "event": 1,
            "instead": true,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 772,
                "relname": "t2",
                "relpersistence": "p",
              },
            },
            "rulename": "_RETURN",
          },
        },
        "stmt_len": 88,
        "stmt_location": 727,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "RuleStmt": Object {
            "actions": Array [
              Object {
                "InsertStmt": Object {
                  "override": 0,
                  "relation": Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 931,
                      "relname": "shoelace_log",
                      "relpersistence": "p",
                    },
                  },
                  "selectStmt": Object {
                    "SelectStmt": Object {
                      "op": 0,
                      "valuesLists": Array [
                        Array [
                          Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "new",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "sl_name",
                                  },
                                },
                              ],
                              "location": 989,
                            },
                          },
                          Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "new",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "sl_avail",
                                  },
                                },
                              ],
                              "location": 1038,
                            },
                          },
                          Object {
                            "SQLValueFunction": Object {
                              "location": 1088,
                              "op": 10,
                              "typmod": -1,
                            },
                          },
                          Object {
                            "SQLValueFunction": Object {
                              "location": 1138,
                              "op": 3,
                              "typmod": -1,
                            },
                          },
                        ],
                      ],
                    },
                  },
                },
              },
            ],
            "event": 2,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 859,
                "relname": "shoelace_data",
                "relpersistence": "p",
              },
            },
            "rulename": "log_shoelace",
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "new",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "sl_avail",
                        },
                      },
                    ],
                    "location": 883,
                  },
                },
                "location": 896,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "<>",
                    },
                  },
                ],
                "rexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "old",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "sl_avail",
                        },
                      },
                    ],
                    "location": 899,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 373,
        "stmt_location": 816,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "RuleStmt": Object {
            "actions": Array [
              Object {
                "InsertStmt": Object {
                  "override": 0,
                  "relation": Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 1273,
                      "relname": "shoelace_data",
                      "relpersistence": "p",
                    },
                  },
                  "selectStmt": Object {
                    "SelectStmt": Object {
                      "op": 0,
                      "valuesLists": Array [
                        Array [
                          Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "new",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "sl_name",
                                  },
                                },
                              ],
                              "location": 1307,
                            },
                          },
                          Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "new",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "sl_avail",
                                  },
                                },
                              ],
                              "location": 1331,
                            },
                          },
                          Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "new",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "sl_color",
                                  },
                                },
                              ],
                              "location": 1356,
                            },
                          },
                          Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "new",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "sl_len",
                                  },
                                },
                              ],
                              "location": 1381,
                            },
                          },
                          Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "new",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "sl_unit",
                                  },
                                },
                              ],
                              "location": 1404,
                            },
                          },
                        ],
                      ],
                    },
                  },
                },
              },
            ],
            "event": 3,
            "instead": true,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1233,
                "relname": "shoelace",
                "relpersistence": "p",
              },
            },
            "rulename": "shoelace_ins",
          },
        },
        "stmt_len": 231,
        "stmt_location": 1190,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink rules create 2`] = `
"CREATE RULE collections_ins_protect AS ON INSERT TO dbs.collections DO INSTEAD NOTHING;
CREATE RULE collections_upd_protect AS ON UPDATE TO dbs.collections DO INSTEAD NOTHING;
CREATE RULE collections_del_protect AS ON DELETE TO dbs.collections DO INSTEAD NOTHING;
CREATE RULE shoelace_upd AS ON UPDATE TO shoelace DO INSTEAD UPDATE shoelace_data SET sl_name = new.sl_name,sl_avail = new.sl_avail,sl_color = new.sl_color,sl_len = new.sl_len,sl_unit = new.sl_unit WHERE ((sl_name) = (old.sl_name));
CREATE RULE shoelace_del AS ON DELETE TO shoelace DO INSTEAD  DELETE FROM shoelace_data WHERE ((sl_name) = (old.sl_name));
CREATE RULE \\"_RETURN\\" AS ON SELECT TO t2 DO INSTEAD SELECT * FROM t1;
CREATE RULE log_shoelace AS ON UPDATE TO shoelace_data WHERE ((new.sl_avail) <> (old.sl_avail)) DO INSERT INTO shoelace_log VALUES (new.sl_name, new.sl_avail, CURRENT_USER, CURRENT_TIMESTAMP);
CREATE RULE shoelace_ins AS ON INSERT TO shoelace DO INSTEAD INSERT INTO shoelace_data VALUES (new.sl_name, new.sl_avail, new.sl_color, new.sl_len, new.sl_unit);"
`;

exports[`kitchen sink sequences 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateSeqStmt": Object {
            "sequence": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 16,
                "relname": "bar",
                "relpersistence": "p",
                "schemaname": "foo",
              },
            },
          },
        },
        "stmt_len": 23,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateSeqStmt": Object {
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 5,
                    },
                  },
                  "defaction": 0,
                  "defname": "increment",
                  "location": 53,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 100,
                    },
                  },
                  "defaction": 0,
                  "defname": "start",
                  "location": 65,
                },
              },
            ],
            "sequence": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 42,
                "relname": "mysequence",
                "relpersistence": "p",
              },
            },
          },
        },
        "stmt_len": 50,
        "stmt_location": 24,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateSeqStmt": Object {
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": -1,
                    },
                  },
                  "defaction": 0,
                  "defname": "increment",
                  "location": 99,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 1,
                    },
                  },
                  "defaction": 0,
                  "defname": "minvalue",
                  "location": 112,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 3,
                    },
                  },
                  "defaction": 0,
                  "defname": "maxvalue",
                  "location": 124,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 3,
                    },
                  },
                  "defaction": 0,
                  "defname": "start",
                  "location": 135,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 1,
                    },
                  },
                  "defaction": 0,
                  "defname": "cycle",
                  "location": 143,
                },
              },
            ],
            "sequence": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 93,
                "relname": "three",
                "relpersistence": "p",
              },
            },
          },
        },
        "stmt_len": 73,
        "stmt_location": 75,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateSeqStmt": Object {
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": -1,
                    },
                  },
                  "defaction": 0,
                  "defname": "increment",
                  "location": 174,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 1,
                    },
                  },
                  "defaction": 0,
                  "defname": "minvalue",
                  "location": 187,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 3,
                    },
                  },
                  "defaction": 0,
                  "defname": "maxvalue",
                  "location": 199,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 3,
                    },
                  },
                  "defaction": 0,
                  "defname": "start",
                  "location": 210,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "Integer": Object {
                      "ival": 0,
                    },
                  },
                  "defaction": 0,
                  "defname": "cycle",
                  "location": 218,
                },
              },
            ],
            "sequence": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 167,
                "relname": "three3",
                "relpersistence": "p",
              },
            },
          },
        },
        "stmt_len": 77,
        "stmt_location": 149,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink sequences 2`] = `
"CREATE SEQUENCE foo.bar;
CREATE SEQUENCE mysequence increment 5 start 100;
CREATE SEQUENCE three increment -1 minvalue 1 maxvalue 3 start 3 CYCLE;
CREATE SEQUENCE three3 increment -1 minvalue 1 maxvalue 3 start 3 NO CYCLE;"
`;

exports[`kitchen sink set 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "kind": 2,
            "name": "var",
          },
        },
        "stmt_len": 20,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "kind": 4,
            "name": "client_min_messages",
          },
        },
        "stmt_len": 27,
        "stmt_location": 21,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "args": Array [
              Object {
                "A_Const": Object {
                  "location": 69,
                  "val": Object {
                    "String": Object {
                      "str": "alt_nsp1",
                    },
                  },
                },
              },
              Object {
                "A_Const": Object {
                  "location": 79,
                  "val": Object {
                    "String": Object {
                      "str": "public",
                    },
                  },
                },
              },
            ],
            "kind": 0,
            "name": "search_path",
          },
        },
        "stmt_len": 36,
        "stmt_location": 49,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "args": Array [
              Object {
                "A_Const": Object {
                  "location": 114,
                  "val": Object {
                    "String": Object {
                      "str": "regtest_alter_user1",
                    },
                  },
                },
              },
            ],
            "kind": 0,
            "name": "session_authorization",
          },
        },
        "stmt_len": 47,
        "stmt_location": 86,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "args": Array [
              Object {
                "A_Const": Object {
                  "location": 156,
                  "val": Object {
                    "String": Object {
                      "str": "UNICODE",
                    },
                  },
                },
              },
            ],
            "kind": 0,
            "name": "client_encoding",
          },
        },
        "stmt_len": 31,
        "stmt_location": 134,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "args": Array [
              Object {
                "A_Const": Object {
                  "location": 191,
                  "val": Object {
                    "String": Object {
                      "str": "UNICODE",
                    },
                  },
                },
              },
            ],
            "kind": 0,
            "name": "client_encoding",
          },
        },
        "stmt_len": 34,
        "stmt_location": 166,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "args": Array [
              Object {
                "A_Const": Object {
                  "location": 227,
                  "val": Object {
                    "String": Object {
                      "str": "notice",
                    },
                  },
                },
              },
            ],
            "kind": 0,
            "name": "client_min_messages",
          },
        },
        "stmt_len": 32,
        "stmt_location": 201,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "kind": 4,
            "name": "session_authorization",
          },
        },
        "stmt_len": 29,
        "stmt_location": 234,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink set 2`] = `
"SET var FROM CURRENT;
RESET client_min_messages;
SET search_path = 'alt_nsp1', 'public';
SET session_authorization = 'regtest_alter_user1';
SET client_encoding = 'UNICODE';
SET client_encoding = 'UNICODE';
SET client_min_messages = 'notice';
RESET session_authorization;"
`;

exports[`kitchen sink tables check 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 13,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "is_local": true,
                  "location": 28,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 39,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 52,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 57,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 4,
                        "initially_valid": true,
                        "location": 81,
                        "raw_expr": Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "price",
                                    },
                                  },
                                ],
                                "location": 88,
                              },
                            },
                            "location": 94,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": ">",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "A_Const": Object {
                                "location": 96,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 0,
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 67,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 73,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 100,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 115,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "is_local": true,
                  "location": 130,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 141,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 154,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 159,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "conname": "positive_price",
                        "contype": 4,
                        "initially_valid": true,
                        "location": 183,
                        "raw_expr": Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "price",
                                    },
                                  },
                                ],
                                "location": 216,
                              },
                            },
                            "location": 222,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": ">",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "A_Const": Object {
                                "location": 224,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 0,
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 169,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 175,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 127,
        "stmt_location": 101,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 243,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "is_local": true,
                  "location": 258,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 269,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 282,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 287,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 4,
                        "initially_valid": true,
                        "location": 311,
                        "raw_expr": Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "price",
                                    },
                                  },
                                ],
                                "location": 318,
                              },
                            },
                            "location": 324,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": ">",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "A_Const": Object {
                                "location": 326,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 0,
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 297,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 303,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "discounted_price",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 4,
                        "initially_valid": true,
                        "location": 359,
                        "raw_expr": Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "discounted_price",
                                    },
                                  },
                                ],
                                "location": 366,
                              },
                            },
                            "location": 383,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": ">",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "A_Const": Object {
                                "location": 385,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 0,
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 334,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 351,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 4,
                  "initially_valid": true,
                  "location": 393,
                  "raw_expr": Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "price",
                              },
                            },
                          ],
                          "location": 400,
                        },
                      },
                      "location": 406,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": ">",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "discounted_price",
                              },
                            },
                          ],
                          "location": 408,
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 198,
        "stmt_location": 229,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 442,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "is_local": true,
                  "location": 457,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 468,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 481,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 486,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 4,
                        "initially_valid": true,
                        "location": 510,
                        "raw_expr": Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "price",
                                    },
                                  },
                                ],
                                "location": 517,
                              },
                            },
                            "location": 523,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": ">",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "A_Const": Object {
                                "location": 525,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 0,
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 496,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 502,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "discounted_price",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "conname": "check_price",
                        "contype": 4,
                        "initially_valid": true,
                        "location": 558,
                        "raw_expr": Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "discounted_price",
                                    },
                                  },
                                ],
                                "location": 588,
                              },
                            },
                            "location": 605,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": ">",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "A_Const": Object {
                                "location": 607,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 0,
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 533,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 550,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 4,
                  "initially_valid": true,
                  "location": 615,
                  "raw_expr": Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "price",
                              },
                            },
                          ],
                          "location": 622,
                        },
                      },
                      "location": 628,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": ">",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "discounted_price",
                              },
                            },
                          ],
                          "location": 630,
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 221,
        "stmt_location": 428,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 665,
                "relname": "boomin",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "d",
                  "is_local": true,
                  "location": 673,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 675,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "date",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 4,
                  "is_no_inherit": true,
                  "location": 681,
                  "raw_expr": Object {
                    "TypeCast": Object {
                      "arg": Object {
                        "A_Const": Object {
                          "location": 688,
                          "val": Object {
                            "String": Object {
                              "str": "f",
                            },
                          },
                        },
                      },
                      "location": -1,
                      "typeName": Object {
                        "TypeName": Object {
                          "location": -1,
                          "names": Array [
                            Object {
                              "String": Object {
                                "str": "pg_catalog",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "bool",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                  },
                  "skip_validation": true,
                },
              },
            ],
          },
        },
        "stmt_len": 66,
        "stmt_location": 650,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 731,
                "relname": "boomin",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "d",
                  "is_local": true,
                  "location": 739,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 741,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "date",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 4,
                  "is_no_inherit": true,
                  "location": 747,
                  "raw_expr": Object {
                    "TypeCast": Object {
                      "arg": Object {
                        "A_Const": Object {
                          "location": 754,
                          "val": Object {
                            "String": Object {
                              "str": "t",
                            },
                          },
                        },
                      },
                      "location": -1,
                      "typeName": Object {
                        "TypeName": Object {
                          "location": -1,
                          "names": Array [
                            Object {
                              "String": Object {
                                "str": "pg_catalog",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "bool",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                  },
                  "skip_validation": true,
                },
              },
            ],
          },
        },
        "stmt_len": 64,
        "stmt_location": 717,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "contype": 4,
                      "location": 813,
                      "raw_expr": Object {
                        "A_Expr": Object {
                          "kind": 11,
                          "lexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "d",
                                  },
                                },
                              ],
                              "location": 820,
                            },
                          },
                          "location": 822,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": "BETWEEN",
                              },
                            },
                          ],
                          "rexpr": Array [
                            Object {
                              "TypeCast": Object {
                                "arg": Object {
                                  "A_Const": Object {
                                    "location": 830,
                                    "val": Object {
                                      "String": Object {
                                        "str": "2010-01-01",
                                      },
                                    },
                                  },
                                },
                                "location": 842,
                                "typeName": Object {
                                  "TypeName": Object {
                                    "location": 844,
                                    "names": Array [
                                      Object {
                                        "String": Object {
                                          "str": "date",
                                        },
                                      },
                                    ],
                                    "typemod": -1,
                                  },
                                },
                              },
                            },
                            Object {
                              "TypeCast": Object {
                                "arg": Object {
                                  "A_Const": Object {
                                    "location": 853,
                                    "val": Object {
                                      "String": Object {
                                        "str": "2010-12-31",
                                      },
                                    },
                                  },
                                },
                                "location": 865,
                                "typeName": Object {
                                  "TypeName": Object {
                                    "location": 867,
                                    "names": Array [
                                      Object {
                                        "String": Object {
                                          "str": "date",
                                        },
                                      },
                                    ],
                                    "typemod": -1,
                                  },
                                },
                              },
                            },
                          ],
                        },
                      },
                      "skip_validation": true,
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 796,
                "relname": "checkitout",
                "relpersistence": "p",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 100,
        "stmt_location": 782,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "contype": 4,
                      "location": 915,
                      "raw_expr": Object {
                        "A_Expr": Object {
                          "kind": 12,
                          "lexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "d",
                                  },
                                },
                              ],
                              "location": 922,
                            },
                          },
                          "location": 924,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": "NOT BETWEEN",
                              },
                            },
                          ],
                          "rexpr": Array [
                            Object {
                              "TypeCast": Object {
                                "arg": Object {
                                  "A_Const": Object {
                                    "location": 936,
                                    "val": Object {
                                      "String": Object {
                                        "str": "2010-01-01",
                                      },
                                    },
                                  },
                                },
                                "location": 948,
                                "typeName": Object {
                                  "TypeName": Object {
                                    "location": 950,
                                    "names": Array [
                                      Object {
                                        "String": Object {
                                          "str": "date",
                                        },
                                      },
                                    ],
                                    "typemod": -1,
                                  },
                                },
                              },
                            },
                            Object {
                              "TypeCast": Object {
                                "arg": Object {
                                  "A_Const": Object {
                                    "location": 959,
                                    "val": Object {
                                      "String": Object {
                                        "str": "2010-12-31",
                                      },
                                    },
                                  },
                                },
                                "location": 971,
                                "typeName": Object {
                                  "TypeName": Object {
                                    "location": 973,
                                    "names": Array [
                                      Object {
                                        "String": Object {
                                          "str": "date",
                                        },
                                      },
                                    ],
                                    "typemod": -1,
                                  },
                                },
                              },
                            },
                          ],
                        },
                      },
                      "skip_validation": true,
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 897,
                "relname": "checkitout2",
                "relpersistence": "p",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 105,
        "stmt_location": 883,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "inhRelations": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 1033,
                  "relname": "atacc1",
                  "relpersistence": "p",
                },
              },
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 1041,
                  "relname": "atacc2",
                  "relpersistence": "p",
                },
              },
            ],
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1004,
                "relname": "atacc3",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "test3",
                  "is_local": true,
                  "location": 1012,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 1018,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 59,
        "stmt_location": 989,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables check 2`] = `
"CREATE TABLE products (
product_no int,
name text,
price numeric CHECK ( ((price) > (0)) )
);
CREATE TABLE products (
product_no int,
name text,
price numeric CONSTRAINT positive_price CHECK ( ((price) > (0)) )
);
CREATE TABLE products (
product_no int,
name text,
price numeric CHECK ( ((price) > (0)) ),
discounted_price numeric CHECK ( ((discounted_price) > (0)) ),
CHECK ( ((price) > (discounted_price)) )
);
CREATE TABLE products (
product_no int,
name text,
price numeric CHECK ( ((price) > (0)) ),
discounted_price numeric CONSTRAINT check_price CHECK ( ((discounted_price) > (0)) ),
CHECK ( ((price) > (discounted_price)) )
);
CREATE TABLE boomin (
d date,
CHECK ( (FALSE) ) NO INHERIT NOT VALID
);
CREATE TABLE boomin (
d date,
CHECK ( (TRUE) ) NO INHERIT NOT VALID
);
ALTER TABLE checkitout ADD CHECK ( d BETWEEN '2010-01-01'::date AND '2010-12-31'::date ) NOT VALID;
ALTER TABLE checkitout2 ADD CHECK ( d NOT BETWEEN '2010-01-01'::date AND '2010-12-31'::date ) NOT VALID;
CREATE TABLE atacc3 (
test3 int
) INHERITS ( atacc1, atacc2 );"
`;

exports[`kitchen sink tables custom 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "AlterTableStmt": Object {
            "cmds": Array [
              Object {
                "AlterTableCmd": Object {
                  "behavior": 0,
                  "def": Object {
                    "Constraint": Object {
                      "conname": "fk_myschema_role_actor_id",
                      "contype": 8,
                      "fk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "actor_id",
                          },
                        },
                      ],
                      "fk_del_action": "c",
                      "fk_matchtype": "s",
                      "fk_upd_action": "a",
                      "initially_valid": true,
                      "location": 34,
                      "pk_attrs": Array [
                        Object {
                          "String": Object {
                            "str": "id",
                          },
                        },
                      ],
                      "pktable": Object {
                        "RangeVar": Object {
                          "inh": true,
                          "location": 113,
                          "relname": "actor",
                          "relpersistence": "p",
                          "schemaname": "actors",
                        },
                      },
                    },
                  },
                  "subtype": 14,
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 12,
                "relname": "role",
                "relpersistence": "p",
                "schemaname": "myschema",
              },
            },
            "relkind": 37,
          },
        },
        "stmt_len": 152,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 168,
                "relname": "circles",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "c",
                  "is_local": true,
                  "location": 182,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 184,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "circle",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "access_method": "gist",
                  "contype": 7,
                  "exclusions": Array [
                    Array [
                      Object {
                        "IndexElem": Object {
                          "name": "c",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                      Array [
                        Object {
                          "String": Object {
                            "str": "&&",
                          },
                        },
                      ],
                    ],
                  ],
                  "location": 196,
                },
              },
            ],
          },
        },
        "stmt_len": 75,
        "stmt_location": 153,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 244,
                "relname": "actor_info",
                "relpersistence": "p",
                "schemaname": "actors_private",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "actor_id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 290,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "c",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 302,
                        "pk_attrs": Array [
                          Object {
                            "String": Object {
                              "str": "id",
                            },
                          },
                        ],
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 313,
                            "relname": "actor",
                            "relpersistence": "p",
                            "schemaname": "actors",
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 276,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 285,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "email",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 365,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 6,
                        "location": 374,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 4,
                        "initially_valid": true,
                        "location": 381,
                        "raw_expr": Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "email",
                                    },
                                  },
                                ],
                                "location": 388,
                              },
                            },
                            "location": 394,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": "~*",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "A_Const": Object {
                                "location": 397,
                                "val": Object {
                                  "String": Object {
                                    "str": "^.+@.+\\\\..+$",
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 354,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 360,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "password_hash",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 436,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 417,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 431,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 217,
        "stmt_location": 229,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 485,
                "relname": "foo",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "a",
                  "is_local": true,
                  "location": 491,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 493,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "b",
                  "is_local": true,
                  "location": 498,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 500,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 5,
                  "keys": Array [
                    Object {
                      "String": Object {
                        "str": "a",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "b",
                      },
                    },
                  ],
                  "location": 507,
                },
              },
            ],
          },
        },
        "stmt_len": 79,
        "stmt_location": 447,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 585,
                "relname": "t_full",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "a",
                  "is_local": true,
                  "location": 594,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 596,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "b",
                  "is_local": true,
                  "location": 601,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 603,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 8,
                  "fk_attrs": Array [
                    Object {
                      "String": Object {
                        "str": "a",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "b",
                      },
                    },
                  ],
                  "fk_del_action": "a",
                  "fk_matchtype": "f",
                  "fk_upd_action": "a",
                  "initially_valid": true,
                  "location": 610,
                  "pktable": Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 639,
                      "relname": "foo",
                      "relpersistence": "p",
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 128,
        "stmt_location": 527,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 671,
                "relname": "t_simple",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "a",
                  "is_local": true,
                  "location": 682,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 684,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "b",
                  "is_local": true,
                  "location": 689,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 691,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 8,
                  "fk_attrs": Array [
                    Object {
                      "String": Object {
                        "str": "a",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "b",
                      },
                    },
                  ],
                  "fk_del_action": "a",
                  "fk_matchtype": "s",
                  "fk_upd_action": "a",
                  "initially_valid": true,
                  "location": 698,
                  "pktable": Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 727,
                      "relname": "foo",
                      "relpersistence": "p",
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 89,
        "stmt_location": 656,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables custom 2`] = `
"ALTER TABLE myschema.role ADD CONSTRAINT fk_myschema_role_actor_id FOREIGN KEY ( actor_id ) REFERENCES actors.actor ( id ) ON DELETE CASCADE;
CREATE TABLE circles (
c circle,
EXCLUDE USING gist ( c WITH && )
);
CREATE TABLE actors_private.actor_info (
actor_id uuid PRIMARY KEY REFERENCES actors.actor ( id ) ON DELETE CASCADE,
email text NOT NULL UNIQUE CHECK ( ((email) ~* ('^.+@.+\\\\..+$')) ),
password_hash text NOT NULL
);
CREATE TABLE foo (
a int,
b int,
PRIMARY KEY ( a, b )
);
CREATE TABLE t_full (
a int,
b int,
FOREIGN KEY ( a, b ) REFERENCES foo MATCH FULL
);
CREATE TABLE t_simple (
a int,
b int,
FOREIGN KEY ( a, b ) REFERENCES foo
);"
`;

exports[`kitchen sink tables defaults 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 13,
                "relname": "customer_product_categories",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 57,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 47,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 50,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "serial",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 82,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 72,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 77,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "effective",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 114,
                        "raw_expr": Object {
                          "A_Const": Object {
                            "location": 122,
                            "val": Object {
                              "String": Object {
                                "str": "[-infinity,infinity]",
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 94,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 104,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "tstzrange",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables defaults 2`] = `
"CREATE TABLE customer_product_categories (
id serial PRIMARY KEY,
name text NOT NULL,
effective tstzrange DEFAULT ( '[-infinity,infinity]' )
);"
`;

exports[`kitchen sink tables exclude 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 13,
                "relname": "circles",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "c",
                  "is_local": true,
                  "location": 27,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 29,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "circle",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "access_method": "gist",
                  "contype": 7,
                  "exclusions": Array [
                    Array [
                      Object {
                        "IndexElem": Object {
                          "name": "c",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                      Array [
                        Object {
                          "String": Object {
                            "str": "&&",
                          },
                        },
                      ],
                    ],
                  ],
                  "location": 41,
                },
              },
            ],
          },
        },
        "stmt_len": 73,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 88,
                "relname": "customer_product_categories",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 134,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 122,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 127,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "serial",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 161,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 149,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 156,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "effective",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 195,
                        "raw_expr": Object {
                          "A_Const": Object {
                            "location": 203,
                            "val": Object {
                              "String": Object {
                                "str": "[-infinity,infinity]",
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 173,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 185,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "tstzrange",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "access_method": "gist",
                  "contype": 7,
                  "exclusions": Array [
                    Array [
                      Object {
                        "IndexElem": Object {
                          "expr": Object {
                            "FuncCall": Object {
                              "args": Array [
                                Object {
                                  "ColumnRef": Object {
                                    "fields": Array [
                                      Object {
                                        "String": Object {
                                          "str": "name",
                                        },
                                      },
                                    ],
                                    "location": 255,
                                  },
                                },
                              ],
                              "funcname": Array [
                                Object {
                                  "String": Object {
                                    "str": "lower",
                                  },
                                },
                              ],
                              "location": 249,
                            },
                          },
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                      Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                    ],
                    Array [
                      Object {
                        "IndexElem": Object {
                          "name": "effective",
                          "nulls_ordering": 0,
                          "ordering": 0,
                        },
                      },
                      Array [
                        Object {
                          "String": Object {
                            "str": "&&",
                          },
                        },
                      ],
                    ],
                  ],
                  "location": 229,
                },
              },
            ],
          },
        },
        "stmt_location": 74,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables exclude 2`] = `
"CREATE TABLE circles (
c circle,
EXCLUDE USING gist ( c WITH && )
);
CREATE TABLE customer_product_categories (
id serial PRIMARY KEY,
name text NOT NULL,
effective tstzrange DEFAULT ( '[-infinity,infinity]' ),
EXCLUDE USING gist ( lower(name) WITH = , effective WITH && )
);"
`;

exports[`kitchen sink tables foreign 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 13,
                "relname": "orders",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "order_id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 43,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 26,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 35,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "a",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 79,
                        "pk_attrs": Array [
                          Object {
                            "String": Object {
                              "str": "product_no",
                            },
                          },
                        ],
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 90,
                            "relname": "products",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 60,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 71,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "quantity",
                  "is_local": true,
                  "location": 117,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 126,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 135,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 150,
                "relname": "orders",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "order_id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 180,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 163,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 172,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "a",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 216,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 227,
                            "relname": "products",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 197,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 208,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "quantity",
                  "is_local": true,
                  "location": 241,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 250,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 123,
        "stmt_location": 136,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 274,
                "relname": "t1",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "a",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 291,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 281,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 283,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "b",
                  "is_local": true,
                  "location": 306,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 308,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "c",
                  "is_local": true,
                  "location": 319,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 321,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 8,
                  "fk_attrs": Array [
                    Object {
                      "String": Object {
                        "str": "b",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "c",
                      },
                    },
                  ],
                  "fk_del_action": "a",
                  "fk_matchtype": "s",
                  "fk_upd_action": "a",
                  "initially_valid": true,
                  "location": 332,
                  "pk_attrs": Array [
                    Object {
                      "String": Object {
                        "str": "c1",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "c2",
                      },
                    },
                  ],
                  "pktable": Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 362,
                      "relname": "other_table",
                      "relpersistence": "p",
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 124,
        "stmt_location": 260,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 399,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 433,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 414,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 425,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 450,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 455,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "is_local": true,
                  "location": 465,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 471,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 95,
        "stmt_location": 385,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 495,
                "relname": "orders",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "order_id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 525,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 508,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 517,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "shipping_address",
                  "is_local": true,
                  "location": 542,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 559,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 84,
        "stmt_location": 481,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 580,
                "relname": "order_items",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "a",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 617,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 628,
                            "relname": "products",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 598,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 609,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "order_id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "a",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 659,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 670,
                            "relname": "orders",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 642,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 651,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "quantity",
                  "is_local": true,
                  "location": 682,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 691,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 5,
                  "keys": Array [
                    Object {
                      "String": Object {
                        "str": "product_no",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "order_id",
                      },
                    },
                  ],
                  "location": 704,
                },
              },
            ],
          },
        },
        "stmt_len": 174,
        "stmt_location": 566,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables foreign 2`] = `
"CREATE TABLE orders (
order_id int PRIMARY KEY,
product_no int REFERENCES products ( product_no ),
quantity int
);
CREATE TABLE orders (
order_id int PRIMARY KEY,
product_no int REFERENCES products,
quantity int
);
CREATE TABLE t1 (
a int PRIMARY KEY,
b int,
c int,
FOREIGN KEY ( b, c ) REFERENCES other_table ( c1, c2 )
);
CREATE TABLE products (
product_no int PRIMARY KEY,
name text,
price numeric
);
CREATE TABLE orders (
order_id int PRIMARY KEY,
shipping_address text
);
CREATE TABLE order_items (
product_no int REFERENCES products,
order_id int REFERENCES orders,
quantity int,
PRIMARY KEY ( product_no, order_id )
);"
`;

exports[`kitchen sink tables match 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DropStmt": Object {
            "behavior": 1,
            "missing_ok": true,
            "objects": Array [
              Array [
                Object {
                  "String": Object {
                    "str": "users",
                  },
                },
              ],
            ],
            "removeType": 37,
          },
        },
        "stmt_len": 111,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 126,
                "relname": "users",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 147,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 156,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 136,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 139,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 57,
        "stmt_location": 112,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DropStmt": Object {
            "behavior": 1,
            "missing_ok": true,
            "objects": Array [
              Array [
                Object {
                  "String": Object {
                    "str": "post_type",
                  },
                },
              ],
            ],
            "removeType": 37,
          },
        },
        "stmt_len": 40,
        "stmt_location": 170,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 225,
                "relname": "post_type",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 250,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 259,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 239,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 242,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 61,
        "stmt_location": 211,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DropStmt": Object {
            "behavior": 1,
            "missing_ok": true,
            "objects": Array [
              Array [
                Object {
                  "String": Object {
                    "str": "assembly_seat",
                  },
                },
              ],
            ],
            "removeType": 37,
          },
        },
        "stmt_len": 44,
        "stmt_location": 273,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 332,
                "relname": "assembly_seat",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 361,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 370,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 350,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 353,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 65,
        "stmt_location": 318,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables match 2`] = `
"DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS post_type CASCADE;
CREATE TABLE post_type (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS assembly_seat CASCADE;
CREATE TABLE assembly_seat (
id int NOT NULL PRIMARY KEY
);"
`;

exports[`kitchen sink tables nulls 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 13,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 47,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 28,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 39,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 71,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 61,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 66,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "is_local": true,
                  "location": 85,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 91,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 100,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 115,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 0,
                        "location": 149,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 130,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 141,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 0,
                        "location": 169,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 159,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 164,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 0,
                        "location": 193,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 179,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 185,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 98,
        "stmt_location": 101,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 214,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 248,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 229,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 240,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 272,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 262,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 267,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 300,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 4,
                        "initially_valid": true,
                        "location": 309,
                        "raw_expr": Object {
                          "A_Expr": Object {
                            "kind": 0,
                            "lexpr": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "price",
                                    },
                                  },
                                ],
                                "location": 316,
                              },
                            },
                            "location": 322,
                            "name": Array [
                              Object {
                                "String": Object {
                                  "str": ">",
                                },
                              },
                            ],
                            "rexpr": Object {
                              "A_Const": Object {
                                "location": 324,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 0,
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 286,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 292,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 128,
        "stmt_location": 200,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables nulls 2`] = `
"CREATE TABLE products (
product_no int NOT NULL,
name text NOT NULL,
price numeric
);
CREATE TABLE products (
product_no int NULL,
name text NULL,
price numeric NULL
);
CREATE TABLE products (
product_no int NOT NULL,
name text NOT NULL,
price numeric NOT NULL CHECK ( ((price) > (0)) )
);"
`;

exports[`kitchen sink tables on_delete 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 13,
                "relname": "order_items",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "r",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 50,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 61,
                            "relname": "products",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 31,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 42,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "order_id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "c",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 111,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 122,
                            "relname": "orders",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 94,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 103,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "quantity",
                  "is_local": true,
                  "location": 152,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 161,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 5,
                  "keys": Array [
                    Object {
                      "String": Object {
                        "str": "product_no",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "order_id",
                      },
                    },
                  ],
                  "location": 174,
                },
              },
            ],
          },
        },
        "stmt_len": 210,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables on_delete 2`] = `
"CREATE TABLE order_items (
product_no int REFERENCES products ON DELETE RESTRICT,
order_id int REFERENCES orders ON DELETE CASCADE,
quantity int,
PRIMARY KEY ( product_no, order_id )
);"
`;

exports[`kitchen sink tables on_update 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 13,
                "relname": "order_items",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "a",
                        "fk_matchtype": "s",
                        "fk_upd_action": "r",
                        "initially_valid": true,
                        "location": 50,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 61,
                            "relname": "products",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 31,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 42,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "order_id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "a",
                        "fk_matchtype": "s",
                        "fk_upd_action": "c",
                        "initially_valid": true,
                        "location": 111,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 122,
                            "relname": "orders",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 94,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 103,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "quantity",
                  "is_local": true,
                  "location": 152,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 161,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 5,
                  "keys": Array [
                    Object {
                      "String": Object {
                        "str": "product_no",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "order_id",
                      },
                    },
                  ],
                  "location": 174,
                },
              },
            ],
          },
        },
        "stmt_len": 210,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables on_update 2`] = `
"CREATE TABLE order_items (
product_no int REFERENCES products ON UPDATE RESTRICT,
order_id int REFERENCES orders ON UPDATE CASCADE,
quantity int,
PRIMARY KEY ( product_no, order_id )
);"
`;

exports[`kitchen sink tables temp 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DropStmt": Object {
            "behavior": 1,
            "missing_ok": true,
            "objects": Array [
              Array [
                Object {
                  "String": Object {
                    "str": "users",
                  },
                },
              ],
            ],
            "removeType": 37,
          },
        },
        "stmt_len": 35,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 55,
                "relname": "users",
                "relpersistence": "t",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 76,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 85,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 65,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 68,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 62,
        "stmt_location": 36,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DropStmt": Object {
            "behavior": 1,
            "missing_ok": true,
            "objects": Array [
              Array [
                Object {
                  "String": Object {
                    "str": "post_type",
                  },
                },
              ],
            ],
            "removeType": 37,
          },
        },
        "stmt_len": 40,
        "stmt_location": 99,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 159,
                "relname": "post_type",
                "relpersistence": "t",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 184,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 193,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 173,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 176,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 66,
        "stmt_location": 140,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DropStmt": Object {
            "behavior": 1,
            "missing_ok": true,
            "objects": Array [
              Array [
                Object {
                  "String": Object {
                    "str": "assembly_seat",
                  },
                },
              ],
            ],
            "removeType": 37,
          },
        },
        "stmt_len": 44,
        "stmt_location": 207,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 271,
                "relname": "assembly_seat",
                "relpersistence": "t",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 300,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 309,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 289,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 292,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 70,
        "stmt_location": 252,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables temp 2`] = `
"DROP TABLE IF EXISTS users CASCADE;
CREATE TEMPORARY TABLE users (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS post_type CASCADE;
CREATE TEMPORARY TABLE post_type (
id int NOT NULL PRIMARY KEY
);
DROP TABLE IF EXISTS assembly_seat CASCADE;
CREATE TEMPORARY TABLE assembly_seat (
id int NOT NULL PRIMARY KEY
);"
`;

exports[`kitchen sink tables unique 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 13,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 6,
                        "location": 47,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 28,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 39,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 59,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 64,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "is_local": true,
                  "location": 74,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 80,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 89,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 104,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "is_local": true,
                  "location": 119,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 130,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 143,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 148,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "is_local": true,
                  "location": 158,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 164,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 6,
                  "keys": Array [
                    Object {
                      "String": Object {
                        "str": "product_no",
                      },
                    },
                  ],
                  "location": 177,
                },
              },
            ],
          },
        },
        "stmt_len": 108,
        "stmt_location": 90,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 213,
                "relname": "example",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "a",
                  "is_local": true,
                  "location": 227,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 229,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "b",
                  "is_local": true,
                  "location": 242,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 244,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "c",
                  "is_local": true,
                  "location": 257,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 259,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 6,
                  "keys": Array [
                    Object {
                      "String": Object {
                        "str": "a",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "c",
                      },
                    },
                  ],
                  "location": 272,
                },
              },
            ],
          },
        },
        "stmt_len": 88,
        "stmt_location": 199,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 302,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "conname": "must_be_different",
                        "contype": 6,
                        "location": 336,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 317,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 328,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 377,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 382,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "price",
                  "is_local": true,
                  "location": 392,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 398,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "numeric",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 119,
        "stmt_location": 288,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink tables unique 2`] = `
"CREATE TABLE products (
product_no int UNIQUE,
name text,
price numeric
);
CREATE TABLE products (
product_no int,
name text,
price numeric,
UNIQUE ( product_no )
);
CREATE TABLE example (
a int,
b int,
c int,
UNIQUE ( a, c )
);
CREATE TABLE products (
product_no int CONSTRAINT must_be_different UNIQUE,
name text,
price numeric
);"
`;

exports[`kitchen sink transactions begin_commit 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "TransactionStmt": Object {
            "kind": 0,
          },
        },
        "stmt_len": 5,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 20,
                "relname": "products",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "product_no",
                  "is_local": true,
                  "location": 35,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 46,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "pg_catalog",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "name",
                  "is_local": true,
                  "location": 59,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 64,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 64,
        "stmt_location": 6,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "TransactionStmt": Object {
            "kind": 2,
          },
        },
        "stmt_len": 7,
        "stmt_location": 71,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink transactions begin_commit 2`] = `
"BEGIN;
CREATE TABLE products (
product_no int,
name text
);
COMMIT;"
`;

exports[`kitchen sink triggers create 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 20,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "app_jobs",
                },
              },
              Object {
                "String": Object {
                  "str": "update_timestamps",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 58,
                "relname": "jobs",
                "relpersistence": "p",
                "schemaname": "app_jobs",
              },
            },
            "row": true,
            "timing": 2,
            "trigname": "_100_timestamps",
          },
        },
        "stmt_len": 131,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 4,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "app_jobs",
                },
              },
              Object {
                "String": Object {
                  "str": "jobs__increase_job_queue_count",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 195,
                "relname": "jobs",
                "relpersistence": "p",
                "schemaname": "app_jobs",
              },
            },
            "row": true,
            "trigname": "_500_increase_job_queue_count",
          },
        },
        "stmt_len": 149,
        "stmt_location": 132,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 8,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "app_jobs",
                },
              },
              Object {
                "String": Object {
                  "str": "jobs__decrease_job_queue_count",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 346,
                "relname": "jobs",
                "relpersistence": "p",
                "schemaname": "app_jobs",
              },
            },
            "row": true,
            "timing": 2,
            "trigname": "_500_decrease_job_queue_count",
          },
        },
        "stmt_len": 150,
        "stmt_location": 282,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "args": Array [
              Object {
                "String": Object {
                  "str": "jobs:insert",
                },
              },
            ],
            "events": 4,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "app_jobs",
                },
              },
              Object {
                "String": Object {
                  "str": "do_notify",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 485,
                "relname": "jobs",
                "relpersistence": "p",
                "schemaname": "app_jobs",
              },
            },
            "trigname": "_900_notify_worker",
          },
        },
        "stmt_len": 136,
        "stmt_location": 433,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "columns": Array [
              Object {
                "String": Object {
                  "str": "balance",
                },
              },
            ],
            "events": 16,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "check_account_update",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 632,
                "relname": "accounts",
                "relpersistence": "p",
              },
            },
            "row": true,
            "timing": 2,
            "trigname": "check_update",
          },
        },
        "stmt_len": 132,
        "stmt_location": 570,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 16,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "check_account_update",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 754,
                "relname": "accounts",
                "relpersistence": "p",
              },
            },
            "row": true,
            "timing": 2,
            "trigname": "check_update",
          },
        },
        "stmt_len": 121,
        "stmt_location": 703,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 16,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "check_account_update",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 876,
                "relname": "accounts",
                "relpersistence": "p",
              },
            },
            "row": true,
            "timing": 2,
            "trigname": "check_update",
            "whenClause": Object {
              "A_Expr": Object {
                "kind": 3,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "old",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "balance",
                        },
                      },
                    ],
                    "location": 912,
                  },
                },
                "location": 924,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "new",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "balance",
                        },
                      },
                    ],
                    "location": 941,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 173,
        "stmt_location": 825,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 16,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "log_account_update",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1047,
                "relname": "accounts",
                "relpersistence": "p",
              },
            },
            "row": true,
            "trigname": "log_update",
            "whenClause": Object {
              "A_Expr": Object {
                "kind": 3,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "old",
                        },
                      },
                      Object {
                        "A_Star": Object {},
                      },
                    ],
                    "location": 1083,
                  },
                },
                "location": 1089,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "new",
                        },
                      },
                      Object {
                        "A_Star": Object {},
                      },
                    ],
                    "location": 1106,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 156,
        "stmt_location": 999,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 4,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "view_insert_row",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1210,
                "relname": "my_view",
                "relpersistence": "p",
              },
            },
            "row": true,
            "timing": 64,
            "trigname": "view_insert",
          },
        },
        "stmt_len": 118,
        "stmt_location": 1156,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 4,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "check_transfer_balances_to_zero",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1328,
                "relname": "transfer",
                "relpersistence": "p",
              },
            },
            "transitionRels": Array [
              Object {
                "TriggerTransition": Object {
                  "isNew": true,
                  "isTable": true,
                  "name": "inserted",
                },
              },
            ],
            "trigname": "transfer_insert",
          },
        },
        "stmt_len": 178,
        "stmt_location": 1275,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 16,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "check_matching_pairs",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1511,
                "relname": "paired_items",
                "relpersistence": "p",
              },
            },
            "row": true,
            "transitionRels": Array [
              Object {
                "TriggerTransition": Object {
                  "isNew": true,
                  "isTable": true,
                  "name": "newtab",
                },
              },
              Object {
                "TriggerTransition": Object {
                  "isTable": true,
                  "name": "oldtab",
                },
              },
            ],
            "trigname": "paired_items_update",
          },
        },
        "stmt_len": 187,
        "stmt_location": 1454,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "events": 16,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "check_matching_pairs",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1699,
                "relname": "paired_items",
                "relpersistence": "p",
              },
            },
            "row": true,
            "transitionRels": Array [
              Object {
                "TriggerTransition": Object {
                  "isTable": true,
                  "name": "oldtab",
                },
              },
              Object {
                "TriggerTransition": Object {
                  "isNew": true,
                  "isTable": true,
                  "name": "newtab",
                },
              },
            ],
            "trigname": "paired_items_update",
          },
        },
        "stmt_len": 187,
        "stmt_location": 1642,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink triggers create 2`] = `
"CREATE TRIGGER _100_timestamps
BEFORE INSERT OR UPDATE ON app_jobs.jobs
FOR EACH ROW
EXECUTE PROCEDURE app_jobs. update_timestamps (  );
CREATE TRIGGER _500_increase_job_queue_count
AFTER INSERT ON app_jobs.jobs
FOR EACH ROW
EXECUTE PROCEDURE app_jobs. jobs__increase_job_queue_count (  );
CREATE TRIGGER _500_decrease_job_queue_count
BEFORE DELETE ON app_jobs.jobs
FOR EACH ROW
EXECUTE PROCEDURE app_jobs. jobs__decrease_job_queue_count (  );
CREATE TRIGGER _900_notify_worker
AFTER INSERT ON app_jobs.jobs
FOR EACH STATEMENT
EXECUTE PROCEDURE app_jobs. do_notify ( 'jobs:insert' );
CREATE TRIGGER check_update
BEFORE UPDATE OF balance ON accounts
FOR EACH ROW
EXECUTE PROCEDURE check_account_update (  );
CREATE TRIGGER check_update
BEFORE UPDATE ON accounts
FOR EACH ROW
EXECUTE PROCEDURE check_account_update (  );
CREATE TRIGGER check_update
BEFORE UPDATE ON accounts
FOR EACH ROW
WHEN ( OLD.balance IS DISTINCT FROM NEW.balance )
EXECUTE PROCEDURE check_account_update (  );
CREATE TRIGGER log_update
AFTER UPDATE ON accounts
FOR EACH ROW
WHEN ( OLD.* IS DISTINCT FROM NEW.* )
EXECUTE PROCEDURE log_account_update (  );
CREATE TRIGGER view_insert
INSTEAD OF INSERT ON my_view
FOR EACH ROW
EXECUTE PROCEDURE view_insert_row (  );
CREATE TRIGGER transfer_insert
AFTER INSERT ON transfer
REFERENCING NEW TABLE AS inserted FOR EACH STATEMENT
EXECUTE PROCEDURE check_transfer_balances_to_zero (  );
CREATE TRIGGER paired_items_update
AFTER UPDATE ON paired_items
REFERENCING NEW TABLE AS newtab OLD TABLE AS oldtab FOR EACH ROW
EXECUTE PROCEDURE check_matching_pairs (  );
CREATE TRIGGER paired_items_update
AFTER UPDATE ON paired_items
REFERENCING OLD TABLE AS oldtab NEW TABLE AS newtab FOR EACH ROW
EXECUTE PROCEDURE check_matching_pairs (  );"
`;

exports[`kitchen sink triggers custom 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DropStmt": Object {
            "behavior": 0,
            "missing_ok": true,
            "objects": Array [
              Object {
                "String": Object {
                  "str": "fb",
                },
              },
            ],
            "removeType": 32,
          },
        },
        "stmt_len": 24,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "DropStmt": Object {
            "behavior": 1,
            "missing_ok": true,
            "objects": Array [
              Object {
                "String": Object {
                  "str": "fb",
                },
              },
            ],
            "removeType": 32,
          },
        },
        "stmt_len": 33,
        "stmt_location": 25,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateSchemaStmt": Object {
            "schemaname": "fb",
          },
        },
        "stmt_len": 17,
        "stmt_location": 59,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "VariableSetStmt": Object {
            "args": Array [
              Object {
                "A_Const": Object {
                  "location": 97,
                  "val": Object {
                    "String": Object {
                      "str": "fb",
                    },
                  },
                },
              },
              Object {
                "A_Const": Object {
                  "location": 100,
                  "val": Object {
                    "String": Object {
                      "str": "$user",
                    },
                  },
                },
              },
              Object {
                "A_Const": Object {
                  "location": 108,
                  "val": Object {
                    "String": Object {
                      "str": "public",
                    },
                  },
                },
              },
            ],
            "kind": 0,
            "name": "search_path",
          },
        },
        "stmt_len": 37,
        "stmt_location": 77,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateExtensionStmt": Object {
            "extname": "uuid-ossp",
          },
        },
        "stmt_len": 29,
        "stmt_location": 115,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 160,
                "relname": "user",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 190,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 202,
                        "raw_expr": Object {
                          "FuncCall": Object {
                            "funcname": Array [
                              Object {
                                "String": Object {
                                  "str": "uuid_generate_v4",
                                },
                              },
                            ],
                            "location": 210,
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 171,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 185,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "created",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 258,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 267,
                        "raw_expr": Object {
                          "FuncCall": Object {
                            "funcname": Array [
                              Object {
                                "String": Object {
                                  "str": "now",
                                },
                              },
                            ],
                            "location": 275,
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 232,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 246,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "timestamptz",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "full_name",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 303,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 312,
                        "raw_expr": Object {
                          "A_Const": Object {
                            "location": 320,
                            "val": Object {
                              "String": Object {
                                "str": "",
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 284,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 298,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 179,
        "stmt_location": 145,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 341,
                "relname": "post",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 5,
                        "location": 369,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 381,
                        "raw_expr": Object {
                          "FuncCall": Object {
                            "funcname": Array [
                              Object {
                                "String": Object {
                                  "str": "uuid_generate_v4",
                                },
                              },
                            ],
                            "location": 389,
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 350,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 364,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "created",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 437,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 446,
                        "raw_expr": Object {
                          "FuncCall": Object {
                            "funcname": Array [
                              Object {
                                "String": Object {
                                  "str": "now",
                                },
                              },
                            ],
                            "location": 454,
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 411,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 425,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "timestamptz",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "content",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 482,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 491,
                        "raw_expr": Object {
                          "A_Const": Object {
                            "location": 499,
                            "val": Object {
                              "String": Object {
                                "str": "",
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 463,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 477,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "user",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "a",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 524,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 535,
                            "relname": "user",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 542,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 505,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 519,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 227,
        "stmt_location": 325,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateStmt": Object {
            "oncommit": 0,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 569,
                "relname": "friendship",
                "relpersistence": "p",
              },
            },
            "tableElts": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "first",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "a",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 603,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 614,
                            "relname": "user",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 621,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 584,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 598,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "second",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 8,
                        "fk_del_action": "a",
                        "fk_matchtype": "s",
                        "fk_upd_action": "a",
                        "initially_valid": true,
                        "location": 652,
                        "pktable": Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 663,
                            "relname": "user",
                            "relpersistence": "p",
                          },
                        },
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 670,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 633,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 647,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "created",
                  "constraints": Array [
                    Object {
                      "Constraint": Object {
                        "contype": 1,
                        "location": 708,
                      },
                    },
                    Object {
                      "Constraint": Object {
                        "contype": 2,
                        "location": 717,
                        "raw_expr": Object {
                          "FuncCall": Object {
                            "funcname": Array [
                              Object {
                                "String": Object {
                                  "str": "now",
                                },
                              },
                            ],
                            "location": 725,
                          },
                        },
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 682,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 696,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "timestamptz",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "Constraint": Object {
                  "contype": 6,
                  "keys": Array [
                    Object {
                      "String": Object {
                        "str": "first",
                      },
                    },
                    Object {
                      "String": Object {
                        "str": "second",
                      },
                    },
                  ],
                  "location": 734,
                },
              },
            ],
          },
        },
        "stmt_len": 205,
        "stmt_location": 553,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateFunctionStmt": Object {
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "check_friendship_symmetry",
                },
              },
            ],
            "options": Array [
              Object {
                "DefElem": Object {
                  "arg": Array [
                    Object {
                      "String": Object {
                        "str": "
DECLARE
  link friendship;
BEGIN
  SELECT * INTO link FROM friendship
   WHERE second = NEW.first AND first = NEW.second;
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Friendships must be INSERTed as pairs.';
  END IF;
  RETURN NEW;
END
",
                      },
                    },
                  ],
                  "defaction": 0,
                  "defname": "as",
                  "location": 821,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "String": Object {
                      "str": "plpgsql",
                    },
                  },
                  "defaction": 0,
                  "defname": "language",
                  "location": 1062,
                },
              },
              Object {
                "DefElem": Object {
                  "arg": Object {
                    "VariableSetStmt": Object {
                      "kind": 2,
                      "name": "search_path",
                    },
                  },
                  "defaction": 0,
                  "defname": "set",
                  "location": 1082,
                },
              },
            ],
            "returnType": Object {
              "TypeName": Object {
                "location": 813,
                "names": Array [
                  Object {
                    "String": Object {
                      "str": "trigger",
                    },
                  },
                ],
                "typemod": -1,
              },
            },
          },
        },
        "stmt_len": 351,
        "stmt_location": 759,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTrigStmt": Object {
            "deferrable": true,
            "events": 4,
            "funcname": Array [
              Object {
                "String": Object {
                  "str": "check_friendship_symmetry",
                },
              },
            ],
            "initdeferred": true,
            "isconstraint": true,
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 1175,
                "relname": "friendship",
                "relpersistence": "p",
              },
            },
            "row": true,
            "trigname": "friendship_symmetry",
          },
        },
        "stmt_len": 163,
        "stmt_location": 1111,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink triggers custom 2`] = `
"DROP SCHEMA IF EXISTS fb;
DROP SCHEMA IF EXISTS fb CASCADE;
CREATE SCHEMA fb;
SET search_path = 'fb', '$user', 'public';
CREATE EXTENSION \\"uuid-ossp\\";
CREATE TABLE \\"user\\" (
id uuid PRIMARY KEY DEFAULT ( uuid_generate_v4() ),
created timestamptz NOT NULL DEFAULT ( now() ),
full_name text NOT NULL DEFAULT ( '' )
);
CREATE TABLE post (
id uuid PRIMARY KEY DEFAULT ( uuid_generate_v4() ),
created timestamptz NOT NULL DEFAULT ( now() ),
content text NOT NULL DEFAULT ( '' ),
\\"user\\" uuid REFERENCES \\"user\\" NOT NULL
);
CREATE TABLE friendship (
first uuid REFERENCES \\"user\\" NOT NULL,
second uuid REFERENCES \\"user\\" NOT NULL,
created timestamptz NOT NULL DEFAULT ( now() ),
UNIQUE ( first, second )
);
CREATE FUNCTION check_friendship_symmetry (  ) RETURNS trigger AS $EOFCODE$
DECLARE
link friendship;
BEGIN
SELECT * INTO link FROM friendship
WHERE second = NEW.first AND first = NEW.second;
IF NOT FOUND THEN
RAISE EXCEPTION 'Friendships must be INSERTed as pairs.';
END IF;
RETURN NEW;
END
$EOFCODE$ LANGUAGE plpgsql SET search_path FROM CURRENT;
CREATE CONSTRAINT TRIGGER friendship_symmetry
AFTER INSERT ON friendship
DEFERRABLE INITIALLY DEFERRED
FOR EACH ROW
EXECUTE PROCEDURE check_friendship_symmetry (  );"
`;

exports[`kitchen sink types 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CompositeTypeStmt": Object {
            "coldeflist": Array [
              Object {
                "ColumnDef": Object {
                  "colname": "id",
                  "is_local": true,
                  "location": 41,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 44,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "verify_code",
                  "is_local": true,
                  "location": 52,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 64,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "text",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "verify_code_expires_on",
                  "is_local": true,
                  "location": 72,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 95,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "timestamptz",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
              Object {
                "ColumnDef": Object {
                  "colname": "actor_id",
                  "is_local": true,
                  "location": 110,
                  "typeName": Object {
                    "TypeName": Object {
                      "location": 119,
                      "names": Array [
                        Object {
                          "String": Object {
                            "str": "uuid",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                },
              },
            ],
            "typevar": Object {
              "RangeVar": Object {
                "location": 12,
                "relname": "mycustomtype",
                "relpersistence": "p",
                "schemaname": "myschema",
              },
            },
          },
        },
        "stmt_len": 125,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink types 2`] = `
"CREATE TYPE myschema.mycustomtype AS ( 	id uuid,
verify_code text,
verify_code_expires_on timestamptz,
actor_id uuid );"
`;

exports[`kitchen sink update 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 7,
                "relname": "update_test",
                "relpersistence": "p",
              },
            },
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 23,
                  "name": "c",
                  "val": Object {
                    "FuncCall": Object {
                      "args": Array [
                        Object {
                          "A_Const": Object {
                            "location": 34,
                            "val": Object {
                              "String": Object {
                                "str": "x",
                              },
                            },
                          },
                        },
                        Object {
                          "A_Const": Object {
                            "location": 39,
                            "val": Object {
                              "Integer": Object {
                                "ival": 10000,
                              },
                            },
                          },
                        },
                      ],
                      "funcname": Array [
                        Object {
                          "String": Object {
                            "str": "repeat",
                          },
                        },
                      ],
                      "location": 27,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "c",
                        },
                      },
                    ],
                    "location": 52,
                  },
                },
                "location": 54,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "A_Const": Object {
                    "location": 56,
                    "val": Object {
                      "String": Object {
                        "str": "car",
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 61,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 71,
                "relname": "update_test",
                "relpersistence": "p",
              },
            },
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 88,
                  "name": "b",
                  "val": Object {
                    "MultiAssignRef": Object {
                      "colno": 1,
                      "ncolumns": 2,
                      "source": Object {
                        "SubLink": Object {
                          "location": 95,
                          "subLinkType": 4,
                          "subselect": Object {
                            "SelectStmt": Object {
                              "fromClause": Array [
                                Object {
                                  "RangeVar": Object {
                                    "inh": true,
                                    "location": 114,
                                    "relname": "update_test",
                                    "relpersistence": "p",
                                  },
                                },
                              ],
                              "op": 0,
                              "targetList": Array [
                                Object {
                                  "ResTarget": Object {
                                    "location": 103,
                                    "val": Object {
                                      "A_Expr": Object {
                                        "kind": 0,
                                        "lexpr": Object {
                                          "ColumnRef": Object {
                                            "fields": Array [
                                              Object {
                                                "String": Object {
                                                  "str": "a",
                                                },
                                              },
                                            ],
                                            "location": 103,
                                          },
                                        },
                                        "location": 104,
                                        "name": Array [
                                          Object {
                                            "String": Object {
                                              "str": "+",
                                            },
                                          },
                                        ],
                                        "rexpr": Object {
                                          "A_Const": Object {
                                            "location": 105,
                                            "val": Object {
                                              "Integer": Object {
                                                "ival": 1,
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                Object {
                                  "ResTarget": Object {
                                    "location": 107,
                                    "val": Object {
                                      "ColumnRef": Object {
                                        "fields": Array [
                                          Object {
                                            "String": Object {
                                              "str": "b",
                                            },
                                          },
                                        ],
                                        "location": 107,
                                      },
                                    },
                                  },
                                },
                              ],
                              "whereClause": Object {
                                "A_Expr": Object {
                                  "kind": 0,
                                  "lexpr": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "a",
                                          },
                                        },
                                      ],
                                      "location": 132,
                                    },
                                  },
                                  "location": 134,
                                  "name": Array [
                                    Object {
                                      "String": Object {
                                        "str": "=",
                                      },
                                    },
                                  ],
                                  "rexpr": Object {
                                    "A_Const": Object {
                                      "location": 136,
                                      "val": Object {
                                        "Integer": Object {
                                          "ival": 1000,
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 90,
                  "name": "a",
                  "val": Object {
                    "MultiAssignRef": Object {
                      "colno": 2,
                      "ncolumns": 2,
                      "source": Object {
                        "SubLink": Object {
                          "location": 95,
                          "subLinkType": 4,
                          "subselect": Object {
                            "SelectStmt": Object {
                              "fromClause": Array [
                                Object {
                                  "RangeVar": Object {
                                    "inh": true,
                                    "location": 114,
                                    "relname": "update_test",
                                    "relpersistence": "p",
                                  },
                                },
                              ],
                              "op": 0,
                              "targetList": Array [
                                Object {
                                  "ResTarget": Object {
                                    "location": 103,
                                    "val": Object {
                                      "A_Expr": Object {
                                        "kind": 0,
                                        "lexpr": Object {
                                          "ColumnRef": Object {
                                            "fields": Array [
                                              Object {
                                                "String": Object {
                                                  "str": "a",
                                                },
                                              },
                                            ],
                                            "location": 103,
                                          },
                                        },
                                        "location": 104,
                                        "name": Array [
                                          Object {
                                            "String": Object {
                                              "str": "+",
                                            },
                                          },
                                        ],
                                        "rexpr": Object {
                                          "A_Const": Object {
                                            "location": 105,
                                            "val": Object {
                                              "Integer": Object {
                                                "ival": 1,
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                                Object {
                                  "ResTarget": Object {
                                    "location": 107,
                                    "val": Object {
                                      "ColumnRef": Object {
                                        "fields": Array [
                                          Object {
                                            "String": Object {
                                              "str": "b",
                                            },
                                          },
                                        ],
                                        "location": 107,
                                      },
                                    },
                                  },
                                },
                              ],
                              "whereClause": Object {
                                "A_Expr": Object {
                                  "kind": 0,
                                  "lexpr": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "a",
                                          },
                                        },
                                      ],
                                      "location": 132,
                                    },
                                  },
                                  "location": 134,
                                  "name": Array [
                                    Object {
                                      "String": Object {
                                        "str": "=",
                                      },
                                    },
                                  ],
                                  "rexpr": Object {
                                    "A_Const": Object {
                                      "location": 136,
                                      "val": Object {
                                        "Integer": Object {
                                          "ival": 1000,
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "a",
                        },
                      },
                    ],
                    "location": 150,
                  },
                },
                "location": 152,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "A_Const": Object {
                    "location": 154,
                    "val": Object {
                      "Integer": Object {
                        "ival": 11,
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 94,
        "stmt_location": 62,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 166,
                "relname": "something",
                "relpersistence": "p",
              },
            },
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 181,
                  "name": "b",
                  "val": Object {
                    "MultiAssignRef": Object {
                      "colno": 1,
                      "ncolumns": 2,
                      "source": Object {
                        "RowExpr": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 189,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 191,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 2,
                                  },
                                },
                              },
                            },
                          ],
                          "location": 188,
                          "row_format": 2,
                        },
                      },
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 183,
                  "name": "a",
                  "val": Object {
                    "MultiAssignRef": Object {
                      "colno": 2,
                      "ncolumns": 2,
                      "source": Object {
                        "RowExpr": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 189,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 1,
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 191,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 2,
                                  },
                                },
                              },
                            },
                          ],
                          "location": 188,
                          "row_format": 2,
                        },
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "a",
                        },
                      },
                    ],
                    "location": 202,
                  },
                },
                "location": 204,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "A_Const": Object {
                    "location": 206,
                    "val": Object {
                      "Integer": Object {
                        "ival": 11,
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 51,
        "stmt_location": 157,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 219,
                "relname": "update_test",
                "relpersistence": "p",
              },
            },
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 236,
                  "name": "c",
                  "val": Object {
                    "MultiAssignRef": Object {
                      "colno": 1,
                      "ncolumns": 3,
                      "source": Object {
                        "RowExpr": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 246,
                                "val": Object {
                                  "String": Object {
                                    "str": "bugle",
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Expr": Object {
                                "kind": 0,
                                "lexpr": Object {
                                  "ColumnRef": Object {
                                    "fields": Array [
                                      Object {
                                        "String": Object {
                                          "str": "b",
                                        },
                                      },
                                    ],
                                    "location": 255,
                                  },
                                },
                                "location": 256,
                                "name": Array [
                                  Object {
                                    "String": Object {
                                      "str": "+",
                                    },
                                  },
                                ],
                                "rexpr": Object {
                                  "A_Const": Object {
                                    "location": 257,
                                    "val": Object {
                                      "Integer": Object {
                                        "ival": 11,
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            Object {
                              "SetToDefault": Object {
                                "location": 261,
                              },
                            },
                          ],
                          "location": 245,
                          "row_format": 2,
                        },
                      },
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 238,
                  "name": "b",
                  "val": Object {
                    "MultiAssignRef": Object {
                      "colno": 2,
                      "ncolumns": 3,
                      "source": Object {
                        "RowExpr": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 246,
                                "val": Object {
                                  "String": Object {
                                    "str": "bugle",
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Expr": Object {
                                "kind": 0,
                                "lexpr": Object {
                                  "ColumnRef": Object {
                                    "fields": Array [
                                      Object {
                                        "String": Object {
                                          "str": "b",
                                        },
                                      },
                                    ],
                                    "location": 255,
                                  },
                                },
                                "location": 256,
                                "name": Array [
                                  Object {
                                    "String": Object {
                                      "str": "+",
                                    },
                                  },
                                ],
                                "rexpr": Object {
                                  "A_Const": Object {
                                    "location": 257,
                                    "val": Object {
                                      "Integer": Object {
                                        "ival": 11,
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            Object {
                              "SetToDefault": Object {
                                "location": 261,
                              },
                            },
                          ],
                          "location": 245,
                          "row_format": 2,
                        },
                      },
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 240,
                  "name": "a",
                  "val": Object {
                    "MultiAssignRef": Object {
                      "colno": 3,
                      "ncolumns": 3,
                      "source": Object {
                        "RowExpr": Object {
                          "args": Array [
                            Object {
                              "A_Const": Object {
                                "location": 246,
                                "val": Object {
                                  "String": Object {
                                    "str": "bugle",
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Expr": Object {
                                "kind": 0,
                                "lexpr": Object {
                                  "ColumnRef": Object {
                                    "fields": Array [
                                      Object {
                                        "String": Object {
                                          "str": "b",
                                        },
                                      },
                                    ],
                                    "location": 255,
                                  },
                                },
                                "location": 256,
                                "name": Array [
                                  Object {
                                    "String": Object {
                                      "str": "+",
                                    },
                                  },
                                ],
                                "rexpr": Object {
                                  "A_Const": Object {
                                    "location": 257,
                                    "val": Object {
                                      "Integer": Object {
                                        "ival": 11,
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            Object {
                              "SetToDefault": Object {
                                "location": 261,
                              },
                            },
                          ],
                          "location": 245,
                          "row_format": 2,
                        },
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "c",
                        },
                      },
                    ],
                    "location": 276,
                  },
                },
                "location": 278,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "A_Const": Object {
                    "location": 280,
                    "val": Object {
                      "String": Object {
                        "str": "foo",
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "stmt_len": 76,
        "stmt_location": 209,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 295,
                "relname": "shoelace_data",
                "relpersistence": "p",
              },
            },
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 320,
                  "name": "sl_name",
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "new",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "sl_name",
                          },
                        },
                      ],
                      "location": 330,
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 354,
                  "name": "sl_avail",
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "new",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "sl_avail",
                          },
                        },
                      ],
                      "location": 365,
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 390,
                  "name": "sl_color",
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "new",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "sl_color",
                          },
                        },
                      ],
                      "location": 401,
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 426,
                  "name": "sl_len",
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "new",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "sl_len",
                          },
                        },
                      ],
                      "location": 435,
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 458,
                  "name": "sl_unit",
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "new",
                          },
                        },
                        Object {
                          "String": Object {
                            "str": "sl_unit",
                          },
                        },
                      ],
                      "location": 468,
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "A_Expr": Object {
                "kind": 0,
                "lexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "sl_name",
                        },
                      },
                    ],
                    "location": 491,
                  },
                },
                "location": 499,
                "name": Array [
                  Object {
                    "String": Object {
                      "str": "=",
                    },
                  },
                ],
                "rexpr": Object {
                  "ColumnRef": Object {
                    "fields": Array [
                      Object {
                        "String": Object {
                          "str": "old",
                        },
                      },
                      Object {
                        "String": Object {
                          "str": "sl_name",
                        },
                      },
                    ],
                    "location": 501,
                  },
                },
              },
            },
          },
        },
        "stmt_len": 226,
        "stmt_location": 286,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 522,
                "relname": "something",
                "relpersistence": "p",
              },
            },
            "returningList": Array [
              Object {
                "ResTarget": Object {
                  "location": 552,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "a",
                          },
                        },
                      ],
                      "location": 552,
                    },
                  },
                },
              },
            ],
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 536,
                  "name": "a",
                  "val": Object {
                    "A_Const": Object {
                      "location": 540,
                      "val": Object {
                        "Integer": Object {
                          "ival": 1,
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 40,
        "stmt_location": 513,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 563,
                "relname": "something",
                "relpersistence": "p",
              },
            },
            "returningList": Array [
              Object {
                "ResTarget": Object {
                  "location": 593,
                  "name": "b",
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "a",
                          },
                        },
                      ],
                      "location": 593,
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 601,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "c",
                          },
                        },
                      ],
                      "location": 601,
                    },
                  },
                },
              },
            ],
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 577,
                  "name": "a",
                  "val": Object {
                    "A_Const": Object {
                      "location": 581,
                      "val": Object {
                        "Integer": Object {
                          "ival": 1,
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 48,
        "stmt_location": 554,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 637,
                  "relname": "b",
                  "relpersistence": "p",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 612,
                "relname": "something",
                "relpersistence": "p",
              },
            },
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 626,
                  "name": "a",
                  "val": Object {
                    "A_Const": Object {
                      "location": 630,
                      "val": Object {
                        "Integer": Object {
                          "ival": 1,
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 35,
        "stmt_location": 603,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "fromClause": Array [
              Object {
                "JoinExpr": Object {
                  "jointype": 0,
                  "larg": Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 682,
                      "relname": "c",
                      "relpersistence": "p",
                    },
                  },
                  "quals": Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "x",
                              },
                            },
                          ],
                          "location": 695,
                        },
                      },
                      "location": 697,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "d",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "y",
                              },
                            },
                          ],
                          "location": 699,
                        },
                      },
                    },
                  },
                  "rarg": Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 689,
                      "relname": "d",
                      "relpersistence": "p",
                    },
                  },
                },
              },
              Object {
                "RangeSubselect": Object {
                  "alias": Object {
                    "Alias": Object {
                      "aliasname": "f",
                    },
                  },
                  "subquery": Object {
                    "SelectStmt": Object {
                      "fromClause": Array [
                        Object {
                          "RangeVar": Object {
                            "inh": true,
                            "location": 720,
                            "relname": "e",
                            "relpersistence": "p",
                          },
                        },
                      ],
                      "op": 0,
                      "targetList": Array [
                        Object {
                          "ResTarget": Object {
                            "location": 713,
                            "val": Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "A_Star": Object {},
                                  },
                                ],
                                "location": 713,
                              },
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 648,
                "relname": "something",
                "relpersistence": "p",
              },
            },
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 662,
                  "name": "a",
                  "val": Object {
                    "A_Const": Object {
                      "location": 666,
                      "val": Object {
                        "Integer": Object {
                          "ival": 1,
                        },
                      },
                    },
                  },
                },
              },
              Object {
                "ResTarget": Object {
                  "location": 669,
                  "name": "b",
                  "val": Object {
                    "A_Const": Object {
                      "location": 673,
                      "val": Object {
                        "String": Object {
                          "str": "b",
                        },
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "BoolExpr": Object {
                "args": Array [
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "something",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "x",
                              },
                            },
                          ],
                          "location": 731,
                        },
                      },
                      "location": 743,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "d",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "x",
                              },
                            },
                          ],
                          "location": 745,
                        },
                      },
                    },
                  },
                  Object {
                    "A_Expr": Object {
                      "kind": 0,
                      "lexpr": Object {
                        "MinMaxExpr": Object {
                          "args": Array [
                            Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "something",
                                    },
                                  },
                                  Object {
                                    "String": Object {
                                      "str": "y",
                                    },
                                  },
                                ],
                                "location": 759,
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 772,
                                "val": Object {
                                  "Integer": Object {
                                    "ival": 0,
                                  },
                                },
                              },
                            },
                          ],
                          "location": 753,
                          "op": 1,
                        },
                      },
                      "location": 775,
                      "name": Array [
                        Object {
                          "String": Object {
                            "str": "=",
                          },
                        },
                      ],
                      "rexpr": Object {
                        "A_Expr": Object {
                          "kind": 0,
                          "lexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "f",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "z",
                                  },
                                },
                              ],
                              "location": 777,
                            },
                          },
                          "location": 781,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": "+",
                              },
                            },
                          ],
                          "rexpr": Object {
                            "A_Const": Object {
                              "location": 783,
                              "val": Object {
                                "Integer": Object {
                                  "ival": 1,
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                ],
                "boolop": 0,
                "location": 749,
              },
            },
          },
        },
        "stmt_len": 145,
        "stmt_location": 639,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 794,
                "relname": "something",
                "relpersistence": "p",
              },
            },
            "returningList": Array [
              Object {
                "ResTarget": Object {
                  "location": 824,
                  "name": "b#1",
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "String": Object {
                            "str": "b",
                          },
                        },
                      ],
                      "location": 824,
                    },
                  },
                },
              },
            ],
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 808,
                  "name": "a",
                  "val": Object {
                    "A_Const": Object {
                      "location": 812,
                      "val": Object {
                        "Integer": Object {
                          "ival": 1,
                        },
                      },
                    },
                  },
                },
              },
            ],
          },
        },
        "stmt_len": 49,
        "stmt_location": 785,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "UpdateStmt": Object {
            "fromClause": Array [
              Object {
                "RangeVar": Object {
                  "inh": true,
                  "location": 869,
                  "relname": "b",
                  "relpersistence": "p",
                },
              },
            ],
            "relation": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 844,
                "relname": "something",
                "relpersistence": "p",
              },
            },
            "returningList": Array [
              Object {
                "ResTarget": Object {
                  "location": 889,
                  "val": Object {
                    "ColumnRef": Object {
                      "fields": Array [
                        Object {
                          "A_Star": Object {},
                        },
                      ],
                      "location": 889,
                    },
                  },
                },
              },
            ],
            "targetList": Array [
              Object {
                "ResTarget": Object {
                  "location": 858,
                  "name": "a",
                  "val": Object {
                    "A_Const": Object {
                      "location": 862,
                      "val": Object {
                        "Integer": Object {
                          "ival": 1,
                        },
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": Object {
              "ColumnRef": Object {
                "fields": Array [
                  Object {
                    "String": Object {
                      "str": "c",
                    },
                  },
                ],
                "location": 877,
              },
            },
          },
        },
        "stmt_len": 55,
        "stmt_location": 835,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink update 2`] = `
"UPDATE update_test SET c = repeat('x', 10000) WHERE ((c) = ('car'));
UPDATE update_test SET ( b,a ) = (SELECT ((a) + (1)),
b FROM update_test WHERE ((a) = (1000))) WHERE ((a) = (11));
UPDATE something SET ( b,a ) = (1, 2) WHERE ((a) = (11));
UPDATE update_test SET ( c,b,a ) = ('bugle', ((b) + (11)), DEFAULT) WHERE ((c) = ('foo'));
UPDATE shoelace_data SET sl_name = new.sl_name,sl_avail = new.sl_avail,sl_color = new.sl_color,sl_len = new.sl_len,sl_unit = new.sl_unit WHERE ((sl_name) = (old.sl_name));
UPDATE something SET a = 1 RETURNING a;
UPDATE something SET a = 1 RETURNING a AS b,c;
UPDATE something SET a = 1 FROM b;
UPDATE something SET a = 1,b = 'b' FROM c INNER JOIN d ON ((x) = (d.y)),(SELECT * FROM e) AS f WHERE (((something.x) = (d.x)) AND ((LEAST(something.y, 0)) = (((f.z) + (1)))));
UPDATE something SET a = 1 RETURNING b AS \\"b#1\\";
UPDATE something SET a = 1 FROM b WHERE c RETURNING *;"
`;

exports[`kitchen sink upstream upstream/abstime.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/abstime.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/advisory_lock.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/advisory_lock.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/aggregates.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/aggregates.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/alter_generic.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/alter_generic.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/alter_operator.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/alter_operator.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/alter_table.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/alter_table.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/arrays.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/arrays.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/async.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/async.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/bit.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/bit.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/bitmapops.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/bitmapops.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/boolean.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/boolean.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/box.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/box.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/brin.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/brin.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/btree_index.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/btree_index.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/case.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/case.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/char.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/char.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/circle.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/circle.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/cluster.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/cluster.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/collate.linux.utf8.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/collate.linux.utf8.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/collate.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/collate.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/combocid.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/combocid.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/comments.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/comments.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/conversion.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/conversion.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/copy2.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/copy2.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/copydml.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/copydml.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/copyselect.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/copyselect.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_aggregate.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_aggregate.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_am.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_am.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_cast.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_cast.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_function_3.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_function_3.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_index.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_index.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_misc.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_misc.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_operator.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_operator.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_table.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_table.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_table_like.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_table_like.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_type.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_type.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/create_view.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/create_view.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/date.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/date.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/dbsize.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/dbsize.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/delete.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/delete.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/dependency.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/dependency.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/domain.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/domain.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/drop_if_exists.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/drop_if_exists.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/drop_operator.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/drop_operator.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/enum.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/enum.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/equivclass.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/equivclass.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/errors.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/errors.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/event_trigger.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/event_trigger.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/float4.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/float4.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/float8.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/float8.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/foreign_data.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/foreign_data.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/foreign_key.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/foreign_key.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/functional_deps.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/functional_deps.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/geometry.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/geometry.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/gin.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/gin.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/gist.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/gist.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/groupingsets.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/groupingsets.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/guc.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/guc.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/hash_index.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/hash_index.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/horology.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/horology.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/hs_primary_extremes.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/hs_primary_extremes.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/hs_primary_setup.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/hs_primary_setup.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/hs_standby_allowed.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/hs_standby_allowed.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/hs_standby_check.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/hs_standby_check.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/hs_standby_disallowed.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/hs_standby_disallowed.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/hs_standby_functions.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/hs_standby_functions.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/indirect_toast.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/indirect_toast.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/inet.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/inet.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/inherit.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/inherit.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/init_privs.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/init_privs.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/insert.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/insert.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/insert_conflict.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/insert_conflict.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/int2.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/int2.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/int4.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/int4.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/int8.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/int8.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/interval.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/interval.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/join.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/join.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/json.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/json.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/json_encoding.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/json_encoding.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/jsonb.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/jsonb.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/limit.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/limit.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/line.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/line.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/lock.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/lock.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/lseg.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/lseg.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/macaddr.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/macaddr.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/matview.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/matview.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/misc_functions.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/misc_functions.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/money.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/money.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/name.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/name.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/namespace.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/namespace.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/numeric.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/numeric.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/numeric_big.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/numeric_big.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/numerology.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/numerology.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/object_address.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/object_address.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/oid.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/oid.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/oidjoins.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/oidjoins.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/opr_sanity.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/opr_sanity.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/path.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/path.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/pg_lsn.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/pg_lsn.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/plancache.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/plancache.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/plpgsql.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/plpgsql.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/point.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/point.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/polygon.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/polygon.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/polymorphism.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/polymorphism.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/portals.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/portals.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/portals_p2.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/portals_p2.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/prepare.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/prepare.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/prepared_xacts.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/prepared_xacts.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/privileges.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/privileges.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/psql.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/psql.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/psql_crosstab.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/psql_crosstab.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/random.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/random.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/rangefuncs.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/rangefuncs.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/rangetypes.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/rangetypes.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/regex.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/regex.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/regproc.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/regproc.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/reltime.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/reltime.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/replica_identity.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/replica_identity.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/returning.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/returning.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/roleattributes.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/roleattributes.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/rolenames.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/rolenames.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/rowsecurity.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/rowsecurity.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/rowtypes.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/rowtypes.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/rules.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/rules.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/sanity_check.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/sanity_check.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/security_label.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/security_label.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/select.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/select.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/select_distinct.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/select_distinct.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/select_distinct_on.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/select_distinct_on.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/select_having.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/select_having.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/select_implicit.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/select_implicit.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/select_into.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/select_into.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/select_views.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/select_views.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/sequence.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/sequence.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/spgist.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/spgist.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/stats.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/stats.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/strings.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/strings.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/subselect.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/subselect.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/tablesample.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/tablesample.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/temp.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/temp.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/text.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/text.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/time.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/time.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/timestamp.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/timestamp.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/timestamptz.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/timestamptz.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/timetz.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/timetz.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/tinterval.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/tinterval.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/transactions.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/transactions.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/triggers.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/triggers.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/truncate.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/truncate.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/tsdicts.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/tsdicts.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/tsearch.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/tsearch.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/tstypes.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/tstypes.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/txid.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/txid.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/type_sanity.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/type_sanity.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/typed_table.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/typed_table.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/union.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/union.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/updatable_views.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/updatable_views.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/update.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/update.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/uuid.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/uuid.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/vacuum.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/vacuum.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/varchar.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/varchar.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/window.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/window.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/with.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/with.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/without_oid.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/without_oid.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/xml.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/xml.sql 2`] = `""`;

exports[`kitchen sink upstream upstream/xmlmap.sql 1`] = `
Object {
  "query": Array [],
  "stderr": "",
}
`;

exports[`kitchen sink upstream upstream/xmlmap.sql 2`] = `""`;

exports[`kitchen sink views create 1`] = `
Object {
  "query": Array [
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "ViewStmt": Object {
            "query": Object {
              "SelectStmt": Object {
                "fromClause": Array [
                  Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 73,
                      "relname": "permits",
                      "relpersistence": "p",
                    },
                  },
                ],
                "op": 0,
                "targetList": Array [
                  Object {
                    "ResTarget": Object {
                      "location": 66,
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "A_Star": Object {},
                            },
                          ],
                          "location": 66,
                        },
                      },
                    },
                  },
                ],
              },
            },
            "view": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 12,
                "relname": "direct_project_permits",
                "relpersistence": "p",
                "schemaname": "collaboration_public",
              },
            },
            "withCheckOption": 0,
          },
        },
        "stmt_len": 80,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "CreateTableAsStmt": Object {
            "into": Object {
              "IntoClause": Object {
                "onCommit": 0,
                "rel": Object {
                  "RangeVar": Object {
                    "inh": true,
                    "location": 108,
                    "relname": "direct_project_permits",
                    "relpersistence": "p",
                    "schemaname": "collaboration_public",
                  },
                },
              },
            },
            "query": Object {
              "SelectStmt": Object {
                "fromClause": Array [
                  Object {
                    "RangeVar": Object {
                      "inh": true,
                      "location": 169,
                      "relname": "permits",
                      "relpersistence": "p",
                    },
                  },
                ],
                "op": 0,
                "targetList": Array [
                  Object {
                    "ResTarget": Object {
                      "location": 162,
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "A_Star": Object {},
                            },
                          ],
                          "location": 162,
                        },
                      },
                    },
                  },
                ],
              },
            },
            "relkind": 23,
          },
        },
        "stmt_len": 95,
        "stmt_location": 81,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "ViewStmt": Object {
            "query": Object {
              "SelectStmt": Object {
                "fromClause": Array [
                  Object {
                    "JoinExpr": Object {
                      "jointype": 0,
                      "larg": Object {
                        "JoinExpr": Object {
                          "jointype": 0,
                          "larg": Object {
                            "JoinExpr": Object {
                              "jointype": 0,
                              "larg": Object {
                                "RangeVar": Object {
                                  "alias": Object {
                                    "Alias": Object {
                                      "aliasname": "a",
                                    },
                                  },
                                  "inh": true,
                                  "location": 336,
                                  "relname": "pg_attribute",
                                  "relpersistence": "p",
                                },
                              },
                              "quals": Object {
                                "A_Expr": Object {
                                  "kind": 0,
                                  "lexpr": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "t",
                                          },
                                        },
                                        Object {
                                          "String": Object {
                                            "str": "oid",
                                          },
                                        },
                                      ],
                                      "location": 374,
                                    },
                                  },
                                  "location": 380,
                                  "name": Array [
                                    Object {
                                      "String": Object {
                                        "str": "=",
                                      },
                                    },
                                  ],
                                  "rexpr": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "a",
                                          },
                                        },
                                        Object {
                                          "String": Object {
                                            "str": "atttypid",
                                          },
                                        },
                                      ],
                                      "location": 382,
                                    },
                                  },
                                },
                              },
                              "rarg": Object {
                                "RangeVar": Object {
                                  "alias": Object {
                                    "Alias": Object {
                                      "aliasname": "t",
                                    },
                                  },
                                  "inh": true,
                                  "location": 360,
                                  "relname": "pg_type",
                                  "relpersistence": "p",
                                },
                              },
                            },
                          },
                          "quals": Object {
                            "A_Expr": Object {
                              "kind": 0,
                              "lexpr": Object {
                                "ColumnRef": Object {
                                  "fields": Array [
                                    Object {
                                      "String": Object {
                                        "str": "c",
                                      },
                                    },
                                    Object {
                                      "String": Object {
                                        "str": "oid",
                                      },
                                    },
                                  ],
                                  "location": 418,
                                },
                              },
                              "location": 424,
                              "name": Array [
                                Object {
                                  "String": Object {
                                    "str": "=",
                                  },
                                },
                              ],
                              "rexpr": Object {
                                "ColumnRef": Object {
                                  "fields": Array [
                                    Object {
                                      "String": Object {
                                        "str": "a",
                                      },
                                    },
                                    Object {
                                      "String": Object {
                                        "str": "attrelid",
                                      },
                                    },
                                  ],
                                  "location": 426,
                                },
                              },
                            },
                          },
                          "rarg": Object {
                            "RangeVar": Object {
                              "alias": Object {
                                "Alias": Object {
                                  "aliasname": "c",
                                },
                              },
                              "inh": true,
                              "location": 403,
                              "relname": "pg_class",
                              "relpersistence": "p",
                            },
                          },
                        },
                      },
                      "quals": Object {
                        "A_Expr": Object {
                          "kind": 0,
                          "lexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "n",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "oid",
                                  },
                                },
                              ],
                              "location": 466,
                            },
                          },
                          "location": 472,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": "=",
                              },
                            },
                          ],
                          "rexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "c",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "relnamespace",
                                  },
                                },
                              ],
                              "location": 474,
                            },
                          },
                        },
                      },
                      "rarg": Object {
                        "RangeVar": Object {
                          "alias": Object {
                            "Alias": Object {
                              "aliasname": "n",
                            },
                          },
                          "inh": true,
                          "location": 447,
                          "relname": "pg_namespace",
                          "relpersistence": "p",
                        },
                      },
                    },
                  },
                ],
                "op": 0,
                "sortClause": Array [
                  Object {
                    "SortBy": Object {
                      "location": -1,
                      "node": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "attnum",
                              },
                            },
                          ],
                          "location": 623,
                        },
                      },
                      "sortby_dir": 0,
                      "sortby_nulls": 0,
                    },
                  },
                ],
                "targetList": Array [
                  Object {
                    "ResTarget": Object {
                      "location": 229,
                      "name": "name",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "attname",
                              },
                            },
                          ],
                          "location": 229,
                        },
                      },
                    },
                  },
                  Object {
                    "ResTarget": Object {
                      "location": 250,
                      "name": "type",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "t",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "typname",
                              },
                            },
                          ],
                          "location": 250,
                        },
                      },
                    },
                  },
                  Object {
                    "ResTarget": Object {
                      "location": 273,
                      "name": "table_name",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "c",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "relname",
                              },
                            },
                          ],
                          "location": 273,
                        },
                      },
                    },
                  },
                  Object {
                    "ResTarget": Object {
                      "location": 302,
                      "name": "schema_name",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "n",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "nspname",
                              },
                            },
                          ],
                          "location": 302,
                        },
                      },
                    },
                  },
                ],
                "whereClause": Object {
                  "BoolExpr": Object {
                    "args": Array [
                      Object {
                        "A_Expr": Object {
                          "kind": 7,
                          "lexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "n",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "nspname",
                                  },
                                },
                              ],
                              "location": 500,
                            },
                          },
                          "location": 510,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": "<>",
                              },
                            },
                          ],
                          "rexpr": Array [
                            Object {
                              "A_Const": Object {
                                "location": 518,
                                "val": Object {
                                  "String": Object {
                                    "str": "pg_catalog",
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 532,
                                "val": Object {
                                  "String": Object {
                                    "str": "information_schema",
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 554,
                                "val": Object {
                                  "String": Object {
                                    "str": "pg_toast",
                                  },
                                },
                              },
                            },
                          ],
                        },
                      },
                      Object {
                        "A_Expr": Object {
                          "kind": 0,
                          "lexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "attnum",
                                  },
                                },
                              ],
                              "location": 574,
                            },
                          },
                          "location": 581,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": ">",
                              },
                            },
                          ],
                          "rexpr": Object {
                            "A_Const": Object {
                              "location": 583,
                              "val": Object {
                                "Integer": Object {
                                  "ival": 0,
                                },
                              },
                            },
                          },
                        },
                      },
                      Object {
                        "BoolExpr": Object {
                          "args": Array [
                            Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "attisdropped",
                                    },
                                  },
                                ],
                                "location": 597,
                              },
                            },
                          ],
                          "boolop": 2,
                          "location": 593,
                        },
                      },
                    ],
                    "boolop": 0,
                    "location": 570,
                  },
                },
              },
            },
            "view": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 191,
                "relname": "app_columns",
                "relpersistence": "p",
                "schemaname": "superschema",
              },
            },
            "withCheckOption": 0,
          },
        },
        "stmt_len": 452,
        "stmt_location": 177,
      },
    },
    Object {
      "RawStmt": Object {
        "stmt": Object {
          "ViewStmt": Object {
            "query": Object {
              "SelectStmt": Object {
                "fromClause": Array [
                  Object {
                    "JoinExpr": Object {
                      "jointype": 0,
                      "larg": Object {
                        "JoinExpr": Object {
                          "jointype": 0,
                          "larg": Object {
                            "JoinExpr": Object {
                              "jointype": 0,
                              "larg": Object {
                                "RangeVar": Object {
                                  "alias": Object {
                                    "Alias": Object {
                                      "aliasname": "a",
                                    },
                                  },
                                  "inh": true,
                                  "location": 789,
                                  "relname": "pg_attribute",
                                  "relpersistence": "p",
                                },
                              },
                              "quals": Object {
                                "A_Expr": Object {
                                  "kind": 0,
                                  "lexpr": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "t",
                                          },
                                        },
                                        Object {
                                          "String": Object {
                                            "str": "oid",
                                          },
                                        },
                                      ],
                                      "location": 827,
                                    },
                                  },
                                  "location": 833,
                                  "name": Array [
                                    Object {
                                      "String": Object {
                                        "str": "=",
                                      },
                                    },
                                  ],
                                  "rexpr": Object {
                                    "ColumnRef": Object {
                                      "fields": Array [
                                        Object {
                                          "String": Object {
                                            "str": "a",
                                          },
                                        },
                                        Object {
                                          "String": Object {
                                            "str": "atttypid",
                                          },
                                        },
                                      ],
                                      "location": 835,
                                    },
                                  },
                                },
                              },
                              "rarg": Object {
                                "RangeVar": Object {
                                  "alias": Object {
                                    "Alias": Object {
                                      "aliasname": "t",
                                    },
                                  },
                                  "inh": true,
                                  "location": 813,
                                  "relname": "pg_type",
                                  "relpersistence": "p",
                                },
                              },
                            },
                          },
                          "quals": Object {
                            "A_Expr": Object {
                              "kind": 0,
                              "lexpr": Object {
                                "ColumnRef": Object {
                                  "fields": Array [
                                    Object {
                                      "String": Object {
                                        "str": "c",
                                      },
                                    },
                                    Object {
                                      "String": Object {
                                        "str": "oid",
                                      },
                                    },
                                  ],
                                  "location": 871,
                                },
                              },
                              "location": 877,
                              "name": Array [
                                Object {
                                  "String": Object {
                                    "str": "=",
                                  },
                                },
                              ],
                              "rexpr": Object {
                                "ColumnRef": Object {
                                  "fields": Array [
                                    Object {
                                      "String": Object {
                                        "str": "a",
                                      },
                                    },
                                    Object {
                                      "String": Object {
                                        "str": "attrelid",
                                      },
                                    },
                                  ],
                                  "location": 879,
                                },
                              },
                            },
                          },
                          "rarg": Object {
                            "RangeVar": Object {
                              "alias": Object {
                                "Alias": Object {
                                  "aliasname": "c",
                                },
                              },
                              "inh": true,
                              "location": 856,
                              "relname": "pg_class",
                              "relpersistence": "p",
                            },
                          },
                        },
                      },
                      "quals": Object {
                        "A_Expr": Object {
                          "kind": 0,
                          "lexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "n",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "oid",
                                  },
                                },
                              ],
                              "location": 919,
                            },
                          },
                          "location": 925,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": "=",
                              },
                            },
                          ],
                          "rexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "c",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "relnamespace",
                                  },
                                },
                              ],
                              "location": 927,
                            },
                          },
                        },
                      },
                      "rarg": Object {
                        "RangeVar": Object {
                          "alias": Object {
                            "Alias": Object {
                              "aliasname": "n",
                            },
                          },
                          "inh": true,
                          "location": 900,
                          "relname": "pg_namespace",
                          "relpersistence": "p",
                        },
                      },
                    },
                  },
                ],
                "op": 0,
                "sortClause": Array [
                  Object {
                    "SortBy": Object {
                      "location": -1,
                      "node": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "attnum",
                              },
                            },
                          ],
                          "location": 1072,
                        },
                      },
                      "sortby_dir": 0,
                      "sortby_nulls": 0,
                    },
                  },
                ],
                "targetList": Array [
                  Object {
                    "ResTarget": Object {
                      "location": 682,
                      "name": "name",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "attname",
                              },
                            },
                          ],
                          "location": 682,
                        },
                      },
                    },
                  },
                  Object {
                    "ResTarget": Object {
                      "location": 703,
                      "name": "type",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "t",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "typname",
                              },
                            },
                          ],
                          "location": 703,
                        },
                      },
                    },
                  },
                  Object {
                    "ResTarget": Object {
                      "location": 726,
                      "name": "table_name",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "c",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "relname",
                              },
                            },
                          ],
                          "location": 726,
                        },
                      },
                    },
                  },
                  Object {
                    "ResTarget": Object {
                      "location": 755,
                      "name": "schema_name",
                      "val": Object {
                        "ColumnRef": Object {
                          "fields": Array [
                            Object {
                              "String": Object {
                                "str": "n",
                              },
                            },
                            Object {
                              "String": Object {
                                "str": "nspname",
                              },
                            },
                          ],
                          "location": 755,
                        },
                      },
                    },
                  },
                ],
                "whereClause": Object {
                  "BoolExpr": Object {
                    "args": Array [
                      Object {
                        "A_Expr": Object {
                          "kind": 7,
                          "lexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "n",
                                  },
                                },
                                Object {
                                  "String": Object {
                                    "str": "nspname",
                                  },
                                },
                              ],
                              "location": 953,
                            },
                          },
                          "location": 963,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": "=",
                              },
                            },
                          ],
                          "rexpr": Array [
                            Object {
                              "A_Const": Object {
                                "location": 967,
                                "val": Object {
                                  "String": Object {
                                    "str": "pg_catalog",
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 981,
                                "val": Object {
                                  "String": Object {
                                    "str": "information_schema",
                                  },
                                },
                              },
                            },
                            Object {
                              "A_Const": Object {
                                "location": 1003,
                                "val": Object {
                                  "String": Object {
                                    "str": "pg_toast",
                                  },
                                },
                              },
                            },
                          ],
                        },
                      },
                      Object {
                        "A_Expr": Object {
                          "kind": 0,
                          "lexpr": Object {
                            "ColumnRef": Object {
                              "fields": Array [
                                Object {
                                  "String": Object {
                                    "str": "attnum",
                                  },
                                },
                              ],
                              "location": 1023,
                            },
                          },
                          "location": 1030,
                          "name": Array [
                            Object {
                              "String": Object {
                                "str": ">",
                              },
                            },
                          ],
                          "rexpr": Object {
                            "A_Const": Object {
                              "location": 1032,
                              "val": Object {
                                "Integer": Object {
                                  "ival": 0,
                                },
                              },
                            },
                          },
                        },
                      },
                      Object {
                        "BoolExpr": Object {
                          "args": Array [
                            Object {
                              "ColumnRef": Object {
                                "fields": Array [
                                  Object {
                                    "String": Object {
                                      "str": "attisdropped",
                                    },
                                  },
                                ],
                                "location": 1046,
                              },
                            },
                          ],
                          "boolop": 2,
                          "location": 1042,
                        },
                      },
                    ],
                    "boolop": 0,
                    "location": 1019,
                  },
                },
              },
            },
            "view": Object {
              "RangeVar": Object {
                "inh": true,
                "location": 644,
                "relname": "app_columns",
                "relpersistence": "p",
                "schemaname": "superschema",
              },
            },
            "withCheckOption": 0,
          },
        },
        "stmt_len": 448,
        "stmt_location": 630,
      },
    },
  ],
  "stderr": "",
}
`;

exports[`kitchen sink views create 2`] = `
"CREATE VIEW collaboration_public.direct_project_permits AS SELECT * FROM permits;
CREATE MATERIALIZED VIEW collaboration_public.direct_project_permits AS SELECT * FROM permits;
CREATE VIEW superschema.app_columns AS SELECT attname AS name,
t.typname AS type,
c.relname AS table_name,
n.nspname AS schema_name FROM pg_attribute AS a INNER JOIN pg_type AS t ON ((t.oid) = (a.atttypid)) INNER JOIN pg_class AS c ON ((c.oid) = (a.attrelid)) INNER JOIN pg_namespace AS n ON ((n.oid) = (c.relnamespace)) WHERE (n.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast') AND ((attnum) > (0)) AND NOT (attisdropped)) ORDER BY attnum;
CREATE VIEW superschema.app_columns AS SELECT attname AS name,
t.typname AS type,
c.relname AS table_name,
n.nspname AS schema_name FROM pg_attribute AS a INNER JOIN pg_type AS t ON ((t.oid) = (a.atttypid)) INNER JOIN pg_class AS c ON ((c.oid) = (a.attrelid)) INNER JOIN pg_namespace AS n ON ((n.oid) = (c.relnamespace)) WHERE (n.nspname IN ('pg_catalog', 'information_schema', 'pg_toast') AND ((attnum) > (0)) AND NOT (attisdropped)) ORDER BY attnum;"
`;
